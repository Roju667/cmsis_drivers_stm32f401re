
cmsis_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003554  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080036f0  080036f0  000136f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003738  08003738  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003738  08003738  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003738  08003738  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000068  080037a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080037a8  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006479  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c6  00000000  00000000  00026511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  000276d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000260  00000000  00000000  000279d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ee33  00000000  00000000  00027c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000402f  00000000  00000000  00036a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000572cb  00000000  00000000  0003aa92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00091d5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e50  00000000  00000000  00091db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080036d4 	.word	0x080036d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	080036d4 	.word	0x080036d4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <main>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	f000 fb54 	bl	8001240 <i2c_bmp180_example>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <SystemInit>:
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopFillZerobss+0x12>
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopFillZerobss+0x16>)
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1a>)
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1e>)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:
 8000bd2:	58d4      	ldr	r4, [r2, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:
 8000bd8:	18c4      	adds	r4, r0, r3
 8000bda:	428c      	cmp	r4, r1
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopFillZerobss+0x22>)
 8000be0:	4c0b      	ldr	r4, [pc, #44]	; (8000c10 <LoopFillZerobss+0x26>)
 8000be2:	2300      	movs	r3, #0
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:
 8000bea:	42a2      	cmp	r2, r4
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>
 8000bee:	f7ff ffd7 	bl	8000ba0 <SystemInit>
 8000bf2:	f001 fd47 	bl	8002684 <__libc_init_array>
 8000bf6:	f7ff ffcb 	bl	8000b90 <main>
 8000bfa:	4770      	bx	lr
 8000bfc:	20018000 	.word	0x20018000
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000068 	.word	0x20000068
 8000c08:	08003740 	.word	0x08003740
 8000c0c:	20000068 	.word	0x20000068
 8000c10:	200000e0 	.word	0x200000e0

08000c14 <ADC_IRQHandler>:
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>

08000c16 <bmp180_read_chip_id>:
 * @param[in] - NONE.
 * @return    - NO_ERR if chip_id is equal to 0x55, otherwise
 * CHIP_ID_INVALID_ERR.
 */
static bmp_err_t bmp180_read_chip_id(bmp180_t *p_bmp)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af02      	add	r7, sp, #8
 8000c1c:	6078      	str	r0, [r7, #4]
	uint8_t out_buff = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73bb      	strb	r3, [r7, #14]
	uint8_t ret_val = NO_ERR;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]

	// data read
	// send slave address and memory address
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_CHIP_ID_REG, 0, 0);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	22d0      	movs	r2, #208	; 0xd0
 8000c32:	21ef      	movs	r1, #239	; 0xef
 8000c34:	f000 ffee 	bl	8001c14 <I2C_Transmit>
	// read data
	I2C_Receive(p_bmp->p_i2c_handle, BMP_READ_ADDR, &out_buff, 1);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000c3c:	f107 020e 	add.w	r2, r7, #14
 8000c40:	2301      	movs	r3, #1
 8000c42:	21ef      	movs	r1, #239	; 0xef
 8000c44:	f001 f899 	bl	8001d7a <I2C_Receive>

	if (BMP_CHIP_ID_VAL != out_buff)
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	2b55      	cmp	r3, #85	; 0x55
 8000c4c:	d001      	beq.n	8000c52 <bmp180_read_chip_id+0x3c>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <bmp180_set_oss>:
 * @param[in] - struct of type oss_t
 * @param[in] - enum of type oss_ratio_t
 * @return    - None
 */
static void bmp180_set_oss(bmp180_t *p_bmp, oss_ratio_t ratio)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] =
 8000c68:	2300      	movs	r3, #0
 8000c6a:	81bb      	strh	r3, [r7, #12]
	{ 0 };

	switch (ratio)
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d81e      	bhi.n	8000cb0 <bmp180_set_oss+0x54>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <bmp180_set_oss+0x1c>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000c89 	.word	0x08000c89
 8000c7c:	08000c93 	.word	0x08000c93
 8000c80:	08000c9d 	.word	0x08000c9d
 8000c84:	08000ca7 	.word	0x08000ca7
	{
	case ULTRA_LOW_PWR_MODE:
	{
		p_bmp->oss.wait_time = BMP_OSS0_CONV_TIME;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 8000c90:	e013      	b.n	8000cba <bmp180_set_oss+0x5e>
	}
	case STANDARD_MODE:
	{
		p_bmp->oss.wait_time = BMP_OSS1_CONV_TIME;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2208      	movs	r2, #8
 8000c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 8000c9a:	e00e      	b.n	8000cba <bmp180_set_oss+0x5e>
	}
	case HIGH:
	{
		p_bmp->oss.wait_time = BMP_OSS2_CONV_TIME;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	220e      	movs	r2, #14
 8000ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 8000ca4:	e009      	b.n	8000cba <bmp180_set_oss+0x5e>
	}
	case ULTRA_HIGH_RESOLUTION:
	{
		p_bmp->oss.wait_time = BMP_OSS3_CONV_TIME;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	221a      	movs	r2, #26
 8000caa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 8000cae:	e004      	b.n	8000cba <bmp180_set_oss+0x5e>
	}
	default:
	{
		p_bmp->oss.wait_time = BMP_OSS1_CONV_TIME;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 8000cb8:	bf00      	nop
	}
	}

	p_bmp->oss.ratio = ratio;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	78fa      	ldrb	r2, [r7, #3]
 8000cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	BMP_SET_I2CRW_REG(in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	019b      	lsls	r3, r3, #6
 8000cc6:	70fb      	strb	r3, [r7, #3]
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	737b      	strb	r3, [r7, #13]
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_WRITE_ADDR, BMP_CTRL_REG, in_buff, 2);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	9200      	str	r2, [sp, #0]
 8000cd8:	22f4      	movs	r2, #244	; 0xf4
 8000cda:	21ee      	movs	r1, #238	; 0xee
 8000cdc:	f000 ff9a 	bl	8001c14 <I2C_Transmit>
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <bmp180_read_calib_data>:
 * @param[in] - struct of type bmp_calib_param_t
 * @return    - NO_ERR if read calibration data are valid otherwise
 * READ_CALIB_ERR.
 */
static bmp_err_t bmp180_read_calib_data(bmp180_t *p_bmp)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] =
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	821a      	strh	r2, [r3, #16]
	{ 0 };
	uint8_t i = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int16_t *calib_data = (int16_t*) &p_bmp->calib;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	623b      	str	r3, [r7, #32]

	// send slave address and memory address
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_CALIB_ADDR, 0, 0);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000d1e:	2300      	movs	r3, #0
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22aa      	movs	r2, #170	; 0xaa
 8000d26:	21ef      	movs	r1, #239	; 0xef
 8000d28:	f000 ff74 	bl	8001c14 <I2C_Transmit>
	// read data
	I2C_Receive(p_bmp->p_i2c_handle, BMP_READ_ADDR, out_buff,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000d30:	f107 0208 	add.w	r2, r7, #8
 8000d34:	2316      	movs	r3, #22
 8000d36:	21ef      	movs	r1, #239	; 0xef
 8000d38:	f001 f81f 	bl	8001d7a <I2C_Receive>
	BMP_CALIB_DATA_SIZE);

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j + 2)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000d42:	e03e      	b.n	8000dc2 <bmp180_read_calib_data+0xda>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8000d44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d4e:	4413      	add	r3, r2
 8000d50:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	b219      	sxth	r1, r3
 8000d58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d60:	4413      	add	r3, r2
 8000d62:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	6a38      	ldr	r0, [r7, #32]
 8000d70:	4403      	add	r3, r0
 8000d72:	430a      	orrs	r2, r1
 8000d74:	b212      	sxth	r2, r2
 8000d76:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8000d78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	6a3a      	ldr	r2, [r7, #32]
 8000d80:	4413      	add	r3, r2
 8000d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf0c      	ite	eq
 8000d8a:	2301      	moveq	r3, #1
 8000d8c:	2300      	movne	r3, #0
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	6a39      	ldr	r1, [r7, #32]
 8000d98:	440b      	add	r3, r1
 8000d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da2:	bf0c      	ite	eq
 8000da4:	2301      	moveq	r3, #1
 8000da6:	2300      	movne	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <bmp180_read_calib_data+0xd0>
		{
			ret_val = GET_CALIB_ERR;
 8000db2:	2302      	movs	r3, #2
 8000db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j + 2)
 8000db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc6:	2b0b      	cmp	r3, #11
 8000dc8:	d9bc      	bls.n	8000d44 <bmp180_read_calib_data+0x5c>
		}
	}

	return ret_val;
 8000dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <bmp180_init>:
 * @brief:    - Performe initial sequence of BMP sensor
 * @param[in] - pointer to struct of type bmp_calib_param_t
 * @return    - None.
 */
void bmp180_init(bmp180_t *p_bmp, I2c_Handle_t *p_i2c_handle)
{
 8000dd6:	b590      	push	{r4, r7, lr}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
	memset(p_bmp, 0x00, sizeof(&p_bmp));  // clear bmp strut;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fc70 	bl	80026cc <memset>
	p_bmp->p_i2c_handle = p_i2c_handle;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	63da      	str	r2, [r3, #60]	; 0x3c
	p_bmp->err = bmp180_read_chip_id(p_bmp); // check chip validity and I2C communication.
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	687c      	ldr	r4, [r7, #4]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff0d 	bl	8000c16 <bmp180_read_chip_id>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	p_bmp->err = bmp180_read_calib_data(p_bmp);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	687c      	ldr	r4, [r7, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff6e 	bl	8000ce8 <bmp180_read_calib_data>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp180_set_oss(p_bmp, ULTRA_HIGH_RESOLUTION);  // set oversampling settings
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2103      	movs	r1, #3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff20 	bl	8000c5c <bmp180_set_oss>
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}

08000e24 <bmp180_get_ut>:
 * bit)
 * @param[in] - None.
 * @return    - uncompensated temp.
 */
int32_t bmp180_get_ut(bmp180_t *p_bmp)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	6078      	str	r0, [r7, #4]
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG(out_buff[0], BMP_SET_TEMP_CONV);
 8000e2c:	232e      	movs	r3, #46	; 0x2e
 8000e2e:	733b      	strb	r3, [r7, #12]

	// write conversion time
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_WRITE_ADDR, BMP_CTRL_REG, out_buff,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2201      	movs	r2, #1
 8000e3a:	9200      	str	r2, [sp, #0]
 8000e3c:	22f4      	movs	r2, #244	; 0xf4
 8000e3e:	21ee      	movs	r1, #238	; 0xee
 8000e40:	f000 fee8 	bl	8001c14 <I2C_Transmit>
			1);
	SYSTICK_Delay(p_bmp->oss.wait_time);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fa48 	bl	80022e0 <SYSTICK_Delay>
	// send slave address and memory address
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 0, 0);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000e54:	2300      	movs	r3, #0
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	22f6      	movs	r2, #246	; 0xf6
 8000e5c:	21ef      	movs	r1, #239	; 0xef
 8000e5e:	f000 fed9 	bl	8001c14 <I2C_Transmit>
	I2C_Receive(p_bmp->p_i2c_handle, BMP_READ_ADDR, out_buff, 2);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000e66:	f107 020c 	add.w	r2, r7, #12
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	21ef      	movs	r1, #239	; 0xef
 8000e6e:	f000 ff84 	bl	8001d7a <I2C_Receive>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8000e72:	7b3b      	ldrb	r3, [r7, #12]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	7b7a      	ldrb	r2, [r7, #13]
 8000e78:	4313      	orrs	r3, r2
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <bmp180_get_temp>:
 * @brief:    - Calc true temperature.
 * @param[in] - pointer to struct of type bmp_t
 * @return    - true temp.
 */
float bmp180_get_temp(bmp180_t *p_bmp)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t) p_bmp->uncomp.temp - p_bmp->calib.AC6) * p_bmp->calib.AC5)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea4:	ee17 2a90 	vmov	r2, s15
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	895b      	ldrh	r3, [r3, #10]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	8912      	ldrh	r2, [r2, #8]
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	13db      	asrs	r3, r3, #15
 8000eb8:	617b      	str	r3, [r7, #20]
			>> 15;
	X2 = (p_bmp->calib.MC << 11) / (X1 + p_bmp->calib.MD);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000ec0:	02da      	lsls	r2, r3, #11
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	440b      	add	r3, r1
 8000ece:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ed2:	613b      	str	r3, [r7, #16]
	p_bmp->data.B5 = X1 + X2;
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	441a      	add	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((p_bmp->data.B5 + 8) >> 4) * 0.1f;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	111b      	asrs	r3, r3, #4
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eee:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000f3c <bmp180_get_temp+0xb8>
 8000ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef6:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8000efa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000efe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000f40 <bmp180_get_temp+0xbc>
 8000f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0a:	d908      	bls.n	8000f1e <bmp180_get_temp+0x9a>
 8000f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f10:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000f44 <bmp180_get_temp+0xc0>
 8000f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	db03      	blt.n	8000f26 <bmp180_get_temp+0xa2>
	{
		p_bmp->err = GET_TEMP_ERR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	ee07 3a90 	vmov	s15, r3
}
 8000f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	3dcccccd 	.word	0x3dcccccd
 8000f40:	c2200000 	.word	0xc2200000
 8000f44:	42aa0000 	.word	0x42aa0000

08000f48 <bmp180_get_up>:
 * bit)
 * @param[in] - struct of type oss_t
 * @return    - uncompensated pressure.
 */
int32_t bmp180_get_up(bmp180_t *p_bmp)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	6078      	str	r0, [r7, #4]
	uint8_t out_buff[3] =
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <bmp180_get_up+0x84>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	813b      	strh	r3, [r7, #8]
 8000f56:	2300      	movs	r3, #0
 8000f58:	72bb      	strb	r3, [r7, #10]
	{ 0 };
	long up = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG(out_buff[0], BMP_SET_PRESS_CONV);
 8000f5e:	2334      	movs	r3, #52	; 0x34
 8000f60:	723b      	strb	r3, [r7, #8]

	I2C_Transmit(p_bmp->p_i2c_handle, BMP_WRITE_ADDR, BMP_CTRL_REG, out_buff,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	9200      	str	r2, [sp, #0]
 8000f6e:	22f4      	movs	r2, #244	; 0xf4
 8000f70:	21ee      	movs	r1, #238	; 0xee
 8000f72:	f000 fe4f 	bl	8001c14 <I2C_Transmit>
			1);
	SYSTICK_Delay(p_bmp->oss.wait_time);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 f9af 	bl	80022e0 <SYSTICK_Delay>
	// send slave address and memory address
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 0, 0);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000f86:	2300      	movs	r3, #0
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	22f6      	movs	r2, #246	; 0xf6
 8000f8e:	21ef      	movs	r1, #239	; 0xef
 8000f90:	f000 fe40 	bl	8001c14 <I2C_Transmit>
	I2C_Receive(p_bmp->p_i2c_handle, BMP_READ_ADDR, out_buff, 3);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000f98:	f107 0208 	add.w	r2, r7, #8
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	21ef      	movs	r1, #239	; 0xef
 8000fa0:	f000 feeb 	bl	8001d7a <I2C_Receive>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT)
 8000fa4:	7a3b      	ldrb	r3, [r7, #8]
 8000fa6:	041a      	lsls	r2, r3, #16
 8000fa8:	7a7b      	ldrb	r3, [r7, #9]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	4413      	add	r3, r2
			+ out_buff[2]) >> (8 - p_bmp->oss.ratio);
 8000fae:	7aba      	ldrb	r2, [r7, #10]
 8000fb0:	441a      	add	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fb8:	f1c3 0308 	rsb	r3, r3, #8
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT)
 8000fbc:	fa42 f303 	asr.w	r3, r2, r3
 8000fc0:	60fb      	str	r3, [r7, #12]
	return up;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	080036f0 	.word	0x080036f0

08000fd0 <bmp180_get_pressure>:
 * @brief:    - Calc true pressure.
 * @param[in] - struct of type bmp180_t
 * @return    - true pressure in Pa.
 */
int32_t bmp180_get_pressure(bmp180_t *p_bmp)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b08b      	sub	sp, #44	; 0x2c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	int32_t X1, X2, X3, B3, B6, p = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t B4, B7 = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]

	B6 = p_bmp->data.B5 - 4000;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000fe8:	61fb      	str	r3, [r7, #28]
	X1 = (p_bmp->calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fb03 f303 	mul.w	r3, r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	da01      	bge.n	8001000 <bmp180_get_pressure+0x30>
 8000ffc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001000:	131b      	asrs	r3, r3, #12
 8001002:	fb03 f302 	mul.w	r3, r3, r2
 8001006:	2b00      	cmp	r3, #0
 8001008:	da01      	bge.n	800100e <bmp180_get_pressure+0x3e>
 800100a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800100e:	12db      	asrs	r3, r3, #11
 8001010:	61bb      	str	r3, [r7, #24]
	X2 = p_bmp->calib.AC2 * B6 / 0x800;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001018:	461a      	mov	r2, r3
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fb03 f302 	mul.w	r3, r3, r2
 8001020:	2b00      	cmp	r3, #0
 8001022:	da01      	bge.n	8001028 <bmp180_get_pressure+0x58>
 8001024:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001028:	12db      	asrs	r3, r3, #11
 800102a:	617b      	str	r3, [r7, #20]
	X3 = X1 + X2;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	4413      	add	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
	B3 = (((p_bmp->calib.AC1 * 4 + X3) << p_bmp->oss.ratio) + 2) / 4;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	009a      	lsls	r2, r3, #2
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4413      	add	r3, r2
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001046:	4093      	lsls	r3, r2
 8001048:	3302      	adds	r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	da00      	bge.n	8001050 <bmp180_get_pressure+0x80>
 800104e:	3303      	adds	r3, #3
 8001050:	109b      	asrs	r3, r3, #2
 8001052:	60fb      	str	r3, [r7, #12]
	X1 = p_bmp->calib.AC3 * B6 / 0x2000;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800105a:	461a      	mov	r2, r3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	fb03 f302 	mul.w	r3, r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	da02      	bge.n	800106c <bmp180_get_pressure+0x9c>
 8001066:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800106a:	331f      	adds	r3, #31
 800106c:	135b      	asrs	r3, r3, #13
 800106e:	61bb      	str	r3, [r7, #24]
	X2 = (p_bmp->calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001076:	461a      	mov	r2, r3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	fb03 f303 	mul.w	r3, r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	da01      	bge.n	8001086 <bmp180_get_pressure+0xb6>
 8001082:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001086:	131b      	asrs	r3, r3, #12
 8001088:	fb03 f302 	mul.w	r3, r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	da02      	bge.n	8001096 <bmp180_get_pressure+0xc6>
 8001090:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001094:	33ff      	adds	r3, #255	; 0xff
 8001096:	141b      	asrs	r3, r3, #16
 8001098:	617b      	str	r3, [r7, #20]
	X3 = ((X1 + X2) + 2) / 0x4;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	4413      	add	r3, r2
 80010a0:	3302      	adds	r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da00      	bge.n	80010a8 <bmp180_get_pressure+0xd8>
 80010a6:	3303      	adds	r3, #3
 80010a8:	109b      	asrs	r3, r3, #2
 80010aa:	613b      	str	r3, [r7, #16]
	B4 = p_bmp->calib.AC4 * (unsigned long) (X3 + 32768) / 0x8000;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	88db      	ldrh	r3, [r3, #6]
 80010b0:	461a      	mov	r2, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010b8:	fb03 f302 	mul.w	r3, r3, r2
 80010bc:	0bdb      	lsrs	r3, r3, #15
 80010be:	60bb      	str	r3, [r7, #8]
	B7 = ((unsigned long) p_bmp->uncomp.press - B3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	461a      	mov	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
			* (50000 >> p_bmp->oss.ratio);
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80010d0:	4611      	mov	r1, r2
 80010d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80010d6:	410a      	asrs	r2, r1
	B7 = ((unsigned long) p_bmp->uncomp.press - B3)
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	623b      	str	r3, [r7, #32]

	if (B7 < 0x80000000)
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db06      	blt.n	80010f2 <bmp180_get_pressure+0x122>
	{
		p = (B7 * 2) / B4;
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	005a      	lsls	r2, r3, #1
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
 80010f0:	e005      	b.n	80010fe <bmp180_get_pressure+0x12e>
	}
	else
	{
		p = (B7 / B4) * 2;
 80010f2:	6a3a      	ldr	r2, [r7, #32]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
	}

	X1 = (p / 0x100 * (p / 0x100));
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	2b00      	cmp	r3, #0
 8001102:	da00      	bge.n	8001106 <bmp180_get_pressure+0x136>
 8001104:	33ff      	adds	r3, #255	; 0xff
 8001106:	121b      	asrs	r3, r3, #8
 8001108:	461a      	mov	r2, r3
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	2b00      	cmp	r3, #0
 800110e:	da00      	bge.n	8001112 <bmp180_get_pressure+0x142>
 8001110:	33ff      	adds	r3, #255	; 0xff
 8001112:	121b      	asrs	r3, r3, #8
 8001114:	fb03 f302 	mul.w	r3, r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
	X1 = (X1 * 3038) / 0x10000;
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	f640 32de 	movw	r2, #3038	; 0xbde
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	da02      	bge.n	800112e <bmp180_get_pressure+0x15e>
 8001128:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800112c:	33ff      	adds	r3, #255	; 0xff
 800112e:	141b      	asrs	r3, r3, #16
 8001130:	61bb      	str	r3, [r7, #24]
	X2 = (-7357 * p) / 0x10000;
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <bmp180_get_pressure+0x1a0>)
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	da02      	bge.n	8001144 <bmp180_get_pressure+0x174>
 800113e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001142:	33ff      	adds	r3, #255	; 0xff
 8001144:	141b      	asrs	r3, r3, #16
 8001146:	617b      	str	r3, [r7, #20]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	4413      	add	r3, r2
 800114e:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001152:	2b00      	cmp	r3, #0
 8001154:	da00      	bge.n	8001158 <bmp180_get_pressure+0x188>
 8001156:	330f      	adds	r3, #15
 8001158:	111b      	asrs	r3, r3, #4
 800115a:	461a      	mov	r2, r3
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	4413      	add	r3, r2
 8001160:	627b      	str	r3, [r7, #36]	; 0x24

	return p;
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001164:	4618      	mov	r0, r3
 8001166:	372c      	adds	r7, #44	; 0x2c
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	ffffe343 	.word	0xffffe343
 8001174:	00000000 	.word	0x00000000

08001178 <bmp180_get_altitude>:
 * @brief:    - Calc true altitude.
 * @param[in] - struct of type bmp180_t
 * @return    - true pressure.
 */
float bmp180_get_altitude(bmp180_t *p_bmp)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT
			* (1.0f
					- pow((p_bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL),
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001192:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001230 <bmp180_get_altitude+0xb8>
 8001196:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800119a:	ee16 0a90 	vmov	r0, s13
 800119e:	f7ff f97f 	bl	80004a0 <__aeabi_f2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001220 <bmp180_get_altitude+0xa8>
 80011aa:	ec43 2b10 	vmov	d0, r2, r3
 80011ae:	f001 fadb 	bl	8002768 <pow>
 80011b2:	ec53 2b10 	vmov	r2, r3, d0
 80011b6:	f04f 0000 	mov.w	r0, #0
 80011ba:	491e      	ldr	r1, [pc, #120]	; (8001234 <bmp180_get_altitude+0xbc>)
 80011bc:	f7ff f810 	bl	80001e0 <__aeabi_dsub>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
			* (1.0f
 80011c8:	a317      	add	r3, pc, #92	; (adr r3, 8001228 <bmp180_get_altitude+0xb0>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff f9bf 	bl	8000550 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
	altitude = BMP_PRESS_CONST_COEFICIENT
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fc89 	bl	8000af0 <__aeabi_d2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	60fb      	str	r3, [r7, #12]
							(1 / 5.255)));

	if ((altitude <= BMP_MIN_ALT_THRESHOLD)
 80011e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001238 <bmp180_get_altitude+0xc0>
 80011ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d908      	bls.n	8001206 <bmp180_get_altitude+0x8e>
			|| (altitude >= BMP_MAX_ALT_THRESHOLD))
 80011f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011f8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800123c <bmp180_get_altitude+0xc4>
 80011fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001204:	db03      	blt.n	800120e <bmp180_get_altitude+0x96>
	{
		p_bmp->err = GET_ALTITUDE_ERR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2205      	movs	r2, #5
 800120a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	ee07 3a90 	vmov	s15, r3
}
 8001214:	eeb0 0a67 	vmov.f32	s0, s15
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	ccd9456c 	.word	0xccd9456c
 8001224:	3fc85b95 	.word	0x3fc85b95
 8001228:	00000000 	.word	0x00000000
 800122c:	40e5a540 	.word	0x40e5a540
 8001230:	47c5e680 	.word	0x47c5e680
 8001234:	3ff00000 	.word	0x3ff00000
 8001238:	c3fa0000 	.word	0xc3fa0000
 800123c:	460ca000 	.word	0x460ca000

08001240 <i2c_bmp180_example>:
USART_Handle_t p_usart2;
I2c_Handle_t p_i2c1;
bmp180_t p_bmp180;

void i2c_bmp180_example(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

	// config peripherals
	I2C1Config(&p_i2c1);
 8001246:	482c      	ldr	r0, [pc, #176]	; (80012f8 <i2c_bmp180_example+0xb8>)
 8001248:	f000 f8a4 	bl	8001394 <I2C1Config>
	GPIOConfig();
 800124c:	f000 f85c 	bl	8001308 <GPIOConfig>
	USART2Config(&p_usart2);
 8001250:	482a      	ldr	r0, [pc, #168]	; (80012fc <i2c_bmp180_example+0xbc>)
 8001252:	f000 f86f 	bl	8001334 <USART2Config>
	SYSTICK_ConfigureMilisecond();
 8001256:	f001 f821 	bl	800229c <SYSTICK_ConfigureMilisecond>


	bmp180_init(&p_bmp180, &p_i2c1);
 800125a:	4927      	ldr	r1, [pc, #156]	; (80012f8 <i2c_bmp180_example+0xb8>)
 800125c:	4828      	ldr	r0, [pc, #160]	; (8001300 <i2c_bmp180_example+0xc0>)
 800125e:	f7ff fdba 	bl	8000dd6 <bmp180_init>
	p_bmp180.uncomp.temp = bmp180_get_ut(&p_bmp180);
 8001262:	4827      	ldr	r0, [pc, #156]	; (8001300 <i2c_bmp180_example+0xc0>)
 8001264:	f7ff fdde 	bl	8000e24 <bmp180_get_ut>
 8001268:	ee07 0a90 	vmov	s15, r0
 800126c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <i2c_bmp180_example+0xc0>)
 8001272:	edc3 7a06 	vstr	s15, [r3, #24]
	p_bmp180.data.temp = bmp180_get_temp(&p_bmp180);
 8001276:	4822      	ldr	r0, [pc, #136]	; (8001300 <i2c_bmp180_example+0xc0>)
 8001278:	f7ff fe04 	bl	8000e84 <bmp180_get_temp>
 800127c:	eef0 7a40 	vmov.f32	s15, s0
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <i2c_bmp180_example+0xc0>)
 8001282:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	uint32_t tick = SYSTICK_GetTick();
 8001286:	f001 f81f 	bl	80022c8 <SYSTICK_GetTick>
 800128a:	6078      	str	r0, [r7, #4]

	while (1)
	{
		if(SYSTICK_GetTick() - tick  > 100)
 800128c:	f001 f81c 	bl	80022c8 <SYSTICK_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d9f8      	bls.n	800128c <i2c_bmp180_example+0x4c>
		{
			GPIO_TogglePin(GPIOA, kGpioPin5);
 800129a:	2105      	movs	r1, #5
 800129c:	4819      	ldr	r0, [pc, #100]	; (8001304 <i2c_bmp180_example+0xc4>)
 800129e:	f000 fa1d 	bl	80016dc <GPIO_TogglePin>
				p_bmp180.uncomp.temp = bmp180_get_ut(&p_bmp180);
 80012a2:	4817      	ldr	r0, [pc, #92]	; (8001300 <i2c_bmp180_example+0xc0>)
 80012a4:	f7ff fdbe 	bl	8000e24 <bmp180_get_ut>
 80012a8:	ee07 0a90 	vmov	s15, r0
 80012ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <i2c_bmp180_example+0xc0>)
 80012b2:	edc3 7a06 	vstr	s15, [r3, #24]
				p_bmp180.data.temp = bmp180_get_temp(&p_bmp180);
 80012b6:	4812      	ldr	r0, [pc, #72]	; (8001300 <i2c_bmp180_example+0xc0>)
 80012b8:	f7ff fde4 	bl	8000e84 <bmp180_get_temp>
 80012bc:	eef0 7a40 	vmov.f32	s15, s0
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <i2c_bmp180_example+0xc0>)
 80012c2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				p_bmp180.uncomp.press = bmp180_get_up(&p_bmp180);
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <i2c_bmp180_example+0xc0>)
 80012c8:	f7ff fe3e 	bl	8000f48 <bmp180_get_up>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <i2c_bmp180_example+0xc0>)
 80012d0:	61d3      	str	r3, [r2, #28]
				p_bmp180.data.press = bmp180_get_pressure(&p_bmp180);
 80012d2:	480b      	ldr	r0, [pc, #44]	; (8001300 <i2c_bmp180_example+0xc0>)
 80012d4:	f7ff fe7c 	bl	8000fd0 <bmp180_get_pressure>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <i2c_bmp180_example+0xc0>)
 80012dc:	62d3      	str	r3, [r2, #44]	; 0x2c
				p_bmp180.data.altitude = bmp180_get_altitude(&p_bmp180);
 80012de:	4808      	ldr	r0, [pc, #32]	; (8001300 <i2c_bmp180_example+0xc0>)
 80012e0:	f7ff ff4a 	bl	8001178 <bmp180_get_altitude>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <i2c_bmp180_example+0xc0>)
 80012ea:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
				tick = SYSTICK_GetTick();
 80012ee:	f000 ffeb 	bl	80022c8 <SYSTICK_GetTick>
 80012f2:	6078      	str	r0, [r7, #4]
		if(SYSTICK_GetTick() - tick  > 100)
 80012f4:	e7ca      	b.n	800128c <i2c_bmp180_example+0x4c>
 80012f6:	bf00      	nop
 80012f8:	200000d8 	.word	0x200000d8
 80012fc:	20000088 	.word	0x20000088
 8001300:	20000098 	.word	0x20000098
 8001304:	40020000 	.word	0x40020000

08001308 <GPIOConfig>:

/*
 * configure LED on the board
 */
void GPIOConfig(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	// PA5 Led
	GPIO_InitClock(GPIOA);
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <GPIOConfig+0x28>)
 800130e:	f000 f85d 	bl	80013cc <GPIO_InitClock>
	GPIO_ConfigBasic(GPIOA, GPIO_FLAG_PIN_5, kGpioModeOutput, kGpioPUPDNoPull);
 8001312:	2300      	movs	r3, #0
 8001314:	2201      	movs	r2, #1
 8001316:	2120      	movs	r1, #32
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <GPIOConfig+0x28>)
 800131a:	f000 f8fb 	bl	8001514 <GPIO_ConfigBasic>
	GPIO_ConfigOutput(GPIOA, GPIO_FLAG_PIN_5, kGpioOTPushPull, kGpioSpeedHigh);
 800131e:	2302      	movs	r3, #2
 8001320:	2200      	movs	r2, #0
 8001322:	2120      	movs	r1, #32
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <GPIOConfig+0x28>)
 8001326:	f000 f943 	bl	80015b0 <GPIO_ConfigOutput>
	return;
 800132a:	bf00      	nop
}
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40020000 	.word	0x40020000

08001334 <USART2Config>:
 * - set basic parameters
 * - set baud rate
 * - enable usart irqs
 */
void USART2Config(USART_Handle_t *p_usart2)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	p_usart2->p_usartx = USART2;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <USART2Config+0x54>)
 8001340:	601a      	str	r2, [r3, #0]
	p_usart2->usart_dma.p_dma_stream_tx = DMA1_Stream6;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a11      	ldr	r2, [pc, #68]	; (800138c <USART2Config+0x58>)
 8001346:	605a      	str	r2, [r3, #4]
	p_usart2->usart_dma.p_dma_stream_rx = DMA1_Stream5;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <USART2Config+0x5c>)
 800134c:	609a      	str	r2, [r3, #8]
	USART_InitClock(p_usart2);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f001 f806 	bl	8002360 <USART_InitClock>
	USART_InitGpioPins(p_usart2);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f001 f85d 	bl	8002414 <USART_InitGpioPins>
	USART_SetBasicParameters(p_usart2, kUsartWordLenght8, kUsartStopBits0,
 800135a:	2302      	movs	r3, #2
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f001 f93d 	bl	80025e0 <USART_SetBasicParameters>
			kUsartNoParity);
	USART_SetBaudRate(p_usart2, 115200, kUsartOversampling16);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f001 f875 	bl	800245c <USART_SetBaudRate>
	USART_EnableIRQs(p_usart2, USART_CR1_IDLEIE, 0, USART_CR3_EIE);
 8001372:	2301      	movs	r3, #1
 8001374:	2200      	movs	r2, #0
 8001376:	2110      	movs	r1, #16
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f001 f901 	bl	8002580 <USART_EnableIRQs>
	return;
 800137e:	bf00      	nop
}
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40004400 	.word	0x40004400
 800138c:	400260a0 	.word	0x400260a0
 8001390:	40026088 	.word	0x40026088

08001394 <I2C1Config>:

void I2C1Config(I2c_Handle_t *p_i2c1)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	p_i2c1->p_i2cx = I2C1;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <I2C1Config+0x30>)
 80013a0:	601a      	str	r2, [r3, #0]
	I2C_InitClock(p_i2c1);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fb1e 	bl	80019e4 <I2C_InitClock>
	GPIO_InitClock(GPIOB);
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <I2C1Config+0x34>)
 80013aa:	f000 f80f 	bl	80013cc <GPIO_InitClock>
	I2C_InitGpioPins(p_i2c1);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fb72 	bl	8001a98 <I2C_InitGpioPins>
	I2C_SetBasicParameters(p_i2c1, kI2cSpeedFastDuty0);
 80013b4:	2101      	movs	r1, #1
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fbd2 	bl	8001b60 <I2C_SetBasicParameters>
	return;
 80013bc:	bf00      	nop
}
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40005400 	.word	0x40005400
 80013c8:	40020400 	.word	0x40020400

080013cc <GPIO_InitClock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void GPIO_InitClock(GPIO_TypeDef *GPIO)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a48      	ldr	r2, [pc, #288]	; (80014f8 <GPIO_InitClock+0x12c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d112      	bne.n	8001402 <GPIO_InitClock+0x36>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <GPIO_InitClock+0x130>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	4a46      	ldr	r2, [pc, #280]	; (80014fc <GPIO_InitClock+0x130>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOA();
 80013e8:	4b44      	ldr	r3, [pc, #272]	; (80014fc <GPIO_InitClock+0x130>)
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	4a43      	ldr	r2, [pc, #268]	; (80014fc <GPIO_InitClock+0x130>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6113      	str	r3, [r2, #16]
 80013f4:	4b41      	ldr	r3, [pc, #260]	; (80014fc <GPIO_InitClock+0x130>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	4a40      	ldr	r2, [pc, #256]	; (80014fc <GPIO_InitClock+0x130>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6113      	str	r3, [r2, #16]
 8001400:	e071      	b.n	80014e6 <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOB)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a3e      	ldr	r2, [pc, #248]	; (8001500 <GPIO_InitClock+0x134>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d112      	bne.n	8001430 <GPIO_InitClock+0x64>
	{
		RCC_CLOCK_GPIOB_ENABLE();
 800140a:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <GPIO_InitClock+0x130>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a3b      	ldr	r2, [pc, #236]	; (80014fc <GPIO_InitClock+0x130>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOB();
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <GPIO_InitClock+0x130>)
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	4a38      	ldr	r2, [pc, #224]	; (80014fc <GPIO_InitClock+0x130>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6113      	str	r3, [r2, #16]
 8001422:	4b36      	ldr	r3, [pc, #216]	; (80014fc <GPIO_InitClock+0x130>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	4a35      	ldr	r2, [pc, #212]	; (80014fc <GPIO_InitClock+0x130>)
 8001428:	f023 0302 	bic.w	r3, r3, #2
 800142c:	6113      	str	r3, [r2, #16]
 800142e:	e05a      	b.n	80014e6 <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOC)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a34      	ldr	r2, [pc, #208]	; (8001504 <GPIO_InitClock+0x138>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d112      	bne.n	800145e <GPIO_InitClock+0x92>
	{
		RCC_CLOCK_GPIOC_ENABLE();
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <GPIO_InitClock+0x130>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <GPIO_InitClock+0x130>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOC();
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <GPIO_InitClock+0x130>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <GPIO_InitClock+0x130>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6113      	str	r3, [r2, #16]
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <GPIO_InitClock+0x130>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	4a29      	ldr	r2, [pc, #164]	; (80014fc <GPIO_InitClock+0x130>)
 8001456:	f023 0304 	bic.w	r3, r3, #4
 800145a:	6113      	str	r3, [r2, #16]
 800145c:	e043      	b.n	80014e6 <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOD)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a29      	ldr	r2, [pc, #164]	; (8001508 <GPIO_InitClock+0x13c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d112      	bne.n	800148c <GPIO_InitClock+0xc0>
	{
		RCC_CLOCK_GPIOD_ENABLE();
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <GPIO_InitClock+0x130>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a24      	ldr	r2, [pc, #144]	; (80014fc <GPIO_InitClock+0x130>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOD();
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <GPIO_InitClock+0x130>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <GPIO_InitClock+0x130>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6113      	str	r3, [r2, #16]
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <GPIO_InitClock+0x130>)
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <GPIO_InitClock+0x130>)
 8001484:	f023 0308 	bic.w	r3, r3, #8
 8001488:	6113      	str	r3, [r2, #16]
 800148a:	e02c      	b.n	80014e6 <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <GPIO_InitClock+0x140>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d112      	bne.n	80014ba <GPIO_InitClock+0xee>
	{
		RCC_CLOCK_GPIOE_ENABLE();
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <GPIO_InitClock+0x130>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	4a18      	ldr	r2, [pc, #96]	; (80014fc <GPIO_InitClock+0x130>)
 800149a:	f043 0310 	orr.w	r3, r3, #16
 800149e:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOE();
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <GPIO_InitClock+0x130>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	4a15      	ldr	r2, [pc, #84]	; (80014fc <GPIO_InitClock+0x130>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	6113      	str	r3, [r2, #16]
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <GPIO_InitClock+0x130>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <GPIO_InitClock+0x130>)
 80014b2:	f023 0310 	bic.w	r3, r3, #16
 80014b6:	6113      	str	r3, [r2, #16]
 80014b8:	e015      	b.n	80014e6 <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOH)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <GPIO_InitClock+0x144>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d111      	bne.n	80014e6 <GPIO_InitClock+0x11a>
	{
		RCC_CLOCK_GPIOH_ENABLE();
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <GPIO_InitClock+0x130>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <GPIO_InitClock+0x130>)
 80014c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOH();
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <GPIO_InitClock+0x130>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <GPIO_InitClock+0x130>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d8:	6113      	str	r3, [r2, #16]
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <GPIO_InitClock+0x130>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	4a07      	ldr	r2, [pc, #28]	; (80014fc <GPIO_InitClock+0x130>)
 80014e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014e4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014e6:	f3bf 8f4f 	dsb	sy
}
 80014ea:	bf00      	nop
	// this operation is unnecessary here because configuration library is taking
	// more than 2 clock cycles between clock enable and configuring register, i
	// leave it here to remind myself that stmf401x has a limitation that is
	// described in errata point 2.1.6
	__DSB();
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40021c00 	.word	0x40021c00

08001514 <GPIO_ConfigBasic>:
 * @param[PUPD] - nopull/pullup/pulldown
 * @return - void
 */
void GPIO_ConfigBasic(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags,
		GpioMode_t mode, GpioPUPD_t PUPD)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	4608      	mov	r0, r1
 800151e:	4611      	mov	r1, r2
 8001520:	461a      	mov	r2, r3
 8001522:	4603      	mov	r3, r0
 8001524:	807b      	strh	r3, [r7, #2]
 8001526:	460b      	mov	r3, r1
 8001528:	707b      	strb	r3, [r7, #1]
 800152a:	4613      	mov	r3, r2
 800152c:	703b      	strb	r3, [r7, #0]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 800152e:	2300      	movs	r3, #0
 8001530:	81fb      	strh	r3, [r7, #14]
 8001532:	e034      	b.n	800159e <GPIO_ConfigBasic+0x8a>
	{
		if (pin_flags >> pin_count & 1U)
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	fa42 f303 	asr.w	r3, r2, r3
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d029      	beq.n	8001598 <GPIO_ConfigBasic+0x84>
		{
			// mode
			p_GPIOx->MODER &= ~(0x03U << (pin_count * 2));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2103      	movs	r1, #3
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	401a      	ands	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]
			p_GPIOx->MODER |= mode << (pin_count * 2);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	7879      	ldrb	r1, [r7, #1]
 8001560:	89fa      	ldrh	r2, [r7, #14]
 8001562:	0052      	lsls	r2, r2, #1
 8001564:	fa01 f202 	lsl.w	r2, r1, r2
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	601a      	str	r2, [r3, #0]

			// PUPD
			p_GPIOx->PUPDR &= ~(0x03U << (pin_count * 2));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2103      	movs	r1, #3
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	401a      	ands	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60da      	str	r2, [r3, #12]
			p_GPIOx->PUPDR |= (PUPD << (pin_count * 2));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	7839      	ldrb	r1, [r7, #0]
 800158a:	89fa      	ldrh	r2, [r7, #14]
 800158c:	0052      	lsls	r2, r2, #1
 800158e:	fa01 f202 	lsl.w	r2, r1, r2
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	3301      	adds	r3, #1
 800159c:	81fb      	strh	r3, [r7, #14]
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d9c7      	bls.n	8001534 <GPIO_ConfigBasic+0x20>
		}
	}

	return;
 80015a4:	bf00      	nop
}
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <GPIO_ConfigOutput>:
 * @param[speed] - slow/medium/fast/veryfast
 * @return - void
 */
void GPIO_ConfigOutput(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags,
		GpioOutputType_t output_type, GpioSpeed_t speed)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	4608      	mov	r0, r1
 80015ba:	4611      	mov	r1, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	4603      	mov	r3, r0
 80015c0:	807b      	strh	r3, [r7, #2]
 80015c2:	460b      	mov	r3, r1
 80015c4:	707b      	strb	r3, [r7, #1]
 80015c6:	4613      	mov	r3, r2
 80015c8:	703b      	strb	r3, [r7, #0]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	81fb      	strh	r3, [r7, #14]
 80015ce:	e032      	b.n	8001636 <GPIO_ConfigOutput+0x86>
	{
		if (pin_flags >> pin_count & 1U)
 80015d0:	887a      	ldrh	r2, [r7, #2]
 80015d2:	89fb      	ldrh	r3, [r7, #14]
 80015d4:	fa42 f303 	asr.w	r3, r2, r3
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d027      	beq.n	8001630 <GPIO_ConfigOutput+0x80>
		{
			// speed selection
			p_GPIOx->OSPEEDR &= ~(0x03U << (pin_count * 2));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2103      	movs	r1, #3
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	401a      	ands	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
			p_GPIOx->OSPEEDR |= (speed << (pin_count * 2));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	7839      	ldrb	r1, [r7, #0]
 80015fc:	89fa      	ldrh	r2, [r7, #14]
 80015fe:	0052      	lsls	r2, r2, #1
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]

			// output type selection
			p_GPIOx->OTYPER &= ~(0x01U << pin_count);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	89fb      	ldrh	r3, [r7, #14]
 8001610:	2101      	movs	r1, #1
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	605a      	str	r2, [r3, #4]
			p_GPIOx->OTYPER |= (output_type << pin_count);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	7879      	ldrb	r1, [r7, #1]
 8001624:	89fa      	ldrh	r2, [r7, #14]
 8001626:	fa01 f202 	lsl.w	r2, r1, r2
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	605a      	str	r2, [r3, #4]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	3301      	adds	r3, #1
 8001634:	81fb      	strh	r3, [r7, #14]
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d9c9      	bls.n	80015d0 <GPIO_ConfigOutput+0x20>
		}
	}
	return;
 800163c:	bf00      	nop
}
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <GPIO_ConfigAF>:
 * @param[pin_flags] - (GPIO_FLAG_PINx | GPIO_FLAG_PINy)
 * @param[af] - alternate function number
 * @return - void
 */
void GPIO_ConfigAF(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags, GpioAF_t af)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
 8001654:	4613      	mov	r3, r2
 8001656:	707b      	strb	r3, [r7, #1]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 8001658:	2300      	movs	r3, #0
 800165a:	81fb      	strh	r3, [r7, #14]
 800165c:	e035      	b.n	80016ca <GPIO_ConfigAF+0x82>
	{
		if (pin_flags >> pin_count & 1U)
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	89fb      	ldrh	r3, [r7, #14]
 8001662:	fa42 f303 	asr.w	r3, r2, r3
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d02a      	beq.n	80016c4 <GPIO_ConfigAF+0x7c>
		{
			// clear 4 AF bits and set new value
			p_GPIOx->AFR[pin_count / 8] &= ~(15UL << ((pin_count) * 4));
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	08db      	lsrs	r3, r3, #3
 8001672:	b298      	uxth	r0, r3
 8001674:	4602      	mov	r2, r0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3208      	adds	r2, #8
 800167a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	210f      	movs	r1, #15
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	ea02 0103 	and.w	r1, r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f100 0208 	add.w	r2, r0, #8
 8001694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			p_GPIOx->AFR[pin_count / 8] |= (af << ((pin_count % 8) * 4));
 8001698:	89fb      	ldrh	r3, [r7, #14]
 800169a:	08db      	lsrs	r3, r3, #3
 800169c:	b298      	uxth	r0, r3
 800169e:	4602      	mov	r2, r0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a8:	7879      	ldrb	r1, [r7, #1]
 80016aa:	89fa      	ldrh	r2, [r7, #14]
 80016ac:	f002 0207 	and.w	r2, r2, #7
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	fa01 f202 	lsl.w	r2, r1, r2
 80016b6:	4611      	mov	r1, r2
 80016b8:	4602      	mov	r2, r0
 80016ba:	4319      	orrs	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 80016c4:	89fb      	ldrh	r3, [r7, #14]
 80016c6:	3301      	adds	r3, #1
 80016c8:	81fb      	strh	r3, [r7, #14]
 80016ca:	89fb      	ldrh	r3, [r7, #14]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d9c6      	bls.n	800165e <GPIO_ConfigAF+0x16>
		}
	}
	return;
 80016d0:	bf00      	nop
}
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <GPIO_TogglePin>:
 * @param[*p_GPIOx] - base address of gpiox peripheral
 * @param[pin] - pin number
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *p_GPIOx, GpioPinNumber_t pin)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
	p_GPIOx->ODR ^= 0x01U << pin;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	2101      	movs	r1, #1
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	405a      	eors	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	615a      	str	r2, [r3, #20]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <I2C_WaitForFlagUntilTimeout>:
 * @param[timeout[ - timeout in miliseconds until re
 * @return - void
 */
static uint8_t I2C_WaitForFlagUntilTimeout(volatile uint32_t *status_reg,
		uint32_t flag, uint32_t timeout)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
	uint32_t start_time = SYSTICK_GetTick();
 8001712:	f000 fdd9 	bl	80022c8 <SYSTICK_GetTick>
 8001716:	6178      	str	r0, [r7, #20]
	// check flag until timeout
	while (!(flag & *(status_reg)))
 8001718:	e009      	b.n	800172e <I2C_WaitForFlagUntilTimeout+0x28>
	{
		{
			if (SYSTICK_GetTick() - start_time > timeout)
 800171a:	f000 fdd5 	bl	80022c8 <SYSTICK_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	d201      	bcs.n	800172e <I2C_WaitForFlagUntilTimeout+0x28>
			{
				// return error status
				return 1;
 800172a:	2301      	movs	r3, #1
 800172c:	e006      	b.n	800173c <I2C_WaitForFlagUntilTimeout+0x36>
	while (!(flag & *(status_reg)))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0ef      	beq.n	800171a <I2C_WaitForFlagUntilTimeout+0x14>
			}
		}
	}
	// return no error
	return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <I2C_CheckIfBusIsHanging>:
 * solution is to toggle scl line few times for slave to release the line
 * @param[*p_i2cx] - base address of i2c peripheral
 * @return - void
 */
static void I2C_CheckIfBusIsHanging(I2c_Handle_t *p_handle_i2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if (p_handle_i2c->p_i2cx == I2C1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a31      	ldr	r2, [pc, #196]	; (8001818 <I2C_CheckIfBusIsHanging+0xd4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d119      	bne.n	800178a <I2C_CheckIfBusIsHanging+0x46>
	{
		GPIO_ConfigBasic(GPIOB, I2C1_SCL_PIN_FLAG, kGpioModeOutput,
 8001756:	2300      	movs	r3, #0
 8001758:	2201      	movs	r2, #1
 800175a:	2140      	movs	r1, #64	; 0x40
 800175c:	482f      	ldr	r0, [pc, #188]	; (800181c <I2C_CheckIfBusIsHanging+0xd8>)
 800175e:	f7ff fed9 	bl	8001514 <GPIO_ConfigBasic>
				kGpioPUPDNoPull);
		GPIO_ConfigOutput(GPIOB, I2C1_SCL_PIN_FLAG, kGpioOTPushPull,
 8001762:	2303      	movs	r3, #3
 8001764:	2200      	movs	r2, #0
 8001766:	2140      	movs	r1, #64	; 0x40
 8001768:	482c      	ldr	r0, [pc, #176]	; (800181c <I2C_CheckIfBusIsHanging+0xd8>)
 800176a:	f7ff ff21 	bl	80015b0 <GPIO_ConfigOutput>
				kGpioSpeedVeryHigh);
		for (uint8_t i = 0; i < 10; i++)
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e006      	b.n	8001782 <I2C_CheckIfBusIsHanging+0x3e>
		{
			GPIO_TogglePin(I2C1_SCL_PORT, I2C1_SCL_PIN);
 8001774:	2106      	movs	r1, #6
 8001776:	4829      	ldr	r0, [pc, #164]	; (800181c <I2C_CheckIfBusIsHanging+0xd8>)
 8001778:	f7ff ffb0 	bl	80016dc <GPIO_TogglePin>
		for (uint8_t i = 0; i < 10; i++)
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	3301      	adds	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d9f5      	bls.n	8001774 <I2C_CheckIfBusIsHanging+0x30>
		{
			GPIO_TogglePin(I2C3_SCL_PORT, I2C3_SCL_PIN);
		}
	}

	return;
 8001788:	e041      	b.n	800180e <I2C_CheckIfBusIsHanging+0xca>
	else if (p_handle_i2c->p_i2cx == I2C2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a24      	ldr	r2, [pc, #144]	; (8001820 <I2C_CheckIfBusIsHanging+0xdc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d11b      	bne.n	80017cc <I2C_CheckIfBusIsHanging+0x88>
		GPIO_ConfigBasic(GPIOB, I2C2_SCL_PIN_FLAG, kGpioModeOutput,
 8001794:	2300      	movs	r3, #0
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179c:	481f      	ldr	r0, [pc, #124]	; (800181c <I2C_CheckIfBusIsHanging+0xd8>)
 800179e:	f7ff feb9 	bl	8001514 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOB, I2C2_SCL_PIN_FLAG, kGpioOTPushPull,
 80017a2:	2303      	movs	r3, #3
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017aa:	481c      	ldr	r0, [pc, #112]	; (800181c <I2C_CheckIfBusIsHanging+0xd8>)
 80017ac:	f7ff ff00 	bl	80015b0 <GPIO_ConfigOutput>
		for (uint8_t i = 0; i < 10; i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	73bb      	strb	r3, [r7, #14]
 80017b4:	e006      	b.n	80017c4 <I2C_CheckIfBusIsHanging+0x80>
			GPIO_TogglePin(I2C2_SCL_PORT, I2C2_SCL_PIN);
 80017b6:	210a      	movs	r1, #10
 80017b8:	4818      	ldr	r0, [pc, #96]	; (800181c <I2C_CheckIfBusIsHanging+0xd8>)
 80017ba:	f7ff ff8f 	bl	80016dc <GPIO_TogglePin>
		for (uint8_t i = 0; i < 10; i++)
 80017be:	7bbb      	ldrb	r3, [r7, #14]
 80017c0:	3301      	adds	r3, #1
 80017c2:	73bb      	strb	r3, [r7, #14]
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	2b09      	cmp	r3, #9
 80017c8:	d9f5      	bls.n	80017b6 <I2C_CheckIfBusIsHanging+0x72>
	return;
 80017ca:	e020      	b.n	800180e <I2C_CheckIfBusIsHanging+0xca>
	else if (p_handle_i2c->p_i2cx == I2C3)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <I2C_CheckIfBusIsHanging+0xe0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d11b      	bne.n	800180e <I2C_CheckIfBusIsHanging+0xca>
		GPIO_ConfigBasic(GPIOB, I2C2_SCL_PIN_FLAG, kGpioModeOutput,
 80017d6:	2300      	movs	r3, #0
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017de:	480f      	ldr	r0, [pc, #60]	; (800181c <I2C_CheckIfBusIsHanging+0xd8>)
 80017e0:	f7ff fe98 	bl	8001514 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOB, I2C2_SCL_PIN_FLAG, kGpioOTPushPull,
 80017e4:	2303      	movs	r3, #3
 80017e6:	2200      	movs	r2, #0
 80017e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <I2C_CheckIfBusIsHanging+0xd8>)
 80017ee:	f7ff fedf 	bl	80015b0 <GPIO_ConfigOutput>
		for (uint8_t i = 0; i < 10; i++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	737b      	strb	r3, [r7, #13]
 80017f6:	e006      	b.n	8001806 <I2C_CheckIfBusIsHanging+0xc2>
			GPIO_TogglePin(I2C3_SCL_PORT, I2C3_SCL_PIN);
 80017f8:	2108      	movs	r1, #8
 80017fa:	480b      	ldr	r0, [pc, #44]	; (8001828 <I2C_CheckIfBusIsHanging+0xe4>)
 80017fc:	f7ff ff6e 	bl	80016dc <GPIO_TogglePin>
		for (uint8_t i = 0; i < 10; i++)
 8001800:	7b7b      	ldrb	r3, [r7, #13]
 8001802:	3301      	adds	r3, #1
 8001804:	737b      	strb	r3, [r7, #13]
 8001806:	7b7b      	ldrb	r3, [r7, #13]
 8001808:	2b09      	cmp	r3, #9
 800180a:	d9f5      	bls.n	80017f8 <I2C_CheckIfBusIsHanging+0xb4>
	return;
 800180c:	bf00      	nop
 800180e:	bf00      	nop
}
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40005400 	.word	0x40005400
 800181c:	40020400 	.word	0x40020400
 8001820:	40005800 	.word	0x40005800
 8001824:	40005c00 	.word	0x40005c00
 8001828:	40020000 	.word	0x40020000

0800182c <I2C_SendAddress>:
 * @Mode
 * @return - void
 */
static void I2C_SendAddress(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t mode)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
 8001838:	4613      	mov	r3, r2
 800183a:	70bb      	strb	r3, [r7, #2]
	uint8_t temp_byte;
	// 1.0 Set START BIT
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_START;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800184a:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800185a:	601a      	str	r2, [r3, #0]
	// 1.1 Wait until SB flag is set

	if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1), I2C_SR1_SB,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3314      	adds	r3, #20
 8001862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001866:	2101      	movs	r1, #1
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff4c 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b01      	cmp	r3, #1
 8001872:	d102      	bne.n	800187a <I2C_SendAddress+0x4e>
	I2C_TIMEOUT) == 1)
	{
		p_handle_i2c->error = kI2cErrTimeoutSB;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2206      	movs	r2, #6
 8001878:	711a      	strb	r2, [r3, #4]
	}

	// 1.2 Clear SB by reading SR1
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	73fb      	strb	r3, [r7, #15]
	// If transmitting set slave addres LSB to 0, receiver 1
	slave_address &= (~1U);
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	70fb      	strb	r3, [r7, #3]
	slave_address |= mode;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	78bb      	ldrb	r3, [r7, #2]
 800188e:	4313      	orrs	r3, r2
 8001890:	70fb      	strb	r3, [r7, #3]
	// 2. Put slave address in DR register -
	p_handle_i2c->p_i2cx->DR = slave_address;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	611a      	str	r2, [r3, #16]

	return;
 800189a:	bf00      	nop
}
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <I2C_CalculateCCRandTRISE>:
 * @param[speed] - i2c desired speed
 * @return - void
 */
static void I2C_CalculateCCRandTRISE(I2c_Handle_t *p_handle_i2c,
		I2cSpeed_t speed)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
	// set speed
	uint16_t temp_ccr, temp_trise;
	uint8_t pclk_freq_Mhz = RCC_GetPclk(1) / 1000000;
 80018b0:	2001      	movs	r0, #1
 80018b2:	f000 fc57 	bl	8002164 <RCC_GetPclk>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a48      	ldr	r2, [pc, #288]	; (80019dc <I2C_CalculateCCRandTRISE+0x138>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	72fb      	strb	r3, [r7, #11]

	// set slow mode, reset DUTY
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_FS);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018d0:	61da      	str	r2, [r3, #28]
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_DUTY);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018e0:	61da      	str	r2, [r3, #28]

	// CCR calculation for slow mode -> values are coming from RM CCR register and
	// result is in [ns] (Thigh + Tlow) / (CEOFF * PCLK)
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW)
			/ (I2C_CCR_SM_COEFF * (1000 / pclk_freq_Mhz));
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW)
 80018f6:	81fb      	strh	r3, [r7, #14]

	// TRISE calculation for slow mode -> equation is from RM
	temp_trise = ((I2C_CCR_SM_TR_SCL * pclk_freq_Mhz) / 1000) + 1;
 80018f8:	7afb      	ldrb	r3, [r7, #11]
 80018fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	4a37      	ldr	r2, [pc, #220]	; (80019e0 <I2C_CalculateCCRandTRISE+0x13c>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	b29b      	uxth	r3, r3
 800190c:	3301      	adds	r3, #1
 800190e:	81bb      	strh	r3, [r7, #12]

	// fast mode
	if (speed != kI2cSpeedSlow)
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d03c      	beq.n	8001990 <I2C_CalculateCCRandTRISE+0xec>
	{
		// set fast mode
		p_handle_i2c->p_i2cx->CCR |= I2C_CCR_FS;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	69da      	ldr	r2, [r3, #28]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001924:	61da      	str	r2, [r3, #28]
		// calculate CCR for fast mode with DUTY 0
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
				/ (I2C_CCR_FM_COEFF_DUTY0 * (1000 / pclk_freq_Mhz));
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800192c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
 8001940:	81fb      	strh	r3, [r7, #14]
		// calculate TRISE for fast mode
		temp_trise = ((I2C_CCR_FM_TR_SCL * pclk_freq_Mhz) / 1000) + 1;
 8001942:	7afb      	ldrb	r3, [r7, #11]
 8001944:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <I2C_CalculateCCRandTRISE+0x13c>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	b29b      	uxth	r3, r3
 8001956:	3301      	adds	r3, #1
 8001958:	81bb      	strh	r3, [r7, #12]
		if (speed == kI2cSpeedFastDuty1)
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d117      	bne.n	8001990 <I2C_CalculateCCRandTRISE+0xec>
		{
			// set DUTY flag
			p_handle_i2c->p_i2cx->CCR |= I2C_CCR_DUTY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800196e:	61da      	str	r2, [r3, #28]
			// calculate CCR with fast mode DUTY1
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
					/ (I2C_CCR_FM_COEFF_DUTY1 * (1000 / pclk_freq_Mhz));
 8001970:	7afb      	ldrb	r3, [r7, #11]
 8001972:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001976:	fb92 f3f3 	sdiv	r3, r2, r3
 800197a:	461a      	mov	r2, r3
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009a      	lsls	r2, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
 800198e:	81fb      	strh	r3, [r7, #14]
		}
	}
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_CCR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800199e:	f023 030f 	bic.w	r3, r3, #15
 80019a2:	61d3      	str	r3, [r2, #28]
	p_handle_i2c->p_i2cx->CCR |= (temp_ccr << I2C_CCR_CCR_Pos);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69d9      	ldr	r1, [r3, #28]
 80019aa:	89fa      	ldrh	r2, [r7, #14]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	61da      	str	r2, [r3, #28]

	// write correct TRISE to the register
	p_handle_i2c->p_i2cx->TRISE &= ~(I2C_TRISE_TRISE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6a1a      	ldr	r2, [r3, #32]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80019c2:	621a      	str	r2, [r3, #32]
	p_handle_i2c->p_i2cx->TRISE |= (temp_trise << I2C_TRISE_TRISE_Pos);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6a19      	ldr	r1, [r3, #32]
 80019ca:	89ba      	ldrh	r2, [r7, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	621a      	str	r2, [r3, #32]

	return;
 80019d4:	bf00      	nop
}
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	431bde83 	.word	0x431bde83
 80019e0:	10624dd3 	.word	0x10624dd3

080019e4 <I2C_InitClock>:
 *
 * @param[*p_i2cx] - base address of i2c peripheral
 * @return - void
 */
void I2C_InitClock(I2c_Handle_t *p_handle_i2c)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	if (p_handle_i2c->p_i2cx == I2C1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a25      	ldr	r2, [pc, #148]	; (8001a88 <I2C_InitClock+0xa4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d112      	bne.n	8001a1c <I2C_InitClock+0x38>
	{
		RCC_CLOCK_I2C1_ENABLE();
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <I2C_InitClock+0xa8>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a24      	ldr	r2, [pc, #144]	; (8001a8c <I2C_InitClock+0xa8>)
 80019fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_I2C1();
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a18:	6213      	str	r3, [r2, #32]
	{
		RCC_CLOCK_I2C3_ENABLE();
		RCC_RESET_I2C3();
	}

	return;
 8001a1a:	e02f      	b.n	8001a7c <I2C_InitClock+0x98>
	else if (p_handle_i2c->p_i2cx == I2C2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1b      	ldr	r2, [pc, #108]	; (8001a90 <I2C_InitClock+0xac>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d112      	bne.n	8001a4c <I2C_InitClock+0x68>
		RCC_CLOCK_I2C2_ENABLE();
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_I2C2();
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a3c:	6213      	str	r3, [r2, #32]
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a48:	6213      	str	r3, [r2, #32]
	return;
 8001a4a:	e017      	b.n	8001a7c <I2C_InitClock+0x98>
	else if (p_handle_i2c->p_i2cx == I2C3)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <I2C_InitClock+0xb0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d112      	bne.n	8001a7c <I2C_InitClock+0x98>
		RCC_CLOCK_I2C3_ENABLE();
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_I2C3();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a6c:	6213      	str	r3, [r2, #32]
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <I2C_InitClock+0xa8>)
 8001a74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a78:	6213      	str	r3, [r2, #32]
	return;
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
}
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40005800 	.word	0x40005800
 8001a94:	40005c00 	.word	0x40005c00

08001a98 <I2C_InitGpioPins>:
 * @param[*p_i2cx] - i2c address
 * @param[alternate_pos] - pins alternative positions select
 * @return - void
 */
void I2C_InitGpioPins(I2c_Handle_t *p_handle_i2c)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	I2C_CheckIfBusIsHanging(p_handle_i2c);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fe4f 	bl	8001744 <I2C_CheckIfBusIsHanging>

	// configure pins
	if (p_handle_i2c->p_i2cx == I2C1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a29      	ldr	r2, [pc, #164]	; (8001b50 <I2C_InitGpioPins+0xb8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d111      	bne.n	8001ad4 <I2C_InitGpioPins+0x3c>
	{
		GPIO_ConfigBasic(GPIOB, (I2C1_SDA_PIN_FLAG | I2C1_SCL_PIN_FLAG),
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	21c0      	movs	r1, #192	; 0xc0
 8001ab6:	4827      	ldr	r0, [pc, #156]	; (8001b54 <I2C_InitGpioPins+0xbc>)
 8001ab8:	f7ff fd2c 	bl	8001514 <GPIO_ConfigBasic>
				kGpioModeAF, kGpioPUPDNoPull);
		GPIO_ConfigOutput(GPIOB, (I2C1_SDA_PIN_FLAG | I2C1_SCL_PIN_FLAG),
 8001abc:	2303      	movs	r3, #3
 8001abe:	2201      	movs	r2, #1
 8001ac0:	21c0      	movs	r1, #192	; 0xc0
 8001ac2:	4824      	ldr	r0, [pc, #144]	; (8001b54 <I2C_InitGpioPins+0xbc>)
 8001ac4:	f7ff fd74 	bl	80015b0 <GPIO_ConfigOutput>
				kGpioOTOpenDrain, kGpioSpeedVeryHigh);
		GPIO_ConfigAF(GPIOB, (I2C1_SDA_PIN_FLAG | I2C1_SCL_PIN_FLAG), kGpioAF4);
 8001ac8:	2204      	movs	r2, #4
 8001aca:	21c0      	movs	r1, #192	; 0xc0
 8001acc:	4821      	ldr	r0, [pc, #132]	; (8001b54 <I2C_InitGpioPins+0xbc>)
 8001ace:	f7ff fdbb 	bl	8001648 <GPIO_ConfigAF>
		GPIO_ConfigOutput(GPIOB, (I2C3_SDA_PIN_FLAG | I2C3_SCL_PIN_FLAG),
				kGpioOTOpenDrain, kGpioSpeedVeryHigh);
		GPIO_ConfigAF(GPIOB, (I2C3_SDA_PIN_FLAG | I2C3_SCL_PIN_FLAG), kGpioAF4);
	}

	return;
 8001ad2:	e038      	b.n	8001b46 <I2C_InitGpioPins+0xae>
	else if (p_handle_i2c->p_i2cx == I2C2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <I2C_InitGpioPins+0xc0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d119      	bne.n	8001b12 <I2C_InitGpioPins+0x7a>
		GPIO_ConfigBasic(GPIOB, (I2C2_SDA_PIN_FLAG | I2C2_SCL_PIN_FLAG),
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001ae6:	481b      	ldr	r0, [pc, #108]	; (8001b54 <I2C_InitGpioPins+0xbc>)
 8001ae8:	f7ff fd14 	bl	8001514 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOB, (I2C2_SDA_PIN_FLAG | I2C2_SCL_PIN_FLAG),
 8001aec:	2303      	movs	r3, #3
 8001aee:	2201      	movs	r2, #1
 8001af0:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001af4:	4817      	ldr	r0, [pc, #92]	; (8001b54 <I2C_InitGpioPins+0xbc>)
 8001af6:	f7ff fd5b 	bl	80015b0 <GPIO_ConfigOutput>
		GPIO_ConfigAF(GPIOB, I2C2_SDA_PIN_FLAG, kGpioAF9);
 8001afa:	2209      	movs	r2, #9
 8001afc:	2108      	movs	r1, #8
 8001afe:	4815      	ldr	r0, [pc, #84]	; (8001b54 <I2C_InitGpioPins+0xbc>)
 8001b00:	f7ff fda2 	bl	8001648 <GPIO_ConfigAF>
		GPIO_ConfigAF(GPIOB, I2C2_SCL_PIN_FLAG, kGpioAF4);
 8001b04:	2204      	movs	r2, #4
 8001b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b0a:	4812      	ldr	r0, [pc, #72]	; (8001b54 <I2C_InitGpioPins+0xbc>)
 8001b0c:	f7ff fd9c 	bl	8001648 <GPIO_ConfigAF>
	return;
 8001b10:	e019      	b.n	8001b46 <I2C_InitGpioPins+0xae>
	else if (p_handle_i2c->p_i2cx == I2C3)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <I2C_InitGpioPins+0xc4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d114      	bne.n	8001b46 <I2C_InitGpioPins+0xae>
		GPIO_ConfigBasic(GPIOB, (I2C3_SDA_PIN_FLAG | I2C3_SCL_PIN_FLAG),
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <I2C_InitGpioPins+0xbc>)
 8001b26:	f7ff fcf5 	bl	8001514 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOB, (I2C3_SDA_PIN_FLAG | I2C3_SCL_PIN_FLAG),
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b32:	4808      	ldr	r0, [pc, #32]	; (8001b54 <I2C_InitGpioPins+0xbc>)
 8001b34:	f7ff fd3c 	bl	80015b0 <GPIO_ConfigOutput>
		GPIO_ConfigAF(GPIOB, (I2C3_SDA_PIN_FLAG | I2C3_SCL_PIN_FLAG), kGpioAF4);
 8001b38:	2204      	movs	r2, #4
 8001b3a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <I2C_InitGpioPins+0xbc>)
 8001b40:	f7ff fd82 	bl	8001648 <GPIO_ConfigAF>
	return;
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
}
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40005400 	.word	0x40005400
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40005800 	.word	0x40005800
 8001b5c:	40005c00 	.word	0x40005c00

08001b60 <I2C_SetBasicParameters>:
 * @param[*p_handle_i2c] - handler to i2c structure
 * @param[speed] - i2c desired speed
 * @return - void
 */
void I2C_SetBasicParameters(I2c_Handle_t *p_handle_i2c, I2cSpeed_t speed)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
	// reset I2C
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_SWRST;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b7a:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_SWRST);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b8a:	601a      	str	r2, [r3, #0]

	// check frequency limits
	if (RCC_GetPclk(1) < I2C_FREQUENCY_MINIMUM
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f000 fae9 	bl	8002164 <RCC_GetPclk>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <I2C_SetBasicParameters+0xa8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d906      	bls.n	8001ba8 <I2C_SetBasicParameters+0x48>
			|| RCC_GetPclk(1) > I2C_FREQUENCY_MAXIMUM)
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f000 fae2 	bl	8002164 <RCC_GetPclk>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <I2C_SetBasicParameters+0xac>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d903      	bls.n	8001bb0 <I2C_SetBasicParameters+0x50>
	{
		p_handle_i2c->error = kI2cErrWrongPclkFreq;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	711a      	strb	r2, [r3, #4]
		return;
 8001bae:	e027      	b.n	8001c00 <I2C_SetBasicParameters+0xa0>
	}

	// set frequency (same as ABP1 frequency)
	p_handle_i2c->p_i2cx->CR2 &= ~(I2C_CR2_FREQ);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001bbe:	605a      	str	r2, [r3, #4]
	p_handle_i2c->p_i2cx->CR2 |=
			((RCC_GetPclk(1) / 1000000) << I2C_CR2_FREQ_Pos);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f000 facf 	bl	8002164 <RCC_GetPclk>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a11      	ldr	r2, [pc, #68]	; (8001c10 <I2C_SetBasicParameters+0xb0>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0c99      	lsrs	r1, r3, #18
	p_handle_i2c->p_i2cx->CR2 |=
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]

	I2C_CalculateCCRandTRISE(p_handle_i2c, speed);
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fe5e 	bl	80018a4 <I2C_CalculateCCRandTRISE>

	// enable I2c
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_PE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
	p_handle_i2c->error = kI2cErrNoError;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	711a      	strb	r2, [r3, #4]

	// check if bus is not stuck
	// I2C_CheckIfBusIsHanging(p_handle_i2c);

	return;
 8001bfe:	bf00      	nop
}
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	001e847f 	.word	0x001e847f
 8001c0c:	02faf080 	.word	0x02faf080
 8001c10:	431bde83 	.word	0x431bde83

08001c14 <I2C_Transmit>:
 * @param[data_size] - amount of data to be send [in bytes]
 * @return - uint8_t - to return error
 */
void I2C_Transmit(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t mem_address, uint8_t *p_tx_data_buffer, uint32_t data_size)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	72fb      	strb	r3, [r7, #11]
 8001c22:	4613      	mov	r3, r2
 8001c24:	72bb      	strb	r3, [r7, #10]
	uint32_t tx_data_to_send = data_size;
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	617b      	str	r3, [r7, #20]
	uint8_t temp_byte;

	p_handle_i2c->status = kI2cStatusTxPolling;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	715a      	strb	r2, [r3, #5]

	I2C_SendAddress(p_handle_i2c, slave_address, I2C_MODE_TRANSMITTER);
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	2200      	movs	r2, #0
 8001c34:	4619      	mov	r1, r3
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff fdf8 	bl	800182c <I2C_SendAddress>
	// wait until ADDR is set
	if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1), I2C_SR1_ADDR,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3314      	adds	r3, #20
 8001c42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c46:	2102      	movs	r1, #2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fd5c 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <I2C_Transmit+0x4e>
	I2C_TIMEOUT))
	{
		p_handle_i2c->error = kI2cErrTimeoutADDR;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2203      	movs	r2, #3
 8001c58:	711a      	strb	r2, [r3, #4]
		p_handle_i2c->status = kI2cStatusIdle;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	715a      	strb	r2, [r3, #5]
		return;
 8001c60:	e088      	b.n	8001d74 <I2C_Transmit+0x160>
	}

	// 4. ADDR is cleared by reading SR1 , Read SR2
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	74fb      	strb	r3, [r7, #19]
	temp_byte = p_handle_i2c->p_i2cx->SR2;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	74fb      	strb	r3, [r7, #19]

	// 5. TxE bit is set when acknowledge bit is sent;
	if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1), I2C_SR1_TXE,
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3314      	adds	r3, #20
 8001c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fd41 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <I2C_Transmit+0x84>
	I2C_TIMEOUT))
	{
		p_handle_i2c->error = kI2cErrTimeoutTXE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	711a      	strb	r2, [r3, #4]
		p_handle_i2c->status = kI2cStatusIdle;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	715a      	strb	r2, [r3, #5]
		return;
 8001c96:	e06d      	b.n	8001d74 <I2C_Transmit+0x160>
	}

	// 6. Write memory address to DR to clear TxE
	p_handle_i2c->p_i2cx->DR = mem_address;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	7aba      	ldrb	r2, [r7, #10]
 8001c9e:	611a      	str	r2, [r3, #16]

	// 7. Data transfer
	while (tx_data_to_send > 0)
 8001ca0:	e043      	b.n	8001d2a <I2C_Transmit+0x116>
	{
		// wait until data register is empty
		if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1),
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fd29 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <I2C_Transmit+0xb4>
				I2C_SR1_TXE,
				I2C_TIMEOUT))
		{
			p_handle_i2c->error = kI2cErrTimeoutTXE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	711a      	strb	r2, [r3, #4]
			p_handle_i2c->status = kI2cStatusIdle;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	715a      	strb	r2, [r3, #5]
			return;
 8001cc6:	e055      	b.n	8001d74 <I2C_Transmit+0x160>
		}

		// put data in data register
		p_handle_i2c->p_i2cx->DR =
				p_tx_data_buffer[data_size - tx_data_to_send];
 8001cc8:	6a3a      	ldr	r2, [r7, #32]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781a      	ldrb	r2, [r3, #0]
		p_handle_i2c->p_i2cx->DR =
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	611a      	str	r2, [r3, #16]

		// change counters
		tx_data_to_send--;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]

		// 8. After last bit is written to DR register , Set STOP bit  and interface
		// is going back to slave mode
		if (tx_data_to_send == 0)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d121      	bne.n	8001d2a <I2C_Transmit+0x116>
		{
			// check if data transfer is finsihed
			if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1),
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3314      	adds	r3, #20
 8001cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fd07 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <I2C_Transmit+0xf8>
					I2C_SR1_BTF,
					I2C_TIMEOUT))
			{
				p_handle_i2c->error = kI2cErrTimeoutBTF;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2204      	movs	r2, #4
 8001d02:	711a      	strb	r2, [r3, #4]
				p_handle_i2c->status = kI2cStatusIdle;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	715a      	strb	r2, [r3, #5]
				return;
 8001d0a:	e033      	b.n	8001d74 <I2C_Transmit+0x160>
			}

			// stop transfer
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1a:	601a      	str	r2, [r3, #0]
			p_handle_i2c->error = kI2cErrNoError;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	711a      	strb	r2, [r3, #4]
			p_handle_i2c->status = kI2cStatusIdle;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	715a      	strb	r2, [r3, #5]
			return;
 8001d28:	e024      	b.n	8001d74 <I2C_Transmit+0x160>
	while (tx_data_to_send > 0)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1b8      	bne.n	8001ca2 <I2C_Transmit+0x8e>
		}
	}

	// in case of sending only mem address
	if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1), I2C_SR1_TXE,
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3314      	adds	r3, #20
 8001d36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fce2 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <I2C_Transmit+0x142>
	I2C_TIMEOUT))
	{
		p_handle_i2c->error = kI2cErrTimeoutTXE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	711a      	strb	r2, [r3, #4]
		p_handle_i2c->status = kI2cStatusIdle;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	715a      	strb	r2, [r3, #5]
		return;
 8001d54:	e00e      	b.n	8001d74 <I2C_Transmit+0x160>
	}

	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d64:	601a      	str	r2, [r3, #0]
	p_handle_i2c->error = kI2cErrNoError;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	711a      	strb	r2, [r3, #4]
	p_handle_i2c->status = kI2cStatusIdle;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	715a      	strb	r2, [r3, #5]
	return;
 8001d72:	bf00      	nop
}
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <I2C_Receive>:
 * @param[data_size] - amount of data to be received [in bytes]
 * @return - uint8_t - to return error
 */
void I2C_Receive(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t *p_rx_data_buffer, uint32_t data_size)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	460b      	mov	r3, r1
 8001d88:	72fb      	strb	r3, [r7, #11]
	uint32_t rx_data_to_get = data_size;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	617b      	str	r3, [r7, #20]
	uint8_t temp_byte;

	I2C_SendAddress(p_handle_i2c, slave_address, I2C_MODE_RECEIVER);
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4619      	mov	r1, r3
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff fd49 	bl	800182c <I2C_SendAddress>

	if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1), I2C_SR1_ADDR,
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3314      	adds	r3, #20
 8001da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001da4:	2102      	movs	r1, #2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fcad 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <I2C_Receive+0x46>
	I2C_TIMEOUT))
	{
		p_handle_i2c->error = kI2cErrTimeoutADDR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2203      	movs	r2, #3
 8001db6:	711a      	strb	r2, [r3, #4]
		p_handle_i2c->status = kI2cStatusIdle;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	715a      	strb	r2, [r3, #5]
		return;
 8001dbe:	e0ce      	b.n	8001f5e <I2C_Receive+0x1e4>
	}

	// single byte receive
	if (data_size == 1)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	f040 80c0 	bne.w	8001f48 <I2C_Receive+0x1ce>
	{
		// Disable acknowledge
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd6:	601a      	str	r2, [r3, #0]
		// 4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	74fb      	strb	r3, [r7, #19]

		// stop comm
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df6:	601a      	str	r2, [r3, #0]

		// wait for a byte received
		if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1),
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3314      	adds	r3, #20
 8001dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e02:	2140      	movs	r1, #64	; 0x40
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fc7e 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <I2C_Receive+0xa4>
				I2C_SR1_RXNE,
				I2C_TIMEOUT))
		{
			p_handle_i2c->error = kI2cErrTimeoutRXNE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2205      	movs	r2, #5
 8001e14:	711a      	strb	r2, [r3, #4]
			p_handle_i2c->status = kI2cStatusIdle;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	715a      	strb	r2, [r3, #5]
			return;
 8001e1c:	e09f      	b.n	8001f5e <I2C_Receive+0x1e4>
		}

		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6919      	ldr	r1, [r3, #16]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	b2ca      	uxtb	r2, r1
 8001e30:	701a      	strb	r2, [r3, #0]
		p_handle_i2c->error = kI2cErrNoError;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	711a      	strb	r2, [r3, #4]
		p_handle_i2c->status = kI2cStatusIdle;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	715a      	strb	r2, [r3, #5]
		return;
 8001e3e:	e08e      	b.n	8001f5e <I2C_Receive+0x1e4>

	// multiple bytes receive
	while (rx_data_to_get >= 2)
	{
		// 4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	74fb      	strb	r3, [r7, #19]

		// read all the bytes until second last
		while (rx_data_to_get > 2)
 8001e50:	e027      	b.n	8001ea2 <I2C_Receive+0x128>
		{
			if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1),
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3314      	adds	r3, #20
 8001e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e5c:	2140      	movs	r1, #64	; 0x40
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fc51 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <I2C_Receive+0xfe>
			I2C_SR1_RXNE, I2C_TIMEOUT))
			{
				p_handle_i2c->error = kI2cErrTimeoutRXNE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	711a      	strb	r2, [r3, #4]
				p_handle_i2c->status = kI2cStatusIdle;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	715a      	strb	r2, [r3, #5]
				return;
 8001e76:	e072      	b.n	8001f5e <I2C_Receive+0x1e4>
			}

			p_rx_data_buffer[data_size - rx_data_to_get] =
					p_handle_i2c->p_i2cx->DR;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
			p_rx_data_buffer[data_size - rx_data_to_get] =
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	b2ca      	uxtb	r2, r1
 8001e8a:	701a      	strb	r2, [r3, #0]
			rx_data_to_get--;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]

			// ack receive
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ea0:	601a      	str	r2, [r3, #0]
		while (rx_data_to_get > 2)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d8d4      	bhi.n	8001e52 <I2C_Receive+0xd8>
		}

		// read second last byte
		if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1),
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3314      	adds	r3, #20
 8001eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eb2:	2140      	movs	r1, #64	; 0x40
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fc26 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <I2C_Receive+0x154>
				I2C_SR1_RXNE,
				I2C_TIMEOUT))
		{
			p_handle_i2c->error = kI2cErrTimeoutRXNE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2205      	movs	r2, #5
 8001ec4:	711a      	strb	r2, [r3, #4]
			p_handle_i2c->status = kI2cStatusIdle;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	715a      	strb	r2, [r3, #5]
			return;
 8001ecc:	e047      	b.n	8001f5e <I2C_Receive+0x1e4>
		}

		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6919      	ldr	r1, [r3, #16]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	b2ca      	uxtb	r2, r1
 8001ee0:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]

		// after second last byte clear ACK and set stop
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef6:	601a      	str	r2, [r3, #0]
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f06:	601a      	str	r2, [r3, #0]

		// receive last byte
		if (I2C_WaitForFlagUntilTimeout(&(p_handle_i2c->p_i2cx->SR1),
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3314      	adds	r3, #20
 8001f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f12:	2140      	movs	r1, #64	; 0x40
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fbf6 	bl	8001706 <I2C_WaitForFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <I2C_Receive+0x1b4>
				I2C_SR1_RXNE,
				I2C_TIMEOUT))
		{
			p_handle_i2c->error = kI2cErrTimeoutRXNE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2205      	movs	r2, #5
 8001f24:	711a      	strb	r2, [r3, #4]
			p_handle_i2c->status = kI2cStatusIdle;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	715a      	strb	r2, [r3, #5]
			return;
 8001f2c:	e017      	b.n	8001f5e <I2C_Receive+0x1e4>
		}

		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6919      	ldr	r1, [r3, #16]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b2ca      	uxtb	r2, r1
 8001f40:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
	while (rx_data_to_get >= 2)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	f63f af78 	bhi.w	8001e40 <I2C_Receive+0xc6>
	}
	// finish receiving
	p_handle_i2c->error = kI2cErrNoError;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	711a      	strb	r2, [r3, #4]
	p_handle_i2c->status = kI2cStatusIdle;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	715a      	strb	r2, [r3, #5]
	return;
 8001f5c:	bf00      	nop
}
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <RCC_CalculatePllclk>:

	return 0;
}

static uint32_t RCC_CalculatePllclk(uint32_t source)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <RCC_CalculatePllclk+0x5c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f76:	81fb      	strh	r3, [r7, #14]
	;
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <RCC_CalculatePllclk+0x5c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f84:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <RCC_CalculatePllclk+0x5c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	0c1b      	lsrs	r3, r3, #16
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	817b      	strh	r3, [r7, #10]
	;

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 8001f94:	897b      	ldrh	r3, [r7, #10]
 8001f96:	3301      	adds	r3, #1
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	89ba      	ldrh	r2, [r7, #12]
 8001fa8:	fb02 f203 	mul.w	r2, r2, r3
 8001fac:	897b      	ldrh	r3, [r7, #10]
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b07      	cmp	r3, #7
 8001fd2:	d822      	bhi.n	800201a <RCC_GetApbPrescaler+0x56>
 8001fd4:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <RCC_GetApbPrescaler+0x18>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08001ffd 	.word	0x08001ffd
 8001fe0:	0800201b 	.word	0x0800201b
 8001fe4:	0800201b 	.word	0x0800201b
 8001fe8:	0800201b 	.word	0x0800201b
 8001fec:	08002003 	.word	0x08002003
 8001ff0:	08002009 	.word	0x08002009
 8001ff4:	0800200f 	.word	0x0800200f
 8001ff8:	08002015 	.word	0x08002015
	{
	case (RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
		break;
 8002000:	e00b      	b.n	800201a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 8002002:	2302      	movs	r3, #2
 8002004:	60fb      	str	r3, [r7, #12]
		break;
 8002006:	e008      	b.n	800201a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 8002008:	2304      	movs	r3, #4
 800200a:	60fb      	str	r3, [r7, #12]
		break;
 800200c:	e005      	b.n	800201a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 800200e:	2308      	movs	r3, #8
 8002010:	60fb      	str	r3, [r7, #12]
		break;
 8002012:	e002      	b.n	800201a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 8002014:	2310      	movs	r3, #16
 8002016:	60fb      	str	r3, [r7, #12]
		break;
 8002018:	bf00      	nop
	}

	return apb_prescaler;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	b29b      	uxth	r3, r3
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop

0800202c <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b0f      	cmp	r3, #15
 800203a:	d840      	bhi.n	80020be <RCC_GetAhbPrescaler+0x92>
 800203c:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <RCC_GetAhbPrescaler+0x18>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	08002085 	.word	0x08002085
 8002048:	080020bf 	.word	0x080020bf
 800204c:	080020bf 	.word	0x080020bf
 8002050:	080020bf 	.word	0x080020bf
 8002054:	080020bf 	.word	0x080020bf
 8002058:	080020bf 	.word	0x080020bf
 800205c:	080020bf 	.word	0x080020bf
 8002060:	080020bf 	.word	0x080020bf
 8002064:	0800208b 	.word	0x0800208b
 8002068:	08002091 	.word	0x08002091
 800206c:	08002097 	.word	0x08002097
 8002070:	0800209d 	.word	0x0800209d
 8002074:	080020a3 	.word	0x080020a3
 8002078:	080020a9 	.word	0x080020a9
 800207c:	080020af 	.word	0x080020af
 8002080:	080020b7 	.word	0x080020b7
	{
	case (RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 8002084:	2301      	movs	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
		break;
 8002088:	e019      	b.n	80020be <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 800208a:	2302      	movs	r3, #2
 800208c:	60fb      	str	r3, [r7, #12]
		break;
 800208e:	e016      	b.n	80020be <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 8002090:	2304      	movs	r3, #4
 8002092:	60fb      	str	r3, [r7, #12]
		break;
 8002094:	e013      	b.n	80020be <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 8002096:	2308      	movs	r3, #8
 8002098:	60fb      	str	r3, [r7, #12]
		break;
 800209a:	e010      	b.n	80020be <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 800209c:	2310      	movs	r3, #16
 800209e:	60fb      	str	r3, [r7, #12]
		break;
 80020a0:	e00d      	b.n	80020be <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 80020a2:	2340      	movs	r3, #64	; 0x40
 80020a4:	60fb      	str	r3, [r7, #12]
		break;
 80020a6:	e00a      	b.n	80020be <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	60fb      	str	r3, [r7, #12]
		break;
 80020ac:	e007      	b.n	80020be <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 80020ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b2:	60fb      	str	r3, [r7, #12]
		break;
 80020b4:	e003      	b.n	80020be <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 80020b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ba:	60fb      	str	r3, [r7, #12]
		break;
 80020bc:	bf00      	nop
	}

	return ahb_prescaler;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	b29b      	uxth	r3, r3
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop

080020d0 <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <RCC_GetSysclk+0x54>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d00a      	beq.n	80020f6 <RCC_GetSysclk+0x26>
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d81c      	bhi.n	800211e <RCC_GetSysclk+0x4e>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <RCC_GetSysclk+0x1e>
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d002      	beq.n	80020f2 <RCC_GetSysclk+0x22>
 80020ec:	e017      	b.n	800211e <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <RCC_GetSysclk+0x58>)
 80020f0:	e016      	b.n	8002120 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e014      	b.n	8002120 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <RCC_GetSysclk+0x54>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <RCC_GetSysclk+0x3a>
 8002102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002106:	d005      	beq.n	8002114 <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 8002108:	e009      	b.n	800211e <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 800210a:	4807      	ldr	r0, [pc, #28]	; (8002128 <RCC_GetSysclk+0x58>)
 800210c:	f7ff ff2a 	bl	8001f64 <RCC_CalculatePllclk>
 8002110:	4603      	mov	r3, r0
 8002112:	e005      	b.n	8002120 <RCC_GetSysclk+0x50>
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff ff25 	bl	8001f64 <RCC_CalculatePllclk>
 800211a:	4603      	mov	r3, r0
 800211c:	e000      	b.n	8002120 <RCC_GetSysclk+0x50>
	}

	return 0;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800
 8002128:	00f42400 	.word	0x00f42400

0800212c <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 8002132:	f7ff ffcd 	bl	80020d0 <RCC_GetSysclk>
 8002136:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <RCC_GetHclk+0x34>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff70 	bl	800202c <RCC_GetAhbPrescaler>
 800214c:	4603      	mov	r3, r0
 800214e:	807b      	strh	r3, [r7, #2]
	return sysclk / ahb_prescaler;
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800

08002164 <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 800216e:	f7ff ffdd 	bl	800212c <RCC_GetHclk>
 8002172:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch (plck_x)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d002      	beq.n	8002180 <RCC_GetPclk+0x1c>
 800217a:	2b02      	cmp	r3, #2
 800217c:	d00d      	beq.n	800219a <RCC_GetPclk+0x36>
 800217e:	e019      	b.n	80021b4 <RCC_GetPclk+0x50>
	{
	case (1):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >>
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <RCC_GetPclk+0x60>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	0a9b      	lsrs	r3, r3, #10
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff18 	bl	8001fc4 <RCC_GetApbPrescaler>
 8002194:	4603      	mov	r3, r0
 8002196:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE1_Pos);
		break;
 8002198:	e00c      	b.n	80021b4 <RCC_GetPclk+0x50>

	case (2):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >>
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <RCC_GetPclk+0x60>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0b5b      	lsrs	r3, r3, #13
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff0b 	bl	8001fc4 <RCC_GetApbPrescaler>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE2_Pos);
		break;
 80021b2:	bf00      	nop
	}

	return hclk / apb_prescaler;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800

080021c8 <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs *freqs)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	freqs->sysclk = RCC_GetSysclk();
 80021d0:	f7ff ff7e 	bl	80020d0 <RCC_GetSysclk>
 80021d4:	4602      	mov	r2, r0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 80021da:	f7ff ffa7 	bl	800212c <RCC_GetHclk>
 80021de:	4602      	mov	r2, r0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff ffbd 	bl	8002164 <RCC_GetPclk>
 80021ea:	4602      	mov	r2, r0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 80021f0:	2002      	movs	r0, #2
 80021f2:	f7ff ffb7 	bl	8002164 <RCC_GetPclk>
 80021f6:	4602      	mov	r2, r0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	60da      	str	r2, [r3, #12]

	return;
 80021fc:	bf00      	nop
}
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002268:	d301      	bcc.n	800226e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226a:	2301      	movs	r3, #1
 800226c:	e00f      	b.n	800228e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <SysTick_Config+0x40>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002276:	210f      	movs	r1, #15
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f7ff ffc2 	bl	8002204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <SysTick_Config+0x40>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <SysTick_Config+0x40>)
 8002288:	2207      	movs	r2, #7
 800228a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	e000e010 	.word	0xe000e010

0800229c <SYSTICK_ConfigureMilisecond>:
#include "stm32f401xe_systick.h"

static volatile uint32_t systick;

void SYSTICK_ConfigureMilisecond(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
	RCC_ClockFreqs freqs;

	RCC_GetClockFrequencies(&freqs);
 80022a2:	463b      	mov	r3, r7
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff8f 	bl	80021c8 <RCC_GetClockFrequencies>

	SysTick_Config(freqs.hclk/1000);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <SYSTICK_ConfigureMilisecond+0x28>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	099b      	lsrs	r3, r3, #6
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ffcf 	bl	8002258 <SysTick_Config>

	return;
 80022ba:	bf00      	nop
}
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	10624dd3 	.word	0x10624dd3

080022c8 <SYSTICK_GetTick>:

uint32_t SYSTICK_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
	return systick;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <SYSTICK_GetTick+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000084 	.word	0x20000084

080022e0 <SYSTICK_Delay>:

void SYSTICK_Delay(uint32_t miliseconds)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	uint32_t delay = SYSTICK_GetTick();
 80022e8:	f7ff ffee 	bl	80022c8 <SYSTICK_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]
	while(SYSTICK_GetTick() - delay < miliseconds)
 80022ee:	bf00      	nop
 80022f0:	f7ff ffea 	bl	80022c8 <SYSTICK_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d8f7      	bhi.n	80022f0 <SYSTICK_Delay+0x10>
		;
	return;
 8002300:	bf00      	nop
}
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <SysTick_Handler>:

void SysTick_Handler (void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
	systick++;
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SysTick_Handler+0x18>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	4a03      	ldr	r2, [pc, #12]	; (8002320 <SysTick_Handler+0x18>)
 8002314:	6013      	str	r3, [r2, #0]
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	20000084 	.word	0x20000084

08002324 <__NVIC_EnableIRQ>:
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4907      	ldr	r1, [pc, #28]	; (800235c <__NVIC_EnableIRQ+0x38>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e100 	.word	0xe000e100

08002360 <USART_InitClock>:
 * Init USART clock
 * @param[*p_handle_usart] - handler to usart struct
 * @return - void
 */
void USART_InitClock(USART_Handle_t *p_handle_usart)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	if (p_handle_usart->p_usartx == USART1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a25      	ldr	r2, [pc, #148]	; (8002404 <USART_InitClock+0xa4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d112      	bne.n	8002398 <USART_InitClock+0x38>
	{
		RCC_CLOCK_USART1_ENABLE();
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <USART_InitClock+0xa8>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a24      	ldr	r2, [pc, #144]	; (8002408 <USART_InitClock+0xa8>)
 8002378:	f043 0310 	orr.w	r3, r3, #16
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
		RCC_RESET_USART1();
 800237e:	4b22      	ldr	r3, [pc, #136]	; (8002408 <USART_InitClock+0xa8>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	4a21      	ldr	r2, [pc, #132]	; (8002408 <USART_InitClock+0xa8>)
 8002384:	f043 0310 	orr.w	r3, r3, #16
 8002388:	6253      	str	r3, [r2, #36]	; 0x24
 800238a:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <USART_InitClock+0xa8>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <USART_InitClock+0xa8>)
 8002390:	f023 0310 	bic.w	r3, r3, #16
 8002394:	6253      	str	r3, [r2, #36]	; 0x24
	{
		RCC_CLOCK_USART6_ENABLE();
		RCC_RESET_USART6();
	}

	return;
 8002396:	e02f      	b.n	80023f8 <USART_InitClock+0x98>
	else if (p_handle_usart->p_usartx == USART2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <USART_InitClock+0xac>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d112      	bne.n	80023c8 <USART_InitClock+0x68>
		RCC_CLOCK_USART2_ENABLE();
 80023a2:	4b19      	ldr	r3, [pc, #100]	; (8002408 <USART_InitClock+0xa8>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <USART_InitClock+0xa8>)
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_USART2();
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <USART_InitClock+0xa8>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <USART_InitClock+0xa8>)
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <USART_InitClock+0xa8>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <USART_InitClock+0xa8>)
 80023c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023c4:	6213      	str	r3, [r2, #32]
	return;
 80023c6:	e017      	b.n	80023f8 <USART_InitClock+0x98>
	else if (p_handle_usart->p_usartx == USART6)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a10      	ldr	r2, [pc, #64]	; (8002410 <USART_InitClock+0xb0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d112      	bne.n	80023f8 <USART_InitClock+0x98>
		RCC_CLOCK_USART6_ENABLE();
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <USART_InitClock+0xa8>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <USART_InitClock+0xa8>)
 80023d8:	f043 0320 	orr.w	r3, r3, #32
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
		RCC_RESET_USART6();
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <USART_InitClock+0xa8>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	4a09      	ldr	r2, [pc, #36]	; (8002408 <USART_InitClock+0xa8>)
 80023e4:	f043 0320 	orr.w	r3, r3, #32
 80023e8:	6253      	str	r3, [r2, #36]	; 0x24
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <USART_InitClock+0xa8>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	4a06      	ldr	r2, [pc, #24]	; (8002408 <USART_InitClock+0xa8>)
 80023f0:	f023 0320 	bic.w	r3, r3, #32
 80023f4:	6253      	str	r3, [r2, #36]	; 0x24
	return;
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
}
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	40011000 	.word	0x40011000
 8002408:	40023800 	.word	0x40023800
 800240c:	40004400 	.word	0x40004400
 8002410:	40011400 	.word	0x40011400

08002414 <USART_InitGpioPins>:
 * Init GPIO pins for usart peripheral
 * @param[*p_handle_usart] - handler to usart struct
 * @return - void
 */
void USART_InitGpioPins(USART_Handle_t *p_handle_usart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

	if(p_handle_usart->p_usartx == USART2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0c      	ldr	r2, [pc, #48]	; (8002454 <USART_InitGpioPins+0x40>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d111      	bne.n	800244a <USART_InitGpioPins+0x36>
	{
		// PA2 RX PA3 TX
		GPIO_ConfigBasic(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioModeAF, kGpioPUPDNoPull);
 8002426:	2300      	movs	r3, #0
 8002428:	2202      	movs	r2, #2
 800242a:	210c      	movs	r1, #12
 800242c:	480a      	ldr	r0, [pc, #40]	; (8002458 <USART_InitGpioPins+0x44>)
 800242e:	f7ff f871 	bl	8001514 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioOTOpenDrain, kGpioSpeedVeryHigh);
 8002432:	2303      	movs	r3, #3
 8002434:	2201      	movs	r2, #1
 8002436:	210c      	movs	r1, #12
 8002438:	4807      	ldr	r0, [pc, #28]	; (8002458 <USART_InitGpioPins+0x44>)
 800243a:	f7ff f8b9 	bl	80015b0 <GPIO_ConfigOutput>
		GPIO_ConfigAF(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioAF7);
 800243e:	2207      	movs	r2, #7
 8002440:	210c      	movs	r1, #12
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <USART_InitGpioPins+0x44>)
 8002444:	f7ff f900 	bl	8001648 <GPIO_ConfigAF>

	}

	return;
 8002448:	bf00      	nop
 800244a:	bf00      	nop
}
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40004400 	.word	0x40004400
 8002458:	40020000 	.word	0x40020000

0800245c <USART_SetBaudRate>:
 * @param[oversampling] - oversampling method 8/16
 * @return - void
 */
void USART_SetBaudRate(USART_Handle_t *p_handle_usart, uint32_t baud_rate,
		UsartOversampling_t oversampling)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	; 0x30
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	4613      	mov	r3, r2
 8002468:	71fb      	strb	r3, [r7, #7]
	uint16_t baud_div_mantissa;
	uint8_t baud_div_fraction;

	// set oversampling

	p_handle_usart->p_usartx->CR1 |= (oversampling << USART_CR1_OVER8_Pos);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	03db      	lsls	r3, r3, #15
 8002474:	4619      	mov	r1, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	60da      	str	r2, [r3, #12]
	// in equation we have 8 * (2 - OVER8)
	uint8_t usart_divmulti =
			8
					* (2
							- (1U
									& (p_handle_usart->p_usartx->CR1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
											>> USART_CR1_OVER8_Pos)));
 8002484:	0bdb      	lsrs	r3, r3, #15
									& (p_handle_usart->p_usartx->CR1
 8002486:	f003 0301 	and.w	r3, r3, #1
							- (1U
 800248a:	f1c3 0302 	rsb	r3, r3, #2
	uint8_t usart_divmulti =
 800248e:	b2db      	uxtb	r3, r3
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	// read clock values from rcc registers
	RCC_GetClockFrequencies(&clock_freqs);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fe94 	bl	80021c8 <RCC_GetClockFrequencies>

	if (p_handle_usart->p_usartx == USART2)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a35      	ldr	r2, [pc, #212]	; (800257c <USART_SetBaudRate+0x120>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d102      	bne.n	80024b0 <USART_SetBaudRate+0x54>
	{
		pclk_freq = clock_freqs.pclk1;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ae:	e001      	b.n	80024b4 <USART_SetBaudRate+0x58>
	}
	else
	{
		// usart1 and usart6 are on apb2
		pclk_freq = clock_freqs.pclk2;
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	baud_div = ((float) pclk_freq / (baud_rate * usart_divmulti));
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	baud_div_mantissa = baud_div;
 80024d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024e0:	ee17 3a90 	vmov	r3, s15
 80024e4:	857b      	strh	r3, [r7, #42]	; 0x2a
	// rounding number to get correct fraction
	baud_div_fraction = round((baud_div - baud_div_mantissa) * usart_divmulti);
 80024e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80024f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002508:	ee17 0a90 	vmov	r0, s15
 800250c:	f7fd ffc8 	bl	80004a0 <__aeabi_f2d>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	ec43 2b10 	vmov	d0, r2, r3
 8002518:	f000 f8e0 	bl	80026dc <round>
 800251c:	ec53 2b10 	vmov	r2, r3, d0
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fac4 	bl	8000ab0 <__aeabi_d2uiz>
 8002528:	4603      	mov	r3, r0
 800252a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	// if after rounding we have value bigger or equal to oversampling then we
	// need to carry +1 to mantissa and set fraction to 0. like 50,99 -> 51;
	if (baud_div_fraction >= usart_divmulti)
 800252e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002532:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002536:	429a      	cmp	r2, r3
 8002538:	d305      	bcc.n	8002546 <USART_SetBaudRate+0xea>
	{
		baud_div_fraction = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		baud_div_mantissa++;
 8002540:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002542:	3301      	adds	r3, #1
 8002544:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	// insert values to brr register
	p_handle_usart->p_usartx->BRR = 0;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
			<< USART_BRR_DIV_Mantissa_Pos);
 8002554:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	4619      	mov	r1, r3
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
			<< USART_BRR_DIV_Fraction_Pos);
 8002568:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
}
 8002574:	bf00      	nop
 8002576:	3730      	adds	r7, #48	; 0x30
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40004400 	.word	0x40004400

08002580 <USART_EnableIRQs>:
 * @param[CR3_flags] - IRQ flags in CR3
 * @return - void
 */
void USART_EnableIRQs(USART_Handle_t *p_handle_usart, uint32_t CR1_flags,
		uint32_t CR2_flags, uint32_t CR3_flags)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 800258e:	2026      	movs	r0, #38	; 0x26
 8002590:	f7ff fec8 	bl	8002324 <__NVIC_EnableIRQ>
	// CR1 - PEIE,TXEIE,TCIE,RXNEIE,IDLEIE
	if (CR1_flags)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <USART_EnableIRQs+0x2a>
	{
		p_handle_usart->p_usartx->CR1 |= CR1_flags;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68d9      	ldr	r1, [r3, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	60da      	str	r2, [r3, #12]
	}

	// CR2 - LBDIE
	if (CR2_flags)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <USART_EnableIRQs+0x40>
	{
		p_handle_usart->p_usartx->CR2 |= CR2_flags;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6919      	ldr	r1, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	430a      	orrs	r2, r1
 80025be:	611a      	str	r2, [r3, #16]
	}

	// CR3 - CTSIE, EIE
	if (CR3_flags)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <USART_EnableIRQs+0x58>
	{
		p_handle_usart->p_usartx->CR1 |= CR3_flags;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68d9      	ldr	r1, [r3, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	60da      	str	r2, [r3, #12]
	}

	return;
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
}
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <USART_SetBasicParameters>:
 * @return - void
 */
void USART_SetBasicParameters(USART_Handle_t *p_handle_usart,
		UsartWordLenght_t word_lenght, UsartStopBits_t stop_bits,
		UsartParity_t parity)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	70fb      	strb	r3, [r7, #3]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70bb      	strb	r3, [r7, #2]
 80025f6:	4613      	mov	r3, r2
 80025f8:	707b      	strb	r3, [r7, #1]
	//	enable the USART by writing the UE bit in USART_CR1 register to 1.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_UE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002608:	60da      	str	r2, [r3, #12]
	//	program the M bit in USART_CR1 to define the word length.
	p_handle_usart->p_usartx->CR1 |= (word_lenght << USART_CR1_M_Pos);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	031b      	lsls	r3, r3, #12
 8002614:	4619      	mov	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	60da      	str	r2, [r3, #12]
	//	program the number of stop bits in USART_CR2.
	p_handle_usart->p_usartx->CR1 |= (stop_bits << USART_CR2_STOP_Pos);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	78bb      	ldrb	r3, [r7, #2]
 8002626:	031b      	lsls	r3, r3, #12
 8002628:	4619      	mov	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	60da      	str	r2, [r3, #12]
	// program parity control
	if (parity != kUsartNoParity)
 8002632:	787b      	ldrb	r3, [r7, #1]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d011      	beq.n	800265c <USART_SetBasicParameters+0x7c>
	{
		p_handle_usart->p_usartx->CR1 |= USART_CR1_PCE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002646:	60da      	str	r2, [r3, #12]
		p_handle_usart->p_usartx->CR1 |= (parity << USART_CR1_PS_Pos);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	787b      	ldrb	r3, [r7, #1]
 8002650:	025b      	lsls	r3, r3, #9
 8002652:	4619      	mov	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	60da      	str	r2, [r3, #12]
	}

	//clear TC flag
	p_handle_usart->p_usartx->SR &= ~(USART_SR_TC);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800266a:	601a      	str	r2, [r3, #0]
	return;
 800266c:	bf00      	nop
}
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <__errno>:
 8002678:	4b01      	ldr	r3, [pc, #4]	; (8002680 <__errno+0x8>)
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000000 	.word	0x20000000

08002684 <__libc_init_array>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	4d0d      	ldr	r5, [pc, #52]	; (80026bc <__libc_init_array+0x38>)
 8002688:	4c0d      	ldr	r4, [pc, #52]	; (80026c0 <__libc_init_array+0x3c>)
 800268a:	1b64      	subs	r4, r4, r5
 800268c:	10a4      	asrs	r4, r4, #2
 800268e:	2600      	movs	r6, #0
 8002690:	42a6      	cmp	r6, r4
 8002692:	d109      	bne.n	80026a8 <__libc_init_array+0x24>
 8002694:	4d0b      	ldr	r5, [pc, #44]	; (80026c4 <__libc_init_array+0x40>)
 8002696:	4c0c      	ldr	r4, [pc, #48]	; (80026c8 <__libc_init_array+0x44>)
 8002698:	f001 f81c 	bl	80036d4 <_init>
 800269c:	1b64      	subs	r4, r4, r5
 800269e:	10a4      	asrs	r4, r4, #2
 80026a0:	2600      	movs	r6, #0
 80026a2:	42a6      	cmp	r6, r4
 80026a4:	d105      	bne.n	80026b2 <__libc_init_array+0x2e>
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ac:	4798      	blx	r3
 80026ae:	3601      	adds	r6, #1
 80026b0:	e7ee      	b.n	8002690 <__libc_init_array+0xc>
 80026b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b6:	4798      	blx	r3
 80026b8:	3601      	adds	r6, #1
 80026ba:	e7f2      	b.n	80026a2 <__libc_init_array+0x1e>
 80026bc:	08003738 	.word	0x08003738
 80026c0:	08003738 	.word	0x08003738
 80026c4:	08003738 	.word	0x08003738
 80026c8:	0800373c 	.word	0x0800373c

080026cc <memset>:
 80026cc:	4402      	add	r2, r0
 80026ce:	4603      	mov	r3, r0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d100      	bne.n	80026d6 <memset+0xa>
 80026d4:	4770      	bx	lr
 80026d6:	f803 1b01 	strb.w	r1, [r3], #1
 80026da:	e7f9      	b.n	80026d0 <memset+0x4>

080026dc <round>:
 80026dc:	ec51 0b10 	vmov	r0, r1, d0
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80026e6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80026ea:	2c13      	cmp	r4, #19
 80026ec:	ee10 2a10 	vmov	r2, s0
 80026f0:	460b      	mov	r3, r1
 80026f2:	dc19      	bgt.n	8002728 <round+0x4c>
 80026f4:	2c00      	cmp	r4, #0
 80026f6:	da09      	bge.n	800270c <round+0x30>
 80026f8:	3401      	adds	r4, #1
 80026fa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80026fe:	d103      	bne.n	8002708 <round+0x2c>
 8002700:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8002704:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002708:	2100      	movs	r1, #0
 800270a:	e028      	b.n	800275e <round+0x82>
 800270c:	4d15      	ldr	r5, [pc, #84]	; (8002764 <round+0x88>)
 800270e:	4125      	asrs	r5, r4
 8002710:	ea01 0605 	and.w	r6, r1, r5
 8002714:	4332      	orrs	r2, r6
 8002716:	d00e      	beq.n	8002736 <round+0x5a>
 8002718:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800271c:	fa42 f404 	asr.w	r4, r2, r4
 8002720:	4423      	add	r3, r4
 8002722:	ea23 0305 	bic.w	r3, r3, r5
 8002726:	e7ef      	b.n	8002708 <round+0x2c>
 8002728:	2c33      	cmp	r4, #51	; 0x33
 800272a:	dd07      	ble.n	800273c <round+0x60>
 800272c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002730:	d101      	bne.n	8002736 <round+0x5a>
 8002732:	f7fd fd57 	bl	80001e4 <__adddf3>
 8002736:	ec41 0b10 	vmov	d0, r0, r1
 800273a:	bd70      	pop	{r4, r5, r6, pc}
 800273c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8002740:	f04f 35ff 	mov.w	r5, #4294967295
 8002744:	40f5      	lsrs	r5, r6
 8002746:	4228      	tst	r0, r5
 8002748:	d0f5      	beq.n	8002736 <round+0x5a>
 800274a:	2101      	movs	r1, #1
 800274c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8002750:	fa01 f404 	lsl.w	r4, r1, r4
 8002754:	1912      	adds	r2, r2, r4
 8002756:	bf28      	it	cs
 8002758:	185b      	addcs	r3, r3, r1
 800275a:	ea22 0105 	bic.w	r1, r2, r5
 800275e:	4608      	mov	r0, r1
 8002760:	4619      	mov	r1, r3
 8002762:	e7e8      	b.n	8002736 <round+0x5a>
 8002764:	000fffff 	.word	0x000fffff

08002768 <pow>:
 8002768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800276c:	ec59 8b10 	vmov	r8, r9, d0
 8002770:	ec57 6b11 	vmov	r6, r7, d1
 8002774:	f000 f8a8 	bl	80028c8 <__ieee754_pow>
 8002778:	4b4e      	ldr	r3, [pc, #312]	; (80028b4 <pow+0x14c>)
 800277a:	f993 3000 	ldrsb.w	r3, [r3]
 800277e:	3301      	adds	r3, #1
 8002780:	ec55 4b10 	vmov	r4, r5, d0
 8002784:	d015      	beq.n	80027b2 <pow+0x4a>
 8002786:	4632      	mov	r2, r6
 8002788:	463b      	mov	r3, r7
 800278a:	4630      	mov	r0, r6
 800278c:	4639      	mov	r1, r7
 800278e:	f7fe f979 	bl	8000a84 <__aeabi_dcmpun>
 8002792:	b970      	cbnz	r0, 80027b2 <pow+0x4a>
 8002794:	4642      	mov	r2, r8
 8002796:	464b      	mov	r3, r9
 8002798:	4640      	mov	r0, r8
 800279a:	4649      	mov	r1, r9
 800279c:	f7fe f972 	bl	8000a84 <__aeabi_dcmpun>
 80027a0:	2200      	movs	r2, #0
 80027a2:	2300      	movs	r3, #0
 80027a4:	b148      	cbz	r0, 80027ba <pow+0x52>
 80027a6:	4630      	mov	r0, r6
 80027a8:	4639      	mov	r1, r7
 80027aa:	f7fe f939 	bl	8000a20 <__aeabi_dcmpeq>
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d17d      	bne.n	80028ae <pow+0x146>
 80027b2:	ec45 4b10 	vmov	d0, r4, r5
 80027b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027ba:	4640      	mov	r0, r8
 80027bc:	4649      	mov	r1, r9
 80027be:	f7fe f92f 	bl	8000a20 <__aeabi_dcmpeq>
 80027c2:	b1e0      	cbz	r0, 80027fe <pow+0x96>
 80027c4:	2200      	movs	r2, #0
 80027c6:	2300      	movs	r3, #0
 80027c8:	4630      	mov	r0, r6
 80027ca:	4639      	mov	r1, r7
 80027cc:	f7fe f928 	bl	8000a20 <__aeabi_dcmpeq>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d16c      	bne.n	80028ae <pow+0x146>
 80027d4:	ec47 6b10 	vmov	d0, r6, r7
 80027d8:	f000 fe55 	bl	8003486 <finite>
 80027dc:	2800      	cmp	r0, #0
 80027de:	d0e8      	beq.n	80027b2 <pow+0x4a>
 80027e0:	2200      	movs	r2, #0
 80027e2:	2300      	movs	r3, #0
 80027e4:	4630      	mov	r0, r6
 80027e6:	4639      	mov	r1, r7
 80027e8:	f7fe f924 	bl	8000a34 <__aeabi_dcmplt>
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d0e0      	beq.n	80027b2 <pow+0x4a>
 80027f0:	f7ff ff42 	bl	8002678 <__errno>
 80027f4:	2321      	movs	r3, #33	; 0x21
 80027f6:	6003      	str	r3, [r0, #0]
 80027f8:	2400      	movs	r4, #0
 80027fa:	4d2f      	ldr	r5, [pc, #188]	; (80028b8 <pow+0x150>)
 80027fc:	e7d9      	b.n	80027b2 <pow+0x4a>
 80027fe:	ec45 4b10 	vmov	d0, r4, r5
 8002802:	f000 fe40 	bl	8003486 <finite>
 8002806:	bbb8      	cbnz	r0, 8002878 <pow+0x110>
 8002808:	ec49 8b10 	vmov	d0, r8, r9
 800280c:	f000 fe3b 	bl	8003486 <finite>
 8002810:	b390      	cbz	r0, 8002878 <pow+0x110>
 8002812:	ec47 6b10 	vmov	d0, r6, r7
 8002816:	f000 fe36 	bl	8003486 <finite>
 800281a:	b368      	cbz	r0, 8002878 <pow+0x110>
 800281c:	4622      	mov	r2, r4
 800281e:	462b      	mov	r3, r5
 8002820:	4620      	mov	r0, r4
 8002822:	4629      	mov	r1, r5
 8002824:	f7fe f92e 	bl	8000a84 <__aeabi_dcmpun>
 8002828:	b160      	cbz	r0, 8002844 <pow+0xdc>
 800282a:	f7ff ff25 	bl	8002678 <__errno>
 800282e:	2321      	movs	r3, #33	; 0x21
 8002830:	6003      	str	r3, [r0, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	2300      	movs	r3, #0
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f7fd ffb3 	bl	80007a4 <__aeabi_ddiv>
 800283e:	4604      	mov	r4, r0
 8002840:	460d      	mov	r5, r1
 8002842:	e7b6      	b.n	80027b2 <pow+0x4a>
 8002844:	f7ff ff18 	bl	8002678 <__errno>
 8002848:	2322      	movs	r3, #34	; 0x22
 800284a:	6003      	str	r3, [r0, #0]
 800284c:	2200      	movs	r2, #0
 800284e:	2300      	movs	r3, #0
 8002850:	4640      	mov	r0, r8
 8002852:	4649      	mov	r1, r9
 8002854:	f7fe f8ee 	bl	8000a34 <__aeabi_dcmplt>
 8002858:	2400      	movs	r4, #0
 800285a:	b158      	cbz	r0, 8002874 <pow+0x10c>
 800285c:	ec47 6b10 	vmov	d0, r6, r7
 8002860:	f000 fe26 	bl	80034b0 <rint>
 8002864:	4632      	mov	r2, r6
 8002866:	ec51 0b10 	vmov	r0, r1, d0
 800286a:	463b      	mov	r3, r7
 800286c:	f7fe f8d8 	bl	8000a20 <__aeabi_dcmpeq>
 8002870:	2800      	cmp	r0, #0
 8002872:	d0c2      	beq.n	80027fa <pow+0x92>
 8002874:	4d11      	ldr	r5, [pc, #68]	; (80028bc <pow+0x154>)
 8002876:	e79c      	b.n	80027b2 <pow+0x4a>
 8002878:	2200      	movs	r2, #0
 800287a:	2300      	movs	r3, #0
 800287c:	4620      	mov	r0, r4
 800287e:	4629      	mov	r1, r5
 8002880:	f7fe f8ce 	bl	8000a20 <__aeabi_dcmpeq>
 8002884:	2800      	cmp	r0, #0
 8002886:	d094      	beq.n	80027b2 <pow+0x4a>
 8002888:	ec49 8b10 	vmov	d0, r8, r9
 800288c:	f000 fdfb 	bl	8003486 <finite>
 8002890:	2800      	cmp	r0, #0
 8002892:	d08e      	beq.n	80027b2 <pow+0x4a>
 8002894:	ec47 6b10 	vmov	d0, r6, r7
 8002898:	f000 fdf5 	bl	8003486 <finite>
 800289c:	2800      	cmp	r0, #0
 800289e:	d088      	beq.n	80027b2 <pow+0x4a>
 80028a0:	f7ff feea 	bl	8002678 <__errno>
 80028a4:	2322      	movs	r3, #34	; 0x22
 80028a6:	6003      	str	r3, [r0, #0]
 80028a8:	2400      	movs	r4, #0
 80028aa:	2500      	movs	r5, #0
 80028ac:	e781      	b.n	80027b2 <pow+0x4a>
 80028ae:	4d04      	ldr	r5, [pc, #16]	; (80028c0 <pow+0x158>)
 80028b0:	2400      	movs	r4, #0
 80028b2:	e77e      	b.n	80027b2 <pow+0x4a>
 80028b4:	20000064 	.word	0x20000064
 80028b8:	fff00000 	.word	0xfff00000
 80028bc:	7ff00000 	.word	0x7ff00000
 80028c0:	3ff00000 	.word	0x3ff00000
 80028c4:	00000000 	.word	0x00000000

080028c8 <__ieee754_pow>:
 80028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028cc:	ed2d 8b06 	vpush	{d8-d10}
 80028d0:	b08d      	sub	sp, #52	; 0x34
 80028d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80028d6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80028da:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80028de:	ea56 0100 	orrs.w	r1, r6, r0
 80028e2:	ec53 2b10 	vmov	r2, r3, d0
 80028e6:	f000 84d1 	beq.w	800328c <__ieee754_pow+0x9c4>
 80028ea:	497f      	ldr	r1, [pc, #508]	; (8002ae8 <__ieee754_pow+0x220>)
 80028ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80028f0:	428c      	cmp	r4, r1
 80028f2:	ee10 8a10 	vmov	r8, s0
 80028f6:	4699      	mov	r9, r3
 80028f8:	dc09      	bgt.n	800290e <__ieee754_pow+0x46>
 80028fa:	d103      	bne.n	8002904 <__ieee754_pow+0x3c>
 80028fc:	b97a      	cbnz	r2, 800291e <__ieee754_pow+0x56>
 80028fe:	42a6      	cmp	r6, r4
 8002900:	dd02      	ble.n	8002908 <__ieee754_pow+0x40>
 8002902:	e00c      	b.n	800291e <__ieee754_pow+0x56>
 8002904:	428e      	cmp	r6, r1
 8002906:	dc02      	bgt.n	800290e <__ieee754_pow+0x46>
 8002908:	428e      	cmp	r6, r1
 800290a:	d110      	bne.n	800292e <__ieee754_pow+0x66>
 800290c:	b178      	cbz	r0, 800292e <__ieee754_pow+0x66>
 800290e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002912:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002916:	ea54 0308 	orrs.w	r3, r4, r8
 800291a:	f000 84b7 	beq.w	800328c <__ieee754_pow+0x9c4>
 800291e:	4873      	ldr	r0, [pc, #460]	; (8002aec <__ieee754_pow+0x224>)
 8002920:	b00d      	add	sp, #52	; 0x34
 8002922:	ecbd 8b06 	vpop	{d8-d10}
 8002926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800292a:	f000 bdb9 	b.w	80034a0 <nan>
 800292e:	f1b9 0f00 	cmp.w	r9, #0
 8002932:	da36      	bge.n	80029a2 <__ieee754_pow+0xda>
 8002934:	496e      	ldr	r1, [pc, #440]	; (8002af0 <__ieee754_pow+0x228>)
 8002936:	428e      	cmp	r6, r1
 8002938:	dc51      	bgt.n	80029de <__ieee754_pow+0x116>
 800293a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800293e:	428e      	cmp	r6, r1
 8002940:	f340 84af 	ble.w	80032a2 <__ieee754_pow+0x9da>
 8002944:	1531      	asrs	r1, r6, #20
 8002946:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800294a:	2914      	cmp	r1, #20
 800294c:	dd0f      	ble.n	800296e <__ieee754_pow+0xa6>
 800294e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8002952:	fa20 fc01 	lsr.w	ip, r0, r1
 8002956:	fa0c f101 	lsl.w	r1, ip, r1
 800295a:	4281      	cmp	r1, r0
 800295c:	f040 84a1 	bne.w	80032a2 <__ieee754_pow+0x9da>
 8002960:	f00c 0c01 	and.w	ip, ip, #1
 8002964:	f1cc 0102 	rsb	r1, ip, #2
 8002968:	9100      	str	r1, [sp, #0]
 800296a:	b180      	cbz	r0, 800298e <__ieee754_pow+0xc6>
 800296c:	e059      	b.n	8002a22 <__ieee754_pow+0x15a>
 800296e:	2800      	cmp	r0, #0
 8002970:	d155      	bne.n	8002a1e <__ieee754_pow+0x156>
 8002972:	f1c1 0114 	rsb	r1, r1, #20
 8002976:	fa46 fc01 	asr.w	ip, r6, r1
 800297a:	fa0c f101 	lsl.w	r1, ip, r1
 800297e:	42b1      	cmp	r1, r6
 8002980:	f040 848c 	bne.w	800329c <__ieee754_pow+0x9d4>
 8002984:	f00c 0c01 	and.w	ip, ip, #1
 8002988:	f1cc 0102 	rsb	r1, ip, #2
 800298c:	9100      	str	r1, [sp, #0]
 800298e:	4959      	ldr	r1, [pc, #356]	; (8002af4 <__ieee754_pow+0x22c>)
 8002990:	428e      	cmp	r6, r1
 8002992:	d12d      	bne.n	80029f0 <__ieee754_pow+0x128>
 8002994:	2f00      	cmp	r7, #0
 8002996:	da79      	bge.n	8002a8c <__ieee754_pow+0x1c4>
 8002998:	4956      	ldr	r1, [pc, #344]	; (8002af4 <__ieee754_pow+0x22c>)
 800299a:	2000      	movs	r0, #0
 800299c:	f7fd ff02 	bl	80007a4 <__aeabi_ddiv>
 80029a0:	e016      	b.n	80029d0 <__ieee754_pow+0x108>
 80029a2:	2100      	movs	r1, #0
 80029a4:	9100      	str	r1, [sp, #0]
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d13b      	bne.n	8002a22 <__ieee754_pow+0x15a>
 80029aa:	494f      	ldr	r1, [pc, #316]	; (8002ae8 <__ieee754_pow+0x220>)
 80029ac:	428e      	cmp	r6, r1
 80029ae:	d1ee      	bne.n	800298e <__ieee754_pow+0xc6>
 80029b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80029b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80029b8:	ea53 0308 	orrs.w	r3, r3, r8
 80029bc:	f000 8466 	beq.w	800328c <__ieee754_pow+0x9c4>
 80029c0:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <__ieee754_pow+0x230>)
 80029c2:	429c      	cmp	r4, r3
 80029c4:	dd0d      	ble.n	80029e2 <__ieee754_pow+0x11a>
 80029c6:	2f00      	cmp	r7, #0
 80029c8:	f280 8464 	bge.w	8003294 <__ieee754_pow+0x9cc>
 80029cc:	2000      	movs	r0, #0
 80029ce:	2100      	movs	r1, #0
 80029d0:	ec41 0b10 	vmov	d0, r0, r1
 80029d4:	b00d      	add	sp, #52	; 0x34
 80029d6:	ecbd 8b06 	vpop	{d8-d10}
 80029da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029de:	2102      	movs	r1, #2
 80029e0:	e7e0      	b.n	80029a4 <__ieee754_pow+0xdc>
 80029e2:	2f00      	cmp	r7, #0
 80029e4:	daf2      	bge.n	80029cc <__ieee754_pow+0x104>
 80029e6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80029ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80029ee:	e7ef      	b.n	80029d0 <__ieee754_pow+0x108>
 80029f0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80029f4:	d104      	bne.n	8002a00 <__ieee754_pow+0x138>
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7fd fda9 	bl	8000550 <__aeabi_dmul>
 80029fe:	e7e7      	b.n	80029d0 <__ieee754_pow+0x108>
 8002a00:	493e      	ldr	r1, [pc, #248]	; (8002afc <__ieee754_pow+0x234>)
 8002a02:	428f      	cmp	r7, r1
 8002a04:	d10d      	bne.n	8002a22 <__ieee754_pow+0x15a>
 8002a06:	f1b9 0f00 	cmp.w	r9, #0
 8002a0a:	db0a      	blt.n	8002a22 <__ieee754_pow+0x15a>
 8002a0c:	ec43 2b10 	vmov	d0, r2, r3
 8002a10:	b00d      	add	sp, #52	; 0x34
 8002a12:	ecbd 8b06 	vpop	{d8-d10}
 8002a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1a:	f000 bc77 	b.w	800330c <__ieee754_sqrt>
 8002a1e:	2100      	movs	r1, #0
 8002a20:	9100      	str	r1, [sp, #0]
 8002a22:	ec43 2b10 	vmov	d0, r2, r3
 8002a26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a2a:	f000 fd23 	bl	8003474 <fabs>
 8002a2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a32:	ec51 0b10 	vmov	r0, r1, d0
 8002a36:	f1b8 0f00 	cmp.w	r8, #0
 8002a3a:	d12a      	bne.n	8002a92 <__ieee754_pow+0x1ca>
 8002a3c:	b12c      	cbz	r4, 8002a4a <__ieee754_pow+0x182>
 8002a3e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8002af4 <__ieee754_pow+0x22c>
 8002a42:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8002a46:	45e6      	cmp	lr, ip
 8002a48:	d123      	bne.n	8002a92 <__ieee754_pow+0x1ca>
 8002a4a:	2f00      	cmp	r7, #0
 8002a4c:	da05      	bge.n	8002a5a <__ieee754_pow+0x192>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	2000      	movs	r0, #0
 8002a54:	4927      	ldr	r1, [pc, #156]	; (8002af4 <__ieee754_pow+0x22c>)
 8002a56:	f7fd fea5 	bl	80007a4 <__aeabi_ddiv>
 8002a5a:	f1b9 0f00 	cmp.w	r9, #0
 8002a5e:	dab7      	bge.n	80029d0 <__ieee754_pow+0x108>
 8002a60:	9b00      	ldr	r3, [sp, #0]
 8002a62:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002a66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002a6a:	4323      	orrs	r3, r4
 8002a6c:	d108      	bne.n	8002a80 <__ieee754_pow+0x1b8>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7fd fbb3 	bl	80001e0 <__aeabi_dsub>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	e78d      	b.n	800299c <__ieee754_pow+0xd4>
 8002a80:	9b00      	ldr	r3, [sp, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d1a4      	bne.n	80029d0 <__ieee754_pow+0x108>
 8002a86:	4602      	mov	r2, r0
 8002a88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	e79e      	b.n	80029d0 <__ieee754_pow+0x108>
 8002a92:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8002a96:	f10c 35ff 	add.w	r5, ip, #4294967295
 8002a9a:	950a      	str	r5, [sp, #40]	; 0x28
 8002a9c:	9d00      	ldr	r5, [sp, #0]
 8002a9e:	46ac      	mov	ip, r5
 8002aa0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002aa2:	ea5c 0505 	orrs.w	r5, ip, r5
 8002aa6:	d0e4      	beq.n	8002a72 <__ieee754_pow+0x1aa>
 8002aa8:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <__ieee754_pow+0x238>)
 8002aaa:	429e      	cmp	r6, r3
 8002aac:	f340 80fc 	ble.w	8002ca8 <__ieee754_pow+0x3e0>
 8002ab0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002ab4:	429e      	cmp	r6, r3
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <__ieee754_pow+0x230>)
 8002ab8:	dd07      	ble.n	8002aca <__ieee754_pow+0x202>
 8002aba:	429c      	cmp	r4, r3
 8002abc:	dc0a      	bgt.n	8002ad4 <__ieee754_pow+0x20c>
 8002abe:	2f00      	cmp	r7, #0
 8002ac0:	da84      	bge.n	80029cc <__ieee754_pow+0x104>
 8002ac2:	a307      	add	r3, pc, #28	; (adr r3, 8002ae0 <__ieee754_pow+0x218>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	e795      	b.n	80029f6 <__ieee754_pow+0x12e>
 8002aca:	429c      	cmp	r4, r3
 8002acc:	dbf7      	blt.n	8002abe <__ieee754_pow+0x1f6>
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <__ieee754_pow+0x22c>)
 8002ad0:	429c      	cmp	r4, r3
 8002ad2:	dd17      	ble.n	8002b04 <__ieee754_pow+0x23c>
 8002ad4:	2f00      	cmp	r7, #0
 8002ad6:	dcf4      	bgt.n	8002ac2 <__ieee754_pow+0x1fa>
 8002ad8:	e778      	b.n	80029cc <__ieee754_pow+0x104>
 8002ada:	bf00      	nop
 8002adc:	f3af 8000 	nop.w
 8002ae0:	8800759c 	.word	0x8800759c
 8002ae4:	7e37e43c 	.word	0x7e37e43c
 8002ae8:	7ff00000 	.word	0x7ff00000
 8002aec:	080036f3 	.word	0x080036f3
 8002af0:	433fffff 	.word	0x433fffff
 8002af4:	3ff00000 	.word	0x3ff00000
 8002af8:	3fefffff 	.word	0x3fefffff
 8002afc:	3fe00000 	.word	0x3fe00000
 8002b00:	41e00000 	.word	0x41e00000
 8002b04:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <__ieee754_pow+0x3d0>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	f7fd fb6a 	bl	80001e0 <__aeabi_dsub>
 8002b0c:	a356      	add	r3, pc, #344	; (adr r3, 8002c68 <__ieee754_pow+0x3a0>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	4604      	mov	r4, r0
 8002b14:	460d      	mov	r5, r1
 8002b16:	f7fd fd1b 	bl	8000550 <__aeabi_dmul>
 8002b1a:	a355      	add	r3, pc, #340	; (adr r3, 8002c70 <__ieee754_pow+0x3a8>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	4606      	mov	r6, r0
 8002b22:	460f      	mov	r7, r1
 8002b24:	4620      	mov	r0, r4
 8002b26:	4629      	mov	r1, r5
 8002b28:	f7fd fd12 	bl	8000550 <__aeabi_dmul>
 8002b2c:	4b5b      	ldr	r3, [pc, #364]	; (8002c9c <__ieee754_pow+0x3d4>)
 8002b2e:	4682      	mov	sl, r0
 8002b30:	468b      	mov	fp, r1
 8002b32:	2200      	movs	r2, #0
 8002b34:	4620      	mov	r0, r4
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7fd fd0a 	bl	8000550 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	a14d      	add	r1, pc, #308	; (adr r1, 8002c78 <__ieee754_pow+0x3b0>)
 8002b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b46:	f7fd fb4b 	bl	80001e0 <__aeabi_dsub>
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	462b      	mov	r3, r5
 8002b4e:	f7fd fcff 	bl	8000550 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	2000      	movs	r0, #0
 8002b58:	4951      	ldr	r1, [pc, #324]	; (8002ca0 <__ieee754_pow+0x3d8>)
 8002b5a:	f7fd fb41 	bl	80001e0 <__aeabi_dsub>
 8002b5e:	4622      	mov	r2, r4
 8002b60:	4680      	mov	r8, r0
 8002b62:	4689      	mov	r9, r1
 8002b64:	462b      	mov	r3, r5
 8002b66:	4620      	mov	r0, r4
 8002b68:	4629      	mov	r1, r5
 8002b6a:	f7fd fcf1 	bl	8000550 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4640      	mov	r0, r8
 8002b74:	4649      	mov	r1, r9
 8002b76:	f7fd fceb 	bl	8000550 <__aeabi_dmul>
 8002b7a:	a341      	add	r3, pc, #260	; (adr r3, 8002c80 <__ieee754_pow+0x3b8>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f7fd fce6 	bl	8000550 <__aeabi_dmul>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4650      	mov	r0, sl
 8002b8a:	4659      	mov	r1, fp
 8002b8c:	f7fd fb28 	bl	80001e0 <__aeabi_dsub>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4680      	mov	r8, r0
 8002b96:	4689      	mov	r9, r1
 8002b98:	4630      	mov	r0, r6
 8002b9a:	4639      	mov	r1, r7
 8002b9c:	f7fd fb22 	bl	80001e4 <__adddf3>
 8002ba0:	2400      	movs	r4, #0
 8002ba2:	4632      	mov	r2, r6
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	460d      	mov	r5, r1
 8002baa:	f7fd fb19 	bl	80001e0 <__aeabi_dsub>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	f7fd fb13 	bl	80001e0 <__aeabi_dsub>
 8002bba:	9b00      	ldr	r3, [sp, #0]
 8002bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	4682      	mov	sl, r0
 8002bc4:	468b      	mov	fp, r1
 8002bc6:	f040 81f1 	bne.w	8002fac <__ieee754_pow+0x6e4>
 8002bca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8002c88 <__ieee754_pow+0x3c0>
 8002bce:	eeb0 8a47 	vmov.f32	s16, s14
 8002bd2:	eef0 8a67 	vmov.f32	s17, s15
 8002bd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002bda:	2600      	movs	r6, #0
 8002bdc:	4632      	mov	r2, r6
 8002bde:	463b      	mov	r3, r7
 8002be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002be4:	f7fd fafc 	bl	80001e0 <__aeabi_dsub>
 8002be8:	4622      	mov	r2, r4
 8002bea:	462b      	mov	r3, r5
 8002bec:	f7fd fcb0 	bl	8000550 <__aeabi_dmul>
 8002bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	4689      	mov	r9, r1
 8002bf8:	4650      	mov	r0, sl
 8002bfa:	4659      	mov	r1, fp
 8002bfc:	f7fd fca8 	bl	8000550 <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4640      	mov	r0, r8
 8002c06:	4649      	mov	r1, r9
 8002c08:	f7fd faec 	bl	80001e4 <__adddf3>
 8002c0c:	4632      	mov	r2, r6
 8002c0e:	463b      	mov	r3, r7
 8002c10:	4680      	mov	r8, r0
 8002c12:	4689      	mov	r9, r1
 8002c14:	4620      	mov	r0, r4
 8002c16:	4629      	mov	r1, r5
 8002c18:	f7fd fc9a 	bl	8000550 <__aeabi_dmul>
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4604      	mov	r4, r0
 8002c20:	460d      	mov	r5, r1
 8002c22:	4602      	mov	r2, r0
 8002c24:	4649      	mov	r1, r9
 8002c26:	4640      	mov	r0, r8
 8002c28:	f7fd fadc 	bl	80001e4 <__adddf3>
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <__ieee754_pow+0x3dc>)
 8002c2e:	4299      	cmp	r1, r3
 8002c30:	ec45 4b19 	vmov	d9, r4, r5
 8002c34:	4606      	mov	r6, r0
 8002c36:	460f      	mov	r7, r1
 8002c38:	468b      	mov	fp, r1
 8002c3a:	f340 82fe 	ble.w	800323a <__ieee754_pow+0x972>
 8002c3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002c42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002c46:	4303      	orrs	r3, r0
 8002c48:	f000 81f0 	beq.w	800302c <__ieee754_pow+0x764>
 8002c4c:	a310      	add	r3, pc, #64	; (adr r3, 8002c90 <__ieee754_pow+0x3c8>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	ec51 0b18 	vmov	r0, r1, d8
 8002c56:	f7fd fc7b 	bl	8000550 <__aeabi_dmul>
 8002c5a:	a30d      	add	r3, pc, #52	; (adr r3, 8002c90 <__ieee754_pow+0x3c8>)
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	e6cb      	b.n	80029fa <__ieee754_pow+0x132>
 8002c62:	bf00      	nop
 8002c64:	f3af 8000 	nop.w
 8002c68:	60000000 	.word	0x60000000
 8002c6c:	3ff71547 	.word	0x3ff71547
 8002c70:	f85ddf44 	.word	0xf85ddf44
 8002c74:	3e54ae0b 	.word	0x3e54ae0b
 8002c78:	55555555 	.word	0x55555555
 8002c7c:	3fd55555 	.word	0x3fd55555
 8002c80:	652b82fe 	.word	0x652b82fe
 8002c84:	3ff71547 	.word	0x3ff71547
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	bff00000 	.word	0xbff00000
 8002c90:	8800759c 	.word	0x8800759c
 8002c94:	7e37e43c 	.word	0x7e37e43c
 8002c98:	3ff00000 	.word	0x3ff00000
 8002c9c:	3fd00000 	.word	0x3fd00000
 8002ca0:	3fe00000 	.word	0x3fe00000
 8002ca4:	408fffff 	.word	0x408fffff
 8002ca8:	4bd7      	ldr	r3, [pc, #860]	; (8003008 <__ieee754_pow+0x740>)
 8002caa:	ea03 0309 	and.w	r3, r3, r9
 8002cae:	2200      	movs	r2, #0
 8002cb0:	b92b      	cbnz	r3, 8002cbe <__ieee754_pow+0x3f6>
 8002cb2:	4bd6      	ldr	r3, [pc, #856]	; (800300c <__ieee754_pow+0x744>)
 8002cb4:	f7fd fc4c 	bl	8000550 <__aeabi_dmul>
 8002cb8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	1523      	asrs	r3, r4, #20
 8002cc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002cc4:	4413      	add	r3, r2
 8002cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc8:	4bd1      	ldr	r3, [pc, #836]	; (8003010 <__ieee754_pow+0x748>)
 8002cca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002cce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002cd2:	429c      	cmp	r4, r3
 8002cd4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002cd8:	dd08      	ble.n	8002cec <__ieee754_pow+0x424>
 8002cda:	4bce      	ldr	r3, [pc, #824]	; (8003014 <__ieee754_pow+0x74c>)
 8002cdc:	429c      	cmp	r4, r3
 8002cde:	f340 8163 	ble.w	8002fa8 <__ieee754_pow+0x6e0>
 8002ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002cec:	2400      	movs	r4, #0
 8002cee:	00e3      	lsls	r3, r4, #3
 8002cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cf2:	4bc9      	ldr	r3, [pc, #804]	; (8003018 <__ieee754_pow+0x750>)
 8002cf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002cf8:	ed93 7b00 	vldr	d7, [r3]
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	ec53 2b17 	vmov	r2, r3, d7
 8002d02:	eeb0 8a47 	vmov.f32	s16, s14
 8002d06:	eef0 8a67 	vmov.f32	s17, s15
 8002d0a:	4682      	mov	sl, r0
 8002d0c:	f7fd fa68 	bl	80001e0 <__aeabi_dsub>
 8002d10:	4652      	mov	r2, sl
 8002d12:	4606      	mov	r6, r0
 8002d14:	460f      	mov	r7, r1
 8002d16:	462b      	mov	r3, r5
 8002d18:	ec51 0b18 	vmov	r0, r1, d8
 8002d1c:	f7fd fa62 	bl	80001e4 <__adddf3>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	2000      	movs	r0, #0
 8002d26:	49bd      	ldr	r1, [pc, #756]	; (800301c <__ieee754_pow+0x754>)
 8002d28:	f7fd fd3c 	bl	80007a4 <__aeabi_ddiv>
 8002d2c:	ec41 0b19 	vmov	d9, r0, r1
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4630      	mov	r0, r6
 8002d36:	4639      	mov	r1, r7
 8002d38:	f7fd fc0a 	bl	8000550 <__aeabi_dmul>
 8002d3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002d40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002d44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	9304      	str	r3, [sp, #16]
 8002d4c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002d50:	46ab      	mov	fp, r5
 8002d52:	106d      	asrs	r5, r5, #1
 8002d54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002d58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002d5c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8002d60:	2200      	movs	r2, #0
 8002d62:	4640      	mov	r0, r8
 8002d64:	4649      	mov	r1, r9
 8002d66:	4614      	mov	r4, r2
 8002d68:	461d      	mov	r5, r3
 8002d6a:	f7fd fbf1 	bl	8000550 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4630      	mov	r0, r6
 8002d74:	4639      	mov	r1, r7
 8002d76:	f7fd fa33 	bl	80001e0 <__aeabi_dsub>
 8002d7a:	ec53 2b18 	vmov	r2, r3, d8
 8002d7e:	4606      	mov	r6, r0
 8002d80:	460f      	mov	r7, r1
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7fd fa2b 	bl	80001e0 <__aeabi_dsub>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4650      	mov	r0, sl
 8002d90:	4659      	mov	r1, fp
 8002d92:	f7fd fa25 	bl	80001e0 <__aeabi_dsub>
 8002d96:	4642      	mov	r2, r8
 8002d98:	464b      	mov	r3, r9
 8002d9a:	f7fd fbd9 	bl	8000550 <__aeabi_dmul>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4630      	mov	r0, r6
 8002da4:	4639      	mov	r1, r7
 8002da6:	f7fd fa1b 	bl	80001e0 <__aeabi_dsub>
 8002daa:	ec53 2b19 	vmov	r2, r3, d9
 8002dae:	f7fd fbcf 	bl	8000550 <__aeabi_dmul>
 8002db2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002db6:	ec41 0b18 	vmov	d8, r0, r1
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f7fd fbc7 	bl	8000550 <__aeabi_dmul>
 8002dc2:	a37d      	add	r3, pc, #500	; (adr r3, 8002fb8 <__ieee754_pow+0x6f0>)
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	4604      	mov	r4, r0
 8002dca:	460d      	mov	r5, r1
 8002dcc:	f7fd fbc0 	bl	8000550 <__aeabi_dmul>
 8002dd0:	a37b      	add	r3, pc, #492	; (adr r3, 8002fc0 <__ieee754_pow+0x6f8>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fa05 	bl	80001e4 <__adddf3>
 8002dda:	4622      	mov	r2, r4
 8002ddc:	462b      	mov	r3, r5
 8002dde:	f7fd fbb7 	bl	8000550 <__aeabi_dmul>
 8002de2:	a379      	add	r3, pc, #484	; (adr r3, 8002fc8 <__ieee754_pow+0x700>)
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f7fd f9fc 	bl	80001e4 <__adddf3>
 8002dec:	4622      	mov	r2, r4
 8002dee:	462b      	mov	r3, r5
 8002df0:	f7fd fbae 	bl	8000550 <__aeabi_dmul>
 8002df4:	a376      	add	r3, pc, #472	; (adr r3, 8002fd0 <__ieee754_pow+0x708>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f7fd f9f3 	bl	80001e4 <__adddf3>
 8002dfe:	4622      	mov	r2, r4
 8002e00:	462b      	mov	r3, r5
 8002e02:	f7fd fba5 	bl	8000550 <__aeabi_dmul>
 8002e06:	a374      	add	r3, pc, #464	; (adr r3, 8002fd8 <__ieee754_pow+0x710>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f7fd f9ea 	bl	80001e4 <__adddf3>
 8002e10:	4622      	mov	r2, r4
 8002e12:	462b      	mov	r3, r5
 8002e14:	f7fd fb9c 	bl	8000550 <__aeabi_dmul>
 8002e18:	a371      	add	r3, pc, #452	; (adr r3, 8002fe0 <__ieee754_pow+0x718>)
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f7fd f9e1 	bl	80001e4 <__adddf3>
 8002e22:	4622      	mov	r2, r4
 8002e24:	4606      	mov	r6, r0
 8002e26:	460f      	mov	r7, r1
 8002e28:	462b      	mov	r3, r5
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd fb8f 	bl	8000550 <__aeabi_dmul>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4630      	mov	r0, r6
 8002e38:	4639      	mov	r1, r7
 8002e3a:	f7fd fb89 	bl	8000550 <__aeabi_dmul>
 8002e3e:	4642      	mov	r2, r8
 8002e40:	4604      	mov	r4, r0
 8002e42:	460d      	mov	r5, r1
 8002e44:	464b      	mov	r3, r9
 8002e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e4a:	f7fd f9cb 	bl	80001e4 <__adddf3>
 8002e4e:	ec53 2b18 	vmov	r2, r3, d8
 8002e52:	f7fd fb7d 	bl	8000550 <__aeabi_dmul>
 8002e56:	4622      	mov	r2, r4
 8002e58:	462b      	mov	r3, r5
 8002e5a:	f7fd f9c3 	bl	80001e4 <__adddf3>
 8002e5e:	4642      	mov	r2, r8
 8002e60:	4682      	mov	sl, r0
 8002e62:	468b      	mov	fp, r1
 8002e64:	464b      	mov	r3, r9
 8002e66:	4640      	mov	r0, r8
 8002e68:	4649      	mov	r1, r9
 8002e6a:	f7fd fb71 	bl	8000550 <__aeabi_dmul>
 8002e6e:	4b6c      	ldr	r3, [pc, #432]	; (8003020 <__ieee754_pow+0x758>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	4606      	mov	r6, r0
 8002e74:	460f      	mov	r7, r1
 8002e76:	f7fd f9b5 	bl	80001e4 <__adddf3>
 8002e7a:	4652      	mov	r2, sl
 8002e7c:	465b      	mov	r3, fp
 8002e7e:	f7fd f9b1 	bl	80001e4 <__adddf3>
 8002e82:	9c04      	ldr	r4, [sp, #16]
 8002e84:	460d      	mov	r5, r1
 8002e86:	4622      	mov	r2, r4
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4640      	mov	r0, r8
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	f7fd fb5f 	bl	8000550 <__aeabi_dmul>
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <__ieee754_pow+0x758>)
 8002e94:	4680      	mov	r8, r0
 8002e96:	4689      	mov	r9, r1
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	f7fd f99f 	bl	80001e0 <__aeabi_dsub>
 8002ea2:	4632      	mov	r2, r6
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	f7fd f99b 	bl	80001e0 <__aeabi_dsub>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4650      	mov	r0, sl
 8002eb0:	4659      	mov	r1, fp
 8002eb2:	f7fd f995 	bl	80001e0 <__aeabi_dsub>
 8002eb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002eba:	f7fd fb49 	bl	8000550 <__aeabi_dmul>
 8002ebe:	4622      	mov	r2, r4
 8002ec0:	4606      	mov	r6, r0
 8002ec2:	460f      	mov	r7, r1
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	ec51 0b18 	vmov	r0, r1, d8
 8002eca:	f7fd fb41 	bl	8000550 <__aeabi_dmul>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	4639      	mov	r1, r7
 8002ed6:	f7fd f985 	bl	80001e4 <__adddf3>
 8002eda:	4606      	mov	r6, r0
 8002edc:	460f      	mov	r7, r1
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4640      	mov	r0, r8
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	f7fd f97d 	bl	80001e4 <__adddf3>
 8002eea:	9c04      	ldr	r4, [sp, #16]
 8002eec:	a33e      	add	r3, pc, #248	; (adr r3, 8002fe8 <__ieee754_pow+0x720>)
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	460d      	mov	r5, r1
 8002ef6:	f7fd fb2b 	bl	8000550 <__aeabi_dmul>
 8002efa:	4642      	mov	r2, r8
 8002efc:	ec41 0b18 	vmov	d8, r0, r1
 8002f00:	464b      	mov	r3, r9
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd f96b 	bl	80001e0 <__aeabi_dsub>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4630      	mov	r0, r6
 8002f10:	4639      	mov	r1, r7
 8002f12:	f7fd f965 	bl	80001e0 <__aeabi_dsub>
 8002f16:	a336      	add	r3, pc, #216	; (adr r3, 8002ff0 <__ieee754_pow+0x728>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	f7fd fb18 	bl	8000550 <__aeabi_dmul>
 8002f20:	a335      	add	r3, pc, #212	; (adr r3, 8002ff8 <__ieee754_pow+0x730>)
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	4606      	mov	r6, r0
 8002f28:	460f      	mov	r7, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd fb0f 	bl	8000550 <__aeabi_dmul>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4630      	mov	r0, r6
 8002f38:	4639      	mov	r1, r7
 8002f3a:	f7fd f953 	bl	80001e4 <__adddf3>
 8002f3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f40:	4b38      	ldr	r3, [pc, #224]	; (8003024 <__ieee754_pow+0x75c>)
 8002f42:	4413      	add	r3, r2
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd f94c 	bl	80001e4 <__adddf3>
 8002f4c:	4682      	mov	sl, r0
 8002f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f50:	468b      	mov	fp, r1
 8002f52:	f7fd fa93 	bl	800047c <__aeabi_i2d>
 8002f56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f58:	4b33      	ldr	r3, [pc, #204]	; (8003028 <__ieee754_pow+0x760>)
 8002f5a:	4413      	add	r3, r2
 8002f5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f60:	4606      	mov	r6, r0
 8002f62:	460f      	mov	r7, r1
 8002f64:	4652      	mov	r2, sl
 8002f66:	465b      	mov	r3, fp
 8002f68:	ec51 0b18 	vmov	r0, r1, d8
 8002f6c:	f7fd f93a 	bl	80001e4 <__adddf3>
 8002f70:	4642      	mov	r2, r8
 8002f72:	464b      	mov	r3, r9
 8002f74:	f7fd f936 	bl	80001e4 <__adddf3>
 8002f78:	4632      	mov	r2, r6
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	f7fd f932 	bl	80001e4 <__adddf3>
 8002f80:	9c04      	ldr	r4, [sp, #16]
 8002f82:	4632      	mov	r2, r6
 8002f84:	463b      	mov	r3, r7
 8002f86:	4620      	mov	r0, r4
 8002f88:	460d      	mov	r5, r1
 8002f8a:	f7fd f929 	bl	80001e0 <__aeabi_dsub>
 8002f8e:	4642      	mov	r2, r8
 8002f90:	464b      	mov	r3, r9
 8002f92:	f7fd f925 	bl	80001e0 <__aeabi_dsub>
 8002f96:	ec53 2b18 	vmov	r2, r3, d8
 8002f9a:	f7fd f921 	bl	80001e0 <__aeabi_dsub>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4650      	mov	r0, sl
 8002fa4:	4659      	mov	r1, fp
 8002fa6:	e606      	b.n	8002bb6 <__ieee754_pow+0x2ee>
 8002fa8:	2401      	movs	r4, #1
 8002faa:	e6a0      	b.n	8002cee <__ieee754_pow+0x426>
 8002fac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8003000 <__ieee754_pow+0x738>
 8002fb0:	e60d      	b.n	8002bce <__ieee754_pow+0x306>
 8002fb2:	bf00      	nop
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	4a454eef 	.word	0x4a454eef
 8002fbc:	3fca7e28 	.word	0x3fca7e28
 8002fc0:	93c9db65 	.word	0x93c9db65
 8002fc4:	3fcd864a 	.word	0x3fcd864a
 8002fc8:	a91d4101 	.word	0xa91d4101
 8002fcc:	3fd17460 	.word	0x3fd17460
 8002fd0:	518f264d 	.word	0x518f264d
 8002fd4:	3fd55555 	.word	0x3fd55555
 8002fd8:	db6fabff 	.word	0xdb6fabff
 8002fdc:	3fdb6db6 	.word	0x3fdb6db6
 8002fe0:	33333303 	.word	0x33333303
 8002fe4:	3fe33333 	.word	0x3fe33333
 8002fe8:	e0000000 	.word	0xe0000000
 8002fec:	3feec709 	.word	0x3feec709
 8002ff0:	dc3a03fd 	.word	0xdc3a03fd
 8002ff4:	3feec709 	.word	0x3feec709
 8002ff8:	145b01f5 	.word	0x145b01f5
 8002ffc:	be3e2fe0 	.word	0xbe3e2fe0
 8003000:	00000000 	.word	0x00000000
 8003004:	3ff00000 	.word	0x3ff00000
 8003008:	7ff00000 	.word	0x7ff00000
 800300c:	43400000 	.word	0x43400000
 8003010:	0003988e 	.word	0x0003988e
 8003014:	000bb679 	.word	0x000bb679
 8003018:	080036f8 	.word	0x080036f8
 800301c:	3ff00000 	.word	0x3ff00000
 8003020:	40080000 	.word	0x40080000
 8003024:	08003718 	.word	0x08003718
 8003028:	08003708 	.word	0x08003708
 800302c:	a3b5      	add	r3, pc, #724	; (adr r3, 8003304 <__ieee754_pow+0xa3c>)
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	4640      	mov	r0, r8
 8003034:	4649      	mov	r1, r9
 8003036:	f7fd f8d5 	bl	80001e4 <__adddf3>
 800303a:	4622      	mov	r2, r4
 800303c:	ec41 0b1a 	vmov	d10, r0, r1
 8003040:	462b      	mov	r3, r5
 8003042:	4630      	mov	r0, r6
 8003044:	4639      	mov	r1, r7
 8003046:	f7fd f8cb 	bl	80001e0 <__aeabi_dsub>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	ec51 0b1a 	vmov	r0, r1, d10
 8003052:	f7fd fd0d 	bl	8000a70 <__aeabi_dcmpgt>
 8003056:	2800      	cmp	r0, #0
 8003058:	f47f adf8 	bne.w	8002c4c <__ieee754_pow+0x384>
 800305c:	4aa4      	ldr	r2, [pc, #656]	; (80032f0 <__ieee754_pow+0xa28>)
 800305e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003062:	4293      	cmp	r3, r2
 8003064:	f340 810b 	ble.w	800327e <__ieee754_pow+0x9b6>
 8003068:	151b      	asrs	r3, r3, #20
 800306a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800306e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003072:	fa4a f303 	asr.w	r3, sl, r3
 8003076:	445b      	add	r3, fp
 8003078:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800307c:	4e9d      	ldr	r6, [pc, #628]	; (80032f4 <__ieee754_pow+0xa2c>)
 800307e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003082:	4116      	asrs	r6, r2
 8003084:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003088:	2000      	movs	r0, #0
 800308a:	ea23 0106 	bic.w	r1, r3, r6
 800308e:	f1c2 0214 	rsb	r2, r2, #20
 8003092:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003096:	fa4a fa02 	asr.w	sl, sl, r2
 800309a:	f1bb 0f00 	cmp.w	fp, #0
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	bfb8      	it	lt
 80030a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80030ac:	f7fd f898 	bl	80001e0 <__aeabi_dsub>
 80030b0:	ec41 0b19 	vmov	d9, r0, r1
 80030b4:	4642      	mov	r2, r8
 80030b6:	464b      	mov	r3, r9
 80030b8:	ec51 0b19 	vmov	r0, r1, d9
 80030bc:	f7fd f892 	bl	80001e4 <__adddf3>
 80030c0:	2400      	movs	r4, #0
 80030c2:	a379      	add	r3, pc, #484	; (adr r3, 80032a8 <__ieee754_pow+0x9e0>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	4620      	mov	r0, r4
 80030ca:	460d      	mov	r5, r1
 80030cc:	f7fd fa40 	bl	8000550 <__aeabi_dmul>
 80030d0:	ec53 2b19 	vmov	r2, r3, d9
 80030d4:	4606      	mov	r6, r0
 80030d6:	460f      	mov	r7, r1
 80030d8:	4620      	mov	r0, r4
 80030da:	4629      	mov	r1, r5
 80030dc:	f7fd f880 	bl	80001e0 <__aeabi_dsub>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4640      	mov	r0, r8
 80030e6:	4649      	mov	r1, r9
 80030e8:	f7fd f87a 	bl	80001e0 <__aeabi_dsub>
 80030ec:	a370      	add	r3, pc, #448	; (adr r3, 80032b0 <__ieee754_pow+0x9e8>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f7fd fa2d 	bl	8000550 <__aeabi_dmul>
 80030f6:	a370      	add	r3, pc, #448	; (adr r3, 80032b8 <__ieee754_pow+0x9f0>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	4680      	mov	r8, r0
 80030fe:	4689      	mov	r9, r1
 8003100:	4620      	mov	r0, r4
 8003102:	4629      	mov	r1, r5
 8003104:	f7fd fa24 	bl	8000550 <__aeabi_dmul>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4640      	mov	r0, r8
 800310e:	4649      	mov	r1, r9
 8003110:	f7fd f868 	bl	80001e4 <__adddf3>
 8003114:	4604      	mov	r4, r0
 8003116:	460d      	mov	r5, r1
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4630      	mov	r0, r6
 800311e:	4639      	mov	r1, r7
 8003120:	f7fd f860 	bl	80001e4 <__adddf3>
 8003124:	4632      	mov	r2, r6
 8003126:	463b      	mov	r3, r7
 8003128:	4680      	mov	r8, r0
 800312a:	4689      	mov	r9, r1
 800312c:	f7fd f858 	bl	80001e0 <__aeabi_dsub>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4620      	mov	r0, r4
 8003136:	4629      	mov	r1, r5
 8003138:	f7fd f852 	bl	80001e0 <__aeabi_dsub>
 800313c:	4642      	mov	r2, r8
 800313e:	4606      	mov	r6, r0
 8003140:	460f      	mov	r7, r1
 8003142:	464b      	mov	r3, r9
 8003144:	4640      	mov	r0, r8
 8003146:	4649      	mov	r1, r9
 8003148:	f7fd fa02 	bl	8000550 <__aeabi_dmul>
 800314c:	a35c      	add	r3, pc, #368	; (adr r3, 80032c0 <__ieee754_pow+0x9f8>)
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	4604      	mov	r4, r0
 8003154:	460d      	mov	r5, r1
 8003156:	f7fd f9fb 	bl	8000550 <__aeabi_dmul>
 800315a:	a35b      	add	r3, pc, #364	; (adr r3, 80032c8 <__ieee754_pow+0xa00>)
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f7fd f83e 	bl	80001e0 <__aeabi_dsub>
 8003164:	4622      	mov	r2, r4
 8003166:	462b      	mov	r3, r5
 8003168:	f7fd f9f2 	bl	8000550 <__aeabi_dmul>
 800316c:	a358      	add	r3, pc, #352	; (adr r3, 80032d0 <__ieee754_pow+0xa08>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f7fd f837 	bl	80001e4 <__adddf3>
 8003176:	4622      	mov	r2, r4
 8003178:	462b      	mov	r3, r5
 800317a:	f7fd f9e9 	bl	8000550 <__aeabi_dmul>
 800317e:	a356      	add	r3, pc, #344	; (adr r3, 80032d8 <__ieee754_pow+0xa10>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f7fd f82c 	bl	80001e0 <__aeabi_dsub>
 8003188:	4622      	mov	r2, r4
 800318a:	462b      	mov	r3, r5
 800318c:	f7fd f9e0 	bl	8000550 <__aeabi_dmul>
 8003190:	a353      	add	r3, pc, #332	; (adr r3, 80032e0 <__ieee754_pow+0xa18>)
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f7fd f825 	bl	80001e4 <__adddf3>
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	f7fd f9d7 	bl	8000550 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4640      	mov	r0, r8
 80031a8:	4649      	mov	r1, r9
 80031aa:	f7fd f819 	bl	80001e0 <__aeabi_dsub>
 80031ae:	4604      	mov	r4, r0
 80031b0:	460d      	mov	r5, r1
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4640      	mov	r0, r8
 80031b8:	4649      	mov	r1, r9
 80031ba:	f7fd f9c9 	bl	8000550 <__aeabi_dmul>
 80031be:	2200      	movs	r2, #0
 80031c0:	ec41 0b19 	vmov	d9, r0, r1
 80031c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031c8:	4620      	mov	r0, r4
 80031ca:	4629      	mov	r1, r5
 80031cc:	f7fd f808 	bl	80001e0 <__aeabi_dsub>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	ec51 0b19 	vmov	r0, r1, d9
 80031d8:	f7fd fae4 	bl	80007a4 <__aeabi_ddiv>
 80031dc:	4632      	mov	r2, r6
 80031de:	4604      	mov	r4, r0
 80031e0:	460d      	mov	r5, r1
 80031e2:	463b      	mov	r3, r7
 80031e4:	4640      	mov	r0, r8
 80031e6:	4649      	mov	r1, r9
 80031e8:	f7fd f9b2 	bl	8000550 <__aeabi_dmul>
 80031ec:	4632      	mov	r2, r6
 80031ee:	463b      	mov	r3, r7
 80031f0:	f7fc fff8 	bl	80001e4 <__adddf3>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fc fff0 	bl	80001e0 <__aeabi_dsub>
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	f7fc ffec 	bl	80001e0 <__aeabi_dsub>
 8003208:	460b      	mov	r3, r1
 800320a:	4602      	mov	r2, r0
 800320c:	493a      	ldr	r1, [pc, #232]	; (80032f8 <__ieee754_pow+0xa30>)
 800320e:	2000      	movs	r0, #0
 8003210:	f7fc ffe6 	bl	80001e0 <__aeabi_dsub>
 8003214:	e9cd 0100 	strd	r0, r1, [sp]
 8003218:	9b01      	ldr	r3, [sp, #4]
 800321a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800321e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003222:	da2f      	bge.n	8003284 <__ieee754_pow+0x9bc>
 8003224:	4650      	mov	r0, sl
 8003226:	ed9d 0b00 	vldr	d0, [sp]
 800322a:	f000 f9cd 	bl	80035c8 <scalbn>
 800322e:	ec51 0b10 	vmov	r0, r1, d0
 8003232:	ec53 2b18 	vmov	r2, r3, d8
 8003236:	f7ff bbe0 	b.w	80029fa <__ieee754_pow+0x132>
 800323a:	4b30      	ldr	r3, [pc, #192]	; (80032fc <__ieee754_pow+0xa34>)
 800323c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003240:	429e      	cmp	r6, r3
 8003242:	f77f af0b 	ble.w	800305c <__ieee754_pow+0x794>
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <__ieee754_pow+0xa38>)
 8003248:	440b      	add	r3, r1
 800324a:	4303      	orrs	r3, r0
 800324c:	d00b      	beq.n	8003266 <__ieee754_pow+0x99e>
 800324e:	a326      	add	r3, pc, #152	; (adr r3, 80032e8 <__ieee754_pow+0xa20>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	ec51 0b18 	vmov	r0, r1, d8
 8003258:	f7fd f97a 	bl	8000550 <__aeabi_dmul>
 800325c:	a322      	add	r3, pc, #136	; (adr r3, 80032e8 <__ieee754_pow+0xa20>)
 800325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003262:	f7ff bbca 	b.w	80029fa <__ieee754_pow+0x132>
 8003266:	4622      	mov	r2, r4
 8003268:	462b      	mov	r3, r5
 800326a:	f7fc ffb9 	bl	80001e0 <__aeabi_dsub>
 800326e:	4642      	mov	r2, r8
 8003270:	464b      	mov	r3, r9
 8003272:	f7fd fbf3 	bl	8000a5c <__aeabi_dcmpge>
 8003276:	2800      	cmp	r0, #0
 8003278:	f43f aef0 	beq.w	800305c <__ieee754_pow+0x794>
 800327c:	e7e7      	b.n	800324e <__ieee754_pow+0x986>
 800327e:	f04f 0a00 	mov.w	sl, #0
 8003282:	e717      	b.n	80030b4 <__ieee754_pow+0x7ec>
 8003284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003288:	4619      	mov	r1, r3
 800328a:	e7d2      	b.n	8003232 <__ieee754_pow+0x96a>
 800328c:	491a      	ldr	r1, [pc, #104]	; (80032f8 <__ieee754_pow+0xa30>)
 800328e:	2000      	movs	r0, #0
 8003290:	f7ff bb9e 	b.w	80029d0 <__ieee754_pow+0x108>
 8003294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003298:	f7ff bb9a 	b.w	80029d0 <__ieee754_pow+0x108>
 800329c:	9000      	str	r0, [sp, #0]
 800329e:	f7ff bb76 	b.w	800298e <__ieee754_pow+0xc6>
 80032a2:	2100      	movs	r1, #0
 80032a4:	f7ff bb60 	b.w	8002968 <__ieee754_pow+0xa0>
 80032a8:	00000000 	.word	0x00000000
 80032ac:	3fe62e43 	.word	0x3fe62e43
 80032b0:	fefa39ef 	.word	0xfefa39ef
 80032b4:	3fe62e42 	.word	0x3fe62e42
 80032b8:	0ca86c39 	.word	0x0ca86c39
 80032bc:	be205c61 	.word	0xbe205c61
 80032c0:	72bea4d0 	.word	0x72bea4d0
 80032c4:	3e663769 	.word	0x3e663769
 80032c8:	c5d26bf1 	.word	0xc5d26bf1
 80032cc:	3ebbbd41 	.word	0x3ebbbd41
 80032d0:	af25de2c 	.word	0xaf25de2c
 80032d4:	3f11566a 	.word	0x3f11566a
 80032d8:	16bebd93 	.word	0x16bebd93
 80032dc:	3f66c16c 	.word	0x3f66c16c
 80032e0:	5555553e 	.word	0x5555553e
 80032e4:	3fc55555 	.word	0x3fc55555
 80032e8:	c2f8f359 	.word	0xc2f8f359
 80032ec:	01a56e1f 	.word	0x01a56e1f
 80032f0:	3fe00000 	.word	0x3fe00000
 80032f4:	000fffff 	.word	0x000fffff
 80032f8:	3ff00000 	.word	0x3ff00000
 80032fc:	4090cbff 	.word	0x4090cbff
 8003300:	3f6f3400 	.word	0x3f6f3400
 8003304:	652b82fe 	.word	0x652b82fe
 8003308:	3c971547 	.word	0x3c971547

0800330c <__ieee754_sqrt>:
 800330c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003310:	ec55 4b10 	vmov	r4, r5, d0
 8003314:	4e56      	ldr	r6, [pc, #344]	; (8003470 <__ieee754_sqrt+0x164>)
 8003316:	43ae      	bics	r6, r5
 8003318:	ee10 0a10 	vmov	r0, s0
 800331c:	ee10 3a10 	vmov	r3, s0
 8003320:	4629      	mov	r1, r5
 8003322:	462a      	mov	r2, r5
 8003324:	d110      	bne.n	8003348 <__ieee754_sqrt+0x3c>
 8003326:	ee10 2a10 	vmov	r2, s0
 800332a:	462b      	mov	r3, r5
 800332c:	f7fd f910 	bl	8000550 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4620      	mov	r0, r4
 8003336:	4629      	mov	r1, r5
 8003338:	f7fc ff54 	bl	80001e4 <__adddf3>
 800333c:	4604      	mov	r4, r0
 800333e:	460d      	mov	r5, r1
 8003340:	ec45 4b10 	vmov	d0, r4, r5
 8003344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003348:	2d00      	cmp	r5, #0
 800334a:	dc10      	bgt.n	800336e <__ieee754_sqrt+0x62>
 800334c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003350:	4330      	orrs	r0, r6
 8003352:	d0f5      	beq.n	8003340 <__ieee754_sqrt+0x34>
 8003354:	b15d      	cbz	r5, 800336e <__ieee754_sqrt+0x62>
 8003356:	ee10 2a10 	vmov	r2, s0
 800335a:	462b      	mov	r3, r5
 800335c:	ee10 0a10 	vmov	r0, s0
 8003360:	f7fc ff3e 	bl	80001e0 <__aeabi_dsub>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	f7fd fa1c 	bl	80007a4 <__aeabi_ddiv>
 800336c:	e7e6      	b.n	800333c <__ieee754_sqrt+0x30>
 800336e:	1509      	asrs	r1, r1, #20
 8003370:	d076      	beq.n	8003460 <__ieee754_sqrt+0x154>
 8003372:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003376:	07ce      	lsls	r6, r1, #31
 8003378:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800337c:	bf5e      	ittt	pl
 800337e:	0fda      	lsrpl	r2, r3, #31
 8003380:	005b      	lslpl	r3, r3, #1
 8003382:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8003386:	0fda      	lsrs	r2, r3, #31
 8003388:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800338c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003390:	2000      	movs	r0, #0
 8003392:	106d      	asrs	r5, r5, #1
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	f04f 0e16 	mov.w	lr, #22
 800339a:	4684      	mov	ip, r0
 800339c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033a0:	eb0c 0401 	add.w	r4, ip, r1
 80033a4:	4294      	cmp	r4, r2
 80033a6:	bfde      	ittt	le
 80033a8:	1b12      	suble	r2, r2, r4
 80033aa:	eb04 0c01 	addle.w	ip, r4, r1
 80033ae:	1840      	addle	r0, r0, r1
 80033b0:	0052      	lsls	r2, r2, #1
 80033b2:	f1be 0e01 	subs.w	lr, lr, #1
 80033b6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80033ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80033be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80033c2:	d1ed      	bne.n	80033a0 <__ieee754_sqrt+0x94>
 80033c4:	4671      	mov	r1, lr
 80033c6:	2720      	movs	r7, #32
 80033c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80033cc:	4562      	cmp	r2, ip
 80033ce:	eb04 060e 	add.w	r6, r4, lr
 80033d2:	dc02      	bgt.n	80033da <__ieee754_sqrt+0xce>
 80033d4:	d113      	bne.n	80033fe <__ieee754_sqrt+0xf2>
 80033d6:	429e      	cmp	r6, r3
 80033d8:	d811      	bhi.n	80033fe <__ieee754_sqrt+0xf2>
 80033da:	2e00      	cmp	r6, #0
 80033dc:	eb06 0e04 	add.w	lr, r6, r4
 80033e0:	da43      	bge.n	800346a <__ieee754_sqrt+0x15e>
 80033e2:	f1be 0f00 	cmp.w	lr, #0
 80033e6:	db40      	blt.n	800346a <__ieee754_sqrt+0x15e>
 80033e8:	f10c 0801 	add.w	r8, ip, #1
 80033ec:	eba2 020c 	sub.w	r2, r2, ip
 80033f0:	429e      	cmp	r6, r3
 80033f2:	bf88      	it	hi
 80033f4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80033f8:	1b9b      	subs	r3, r3, r6
 80033fa:	4421      	add	r1, r4
 80033fc:	46c4      	mov	ip, r8
 80033fe:	0052      	lsls	r2, r2, #1
 8003400:	3f01      	subs	r7, #1
 8003402:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003406:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800340a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800340e:	d1dd      	bne.n	80033cc <__ieee754_sqrt+0xc0>
 8003410:	4313      	orrs	r3, r2
 8003412:	d006      	beq.n	8003422 <__ieee754_sqrt+0x116>
 8003414:	1c4c      	adds	r4, r1, #1
 8003416:	bf13      	iteet	ne
 8003418:	3101      	addne	r1, #1
 800341a:	3001      	addeq	r0, #1
 800341c:	4639      	moveq	r1, r7
 800341e:	f021 0101 	bicne.w	r1, r1, #1
 8003422:	1043      	asrs	r3, r0, #1
 8003424:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003428:	0849      	lsrs	r1, r1, #1
 800342a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800342e:	07c2      	lsls	r2, r0, #31
 8003430:	bf48      	it	mi
 8003432:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003436:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800343a:	460c      	mov	r4, r1
 800343c:	463d      	mov	r5, r7
 800343e:	e77f      	b.n	8003340 <__ieee754_sqrt+0x34>
 8003440:	0ada      	lsrs	r2, r3, #11
 8003442:	3815      	subs	r0, #21
 8003444:	055b      	lsls	r3, r3, #21
 8003446:	2a00      	cmp	r2, #0
 8003448:	d0fa      	beq.n	8003440 <__ieee754_sqrt+0x134>
 800344a:	02d7      	lsls	r7, r2, #11
 800344c:	d50a      	bpl.n	8003464 <__ieee754_sqrt+0x158>
 800344e:	f1c1 0420 	rsb	r4, r1, #32
 8003452:	fa23 f404 	lsr.w	r4, r3, r4
 8003456:	1e4d      	subs	r5, r1, #1
 8003458:	408b      	lsls	r3, r1
 800345a:	4322      	orrs	r2, r4
 800345c:	1b41      	subs	r1, r0, r5
 800345e:	e788      	b.n	8003372 <__ieee754_sqrt+0x66>
 8003460:	4608      	mov	r0, r1
 8003462:	e7f0      	b.n	8003446 <__ieee754_sqrt+0x13a>
 8003464:	0052      	lsls	r2, r2, #1
 8003466:	3101      	adds	r1, #1
 8003468:	e7ef      	b.n	800344a <__ieee754_sqrt+0x13e>
 800346a:	46e0      	mov	r8, ip
 800346c:	e7be      	b.n	80033ec <__ieee754_sqrt+0xe0>
 800346e:	bf00      	nop
 8003470:	7ff00000 	.word	0x7ff00000

08003474 <fabs>:
 8003474:	ec51 0b10 	vmov	r0, r1, d0
 8003478:	ee10 2a10 	vmov	r2, s0
 800347c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003480:	ec43 2b10 	vmov	d0, r2, r3
 8003484:	4770      	bx	lr

08003486 <finite>:
 8003486:	b082      	sub	sp, #8
 8003488:	ed8d 0b00 	vstr	d0, [sp]
 800348c:	9801      	ldr	r0, [sp, #4]
 800348e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003492:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003496:	0fc0      	lsrs	r0, r0, #31
 8003498:	b002      	add	sp, #8
 800349a:	4770      	bx	lr
 800349c:	0000      	movs	r0, r0
	...

080034a0 <nan>:
 80034a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80034a8 <nan+0x8>
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	00000000 	.word	0x00000000
 80034ac:	7ff80000 	.word	0x7ff80000

080034b0 <rint>:
 80034b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034b2:	ec51 0b10 	vmov	r0, r1, d0
 80034b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80034ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80034be:	2e13      	cmp	r6, #19
 80034c0:	ee10 4a10 	vmov	r4, s0
 80034c4:	460b      	mov	r3, r1
 80034c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80034ca:	dc58      	bgt.n	800357e <rint+0xce>
 80034cc:	2e00      	cmp	r6, #0
 80034ce:	da2b      	bge.n	8003528 <rint+0x78>
 80034d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80034d4:	4302      	orrs	r2, r0
 80034d6:	d023      	beq.n	8003520 <rint+0x70>
 80034d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80034dc:	4302      	orrs	r2, r0
 80034de:	4254      	negs	r4, r2
 80034e0:	4314      	orrs	r4, r2
 80034e2:	0c4b      	lsrs	r3, r1, #17
 80034e4:	0b24      	lsrs	r4, r4, #12
 80034e6:	045b      	lsls	r3, r3, #17
 80034e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80034ec:	ea44 0103 	orr.w	r1, r4, r3
 80034f0:	4b32      	ldr	r3, [pc, #200]	; (80035bc <rint+0x10c>)
 80034f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80034f6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4630      	mov	r0, r6
 8003500:	4639      	mov	r1, r7
 8003502:	f7fc fe6f 	bl	80001e4 <__adddf3>
 8003506:	e9cd 0100 	strd	r0, r1, [sp]
 800350a:	463b      	mov	r3, r7
 800350c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003510:	4632      	mov	r2, r6
 8003512:	f7fc fe65 	bl	80001e0 <__aeabi_dsub>
 8003516:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800351a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800351e:	4639      	mov	r1, r7
 8003520:	ec41 0b10 	vmov	d0, r0, r1
 8003524:	b003      	add	sp, #12
 8003526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003528:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <rint+0x110>)
 800352a:	4132      	asrs	r2, r6
 800352c:	ea01 0702 	and.w	r7, r1, r2
 8003530:	4307      	orrs	r7, r0
 8003532:	d0f5      	beq.n	8003520 <rint+0x70>
 8003534:	0851      	lsrs	r1, r2, #1
 8003536:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800353a:	4314      	orrs	r4, r2
 800353c:	d00c      	beq.n	8003558 <rint+0xa8>
 800353e:	ea23 0201 	bic.w	r2, r3, r1
 8003542:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003546:	2e13      	cmp	r6, #19
 8003548:	fa43 f606 	asr.w	r6, r3, r6
 800354c:	bf0c      	ite	eq
 800354e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8003552:	2400      	movne	r4, #0
 8003554:	ea42 0306 	orr.w	r3, r2, r6
 8003558:	4918      	ldr	r1, [pc, #96]	; (80035bc <rint+0x10c>)
 800355a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800355e:	4622      	mov	r2, r4
 8003560:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003564:	4620      	mov	r0, r4
 8003566:	4629      	mov	r1, r5
 8003568:	f7fc fe3c 	bl	80001e4 <__adddf3>
 800356c:	e9cd 0100 	strd	r0, r1, [sp]
 8003570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003574:	4622      	mov	r2, r4
 8003576:	462b      	mov	r3, r5
 8003578:	f7fc fe32 	bl	80001e0 <__aeabi_dsub>
 800357c:	e7d0      	b.n	8003520 <rint+0x70>
 800357e:	2e33      	cmp	r6, #51	; 0x33
 8003580:	dd07      	ble.n	8003592 <rint+0xe2>
 8003582:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003586:	d1cb      	bne.n	8003520 <rint+0x70>
 8003588:	ee10 2a10 	vmov	r2, s0
 800358c:	f7fc fe2a 	bl	80001e4 <__adddf3>
 8003590:	e7c6      	b.n	8003520 <rint+0x70>
 8003592:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8003596:	f04f 36ff 	mov.w	r6, #4294967295
 800359a:	40d6      	lsrs	r6, r2
 800359c:	4230      	tst	r0, r6
 800359e:	d0bf      	beq.n	8003520 <rint+0x70>
 80035a0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80035a4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80035a8:	bf1f      	itttt	ne
 80035aa:	ea24 0101 	bicne.w	r1, r4, r1
 80035ae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80035b2:	fa44 f202 	asrne.w	r2, r4, r2
 80035b6:	ea41 0402 	orrne.w	r4, r1, r2
 80035ba:	e7cd      	b.n	8003558 <rint+0xa8>
 80035bc:	08003728 	.word	0x08003728
 80035c0:	000fffff 	.word	0x000fffff
 80035c4:	00000000 	.word	0x00000000

080035c8 <scalbn>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	ec55 4b10 	vmov	r4, r5, d0
 80035ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80035d2:	4606      	mov	r6, r0
 80035d4:	462b      	mov	r3, r5
 80035d6:	b99a      	cbnz	r2, 8003600 <scalbn+0x38>
 80035d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80035dc:	4323      	orrs	r3, r4
 80035de:	d036      	beq.n	800364e <scalbn+0x86>
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <scalbn+0x100>)
 80035e2:	4629      	mov	r1, r5
 80035e4:	ee10 0a10 	vmov	r0, s0
 80035e8:	2200      	movs	r2, #0
 80035ea:	f7fc ffb1 	bl	8000550 <__aeabi_dmul>
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <scalbn+0x104>)
 80035f0:	429e      	cmp	r6, r3
 80035f2:	4604      	mov	r4, r0
 80035f4:	460d      	mov	r5, r1
 80035f6:	da10      	bge.n	800361a <scalbn+0x52>
 80035f8:	a32b      	add	r3, pc, #172	; (adr r3, 80036a8 <scalbn+0xe0>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	e03a      	b.n	8003676 <scalbn+0xae>
 8003600:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003604:	428a      	cmp	r2, r1
 8003606:	d10c      	bne.n	8003622 <scalbn+0x5a>
 8003608:	ee10 2a10 	vmov	r2, s0
 800360c:	4620      	mov	r0, r4
 800360e:	4629      	mov	r1, r5
 8003610:	f7fc fde8 	bl	80001e4 <__adddf3>
 8003614:	4604      	mov	r4, r0
 8003616:	460d      	mov	r5, r1
 8003618:	e019      	b.n	800364e <scalbn+0x86>
 800361a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800361e:	460b      	mov	r3, r1
 8003620:	3a36      	subs	r2, #54	; 0x36
 8003622:	4432      	add	r2, r6
 8003624:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003628:	428a      	cmp	r2, r1
 800362a:	dd08      	ble.n	800363e <scalbn+0x76>
 800362c:	2d00      	cmp	r5, #0
 800362e:	a120      	add	r1, pc, #128	; (adr r1, 80036b0 <scalbn+0xe8>)
 8003630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003634:	da1c      	bge.n	8003670 <scalbn+0xa8>
 8003636:	a120      	add	r1, pc, #128	; (adr r1, 80036b8 <scalbn+0xf0>)
 8003638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800363c:	e018      	b.n	8003670 <scalbn+0xa8>
 800363e:	2a00      	cmp	r2, #0
 8003640:	dd08      	ble.n	8003654 <scalbn+0x8c>
 8003642:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003646:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800364a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800364e:	ec45 4b10 	vmov	d0, r4, r5
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003658:	da19      	bge.n	800368e <scalbn+0xc6>
 800365a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800365e:	429e      	cmp	r6, r3
 8003660:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8003664:	dd0a      	ble.n	800367c <scalbn+0xb4>
 8003666:	a112      	add	r1, pc, #72	; (adr r1, 80036b0 <scalbn+0xe8>)
 8003668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e2      	bne.n	8003636 <scalbn+0x6e>
 8003670:	a30f      	add	r3, pc, #60	; (adr r3, 80036b0 <scalbn+0xe8>)
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	f7fc ff6b 	bl	8000550 <__aeabi_dmul>
 800367a:	e7cb      	b.n	8003614 <scalbn+0x4c>
 800367c:	a10a      	add	r1, pc, #40	; (adr r1, 80036a8 <scalbn+0xe0>)
 800367e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0b8      	beq.n	80035f8 <scalbn+0x30>
 8003686:	a10e      	add	r1, pc, #56	; (adr r1, 80036c0 <scalbn+0xf8>)
 8003688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800368c:	e7b4      	b.n	80035f8 <scalbn+0x30>
 800368e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003692:	3236      	adds	r2, #54	; 0x36
 8003694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003698:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800369c:	4620      	mov	r0, r4
 800369e:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <scalbn+0x108>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	e7e8      	b.n	8003676 <scalbn+0xae>
 80036a4:	f3af 8000 	nop.w
 80036a8:	c2f8f359 	.word	0xc2f8f359
 80036ac:	01a56e1f 	.word	0x01a56e1f
 80036b0:	8800759c 	.word	0x8800759c
 80036b4:	7e37e43c 	.word	0x7e37e43c
 80036b8:	8800759c 	.word	0x8800759c
 80036bc:	fe37e43c 	.word	0xfe37e43c
 80036c0:	c2f8f359 	.word	0xc2f8f359
 80036c4:	81a56e1f 	.word	0x81a56e1f
 80036c8:	43500000 	.word	0x43500000
 80036cc:	ffff3cb0 	.word	0xffff3cb0
 80036d0:	3c900000 	.word	0x3c900000

080036d4 <_init>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	bf00      	nop
 80036d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036da:	bc08      	pop	{r3}
 80036dc:	469e      	mov	lr, r3
 80036de:	4770      	bx	lr

080036e0 <_fini>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	bf00      	nop
 80036e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e6:	bc08      	pop	{r3}
 80036e8:	469e      	mov	lr, r3
 80036ea:	4770      	bx	lr
