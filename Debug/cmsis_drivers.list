
cmsis_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001558  08001558  00011558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001568  08001568  00011570  2**0
                  CONTENTS
  4 .ARM          00000000  08001568  08001568  00011570  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001568  08001570  00011570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001568  08001568  00011568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800156c  0800156c  0001156c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08001570  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08001570  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011570  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000397a  00000000  00000000  000115a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b56  00000000  00000000  00014f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00015a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00015c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ecd3  00000000  00000000  00015d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029f0  00000000  00000000  00024a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000552c9  00000000  00000000  0002743b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007c704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000630  00000000  00000000  0007c758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001540 	.word	0x08001540

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08001540 	.word	0x08001540

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_d2uiz>:
 800054c:	004a      	lsls	r2, r1, #1
 800054e:	d211      	bcs.n	8000574 <__aeabi_d2uiz+0x28>
 8000550:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000554:	d211      	bcs.n	800057a <__aeabi_d2uiz+0x2e>
 8000556:	d50d      	bpl.n	8000574 <__aeabi_d2uiz+0x28>
 8000558:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800055c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000560:	d40e      	bmi.n	8000580 <__aeabi_d2uiz+0x34>
 8000562:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056e:	fa23 f002 	lsr.w	r0, r3, r2
 8000572:	4770      	bx	lr
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	4770      	bx	lr
 800057a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800057e:	d102      	bne.n	8000586 <__aeabi_d2uiz+0x3a>
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	4770      	bx	lr
 8000586:	f04f 0000 	mov.w	r0, #0
 800058a:	4770      	bx	lr

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <main>:
void GPIOConfig(void);
void USART2Config(USART_Handle_t *p_usart2);
void DMA1Config(DMA_Handle_t *p_dma1);

int main(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b099      	sub	sp, #100	; 0x64
 80005cc:	af00      	add	r7, sp, #0
	GPIOConfig();
 80005ce:	f000 f843 	bl	8000658 <GPIOConfig>

	RCC_CLOCK_USART2_ENABLE();
 80005d2:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <main+0x80>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	4a1c      	ldr	r2, [pc, #112]	; (8000648 <main+0x80>)
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	6413      	str	r3, [r2, #64]	; 0x40
	USART_Handle_t p_usart2;
	DMA_Handle_t p_dma1;

	volatile uint8_t databuffer[16] = "DMA transfer \n\r";
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <main+0x84>)
 80005e0:	1d3c      	adds	r4, r7, #4
 80005e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	USART2Config(&p_usart2);
 80005e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f855 	bl	800069c <USART2Config>
	DMA1Config(&p_dma1);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f876 	bl	80006e8 <DMA1Config>

	NVIC_EnableIRQ(USART2_IRQn);
 80005fc:	2026      	movs	r0, #38	; 0x26
 80005fe:	f7ff ffc5 	bl	800058c <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000602:	200f      	movs	r0, #15
 8000604:	f7ff ffc2 	bl	800058c <__NVIC_EnableIRQ>
	Usart_TransmitDMA(&p_usart2, databuffer, 16);
 8000608:	1d39      	adds	r1, r7, #4
 800060a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800060e:	2210      	movs	r2, #16
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fee9 	bl	80013e8 <Usart_TransmitDMA>

	while (1)
	{
		for (uint32_t j = 0; j < 10; j++)
 8000616:	2300      	movs	r3, #0
 8000618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800061a:	e010      	b.n	800063e <main+0x76>
		{
			for (uint32_t i = 0; i < 100000; i++)
 800061c:	2300      	movs	r3, #0
 800061e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000620:	e002      	b.n	8000628 <main+0x60>
 8000622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000624:	3301      	adds	r3, #1
 8000626:	65bb      	str	r3, [r7, #88]	; 0x58
 8000628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800062a:	4a09      	ldr	r2, [pc, #36]	; (8000650 <main+0x88>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d9f8      	bls.n	8000622 <main+0x5a>
			{
			}
			GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000630:	2105      	movs	r1, #5
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <main+0x8c>)
 8000634:	f000 fc70 	bl	8000f18 <GPIO_TogglePin>
		for (uint32_t j = 0; j < 10; j++)
 8000638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800063a:	3301      	adds	r3, #1
 800063c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800063e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000640:	2b09      	cmp	r3, #9
 8000642:	d9eb      	bls.n	800061c <main+0x54>
 8000644:	e7e7      	b.n	8000616 <main+0x4e>
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	08001558 	.word	0x08001558
 8000650:	0001869f 	.word	0x0001869f
 8000654:	40020000 	.word	0x40020000

08000658 <GPIOConfig>:
		//Pwr_EnterStandbyMode(kWFI);
	}
}

void GPIOConfig(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 800065e:	2301      	movs	r3, #1
 8000660:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 8000662:	2305      	movs	r3, #5
 8000664:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 8000666:	2300      	movs	r3, #0
 8000668:	72bb      	strb	r3, [r7, #10]
	GPIOx.pGPIOx = GPIOA;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <GPIOConfig+0x3c>)
 800066c:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fac3 	bl	8000bfc <GPIO_InitPin>

	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_EXTI_FT;
 8000676:	2304      	movs	r3, #4
 8000678:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.PinNumber = GPIO_PIN_13;
 800067a:	230d      	movs	r3, #13
 800067c:	723b      	strb	r3, [r7, #8]
	GPIOx.pGPIOx = GPIOC;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <GPIOConfig+0x40>)
 8000680:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fab9 	bl	8000bfc <GPIO_InitPin>

	return;
 800068a:	bf00      	nop
}
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000
 8000698:	40020800 	.word	0x40020800

0800069c <USART2Config>:

void USART2Config(USART_Handle_t *p_usart2)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	p_usart2->p_usartx = USART2;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <USART2Config+0x44>)
 80006a8:	601a      	str	r2, [r3, #0]
	p_usart2->usart_config.baud_rate = 115200;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	615a      	str	r2, [r3, #20]
	p_usart2->usart_config.oversampling = USART_OVERSAMPLING_16;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2200      	movs	r2, #0
 80006b6:	749a      	strb	r2, [r3, #18]
	p_usart2->usart_config.word_lenght = USART_WORD_LENGHT_8BITS;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2200      	movs	r2, #0
 80006bc:	741a      	strb	r2, [r3, #16]
	p_usart2->usart_config.stop_bits = USART_STOPBITS_1;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	745a      	strb	r2, [r3, #17]
	p_usart2->usart_dma.dma_channel_tx = kChannel5;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2205      	movs	r2, #5
 80006c8:	731a      	strb	r2, [r3, #12]
	p_usart2->usart_dma.p_dma_stream_tx = DMA1_Stream6;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <USART2Config+0x48>)
 80006ce:	605a      	str	r2, [r3, #4]
	Usart_Init(p_usart2);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 fe5d 	bl	8001390 <Usart_Init>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40004400 	.word	0x40004400
 80006e4:	400260a0 	.word	0x400260a0

080006e8 <DMA1Config>:

void DMA1Config(DMA_Handle_t *p_dma1)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	p_dma1->p_dmax = DMA1;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <DMA1Config+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
	p_dma1->p_dma_streamx = DMA1_Stream6;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a11      	ldr	r2, [pc, #68]	; (8000740 <DMA1Config+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
	p_dma1->stream_config.channel_number = kChannel4;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2204      	movs	r2, #4
 8000700:	721a      	strb	r2, [r3, #8]
	p_dma1->stream_config.circular_mode = kCircularDisable;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	741a      	strb	r2, [r3, #16]
	p_dma1->stream_config.direction = kMemToPeri;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2201      	movs	r2, #1
 800070c:	729a      	strb	r2, [r3, #10]
	p_dma1->stream_config.mem_data_size = kByte;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	739a      	strb	r2, [r3, #14]
	p_dma1->stream_config.mem_increment = kIncrementEnable;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2201      	movs	r2, #1
 8000718:	735a      	strb	r2, [r3, #13]
	p_dma1->stream_config.p_peri_address = &(USART2->DR);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <DMA1Config+0x5c>)
 800071e:	615a      	str	r2, [r3, #20]
	p_dma1->stream_config.peri_data_size = kByte;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2200      	movs	r2, #0
 8000724:	73da      	strb	r2, [r3, #15]
	p_dma1->stream_config.peri_increment = kIncrementDisable;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	731a      	strb	r2, [r3, #12]

	Dma_StreamInit(p_dma1);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f949 	bl	80009c4 <Dma_StreamInit>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40026000 	.word	0x40026000
 8000740:	400260a0 	.word	0x400260a0
 8000744:	40004404 	.word	0x40004404

08000748 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	GPIO_ClearPendingEXTIFlag(GPIO_PIN_13);
 800074c:	200d      	movs	r0, #13
 800074e:	f000 fbf9 	bl	8000f44 <GPIO_ClearPendingEXTIFlag>
	GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000752:	2105      	movs	r1, #5
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <EXTI15_10_IRQHandler+0x18>)
 8000756:	f000 fbdf 	bl	8000f18 <GPIO_TogglePin>

	return;
 800075a:	bf00      	nop
}
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40020000 	.word	0x40020000

08000764 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <SystemInit+0x20>)
 800077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <SystemInit+0x20>)
 8000780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800079c:	f7ff ffea 	bl	8000774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <LoopForever+0xe>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	; (80007e4 <LoopForever+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007c6:	f000 fe51 	bl	800146c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fefd 	bl	80005c8 <main>

080007ce <LoopForever>:

LoopForever:
    b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   r0, =_estack
 80007d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007dc:	08001570 	.word	0x08001570
  ldr r2, =_sbss
 80007e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007e4:	2000001c 	.word	0x2000001c

080007e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC_IRQHandler>
	...

080007ec <Dma_ClockEnable>:
#include "stdint.h"
#include "stm32f401xe.h"
#include "stm32f401xe_rcc.h"

void Dma_ClockEnable(DMA_TypeDef *p_dmax)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	if (p_dmax == DMA1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a0d      	ldr	r2, [pc, #52]	; (800082c <Dma_ClockEnable+0x40>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d106      	bne.n	800080a <Dma_ClockEnable+0x1e>
	{
		RCC_CLOCK_DMA1_ENABLE();
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <Dma_ClockEnable+0x44>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <Dma_ClockEnable+0x44>)
 8000802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000806:	6313      	str	r3, [r2, #48]	; 0x30
	else if (p_dmax == DMA2)
	{
		RCC_CLOCK_DMA2_ENABLE();
	}

	return;
 8000808:	e00a      	b.n	8000820 <Dma_ClockEnable+0x34>
	else if (p_dmax == DMA2)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a09      	ldr	r2, [pc, #36]	; (8000834 <Dma_ClockEnable+0x48>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d106      	bne.n	8000820 <Dma_ClockEnable+0x34>
		RCC_CLOCK_DMA2_ENABLE();
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <Dma_ClockEnable+0x44>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a06      	ldr	r2, [pc, #24]	; (8000830 <Dma_ClockEnable+0x44>)
 8000818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
	return;
 800081e:	bf00      	nop
 8000820:	bf00      	nop
}
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	40026000 	.word	0x40026000
 8000830:	40023800 	.word	0x40023800
 8000834:	40026400 	.word	0x40026400

08000838 <Dma_GetStreamNumber>:

static uint8_t Dma_GetStreamNumber(DMA_Stream_TypeDef *p_stream)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	if (p_stream == DMA1_Stream0 || p_stream == DMA2_Stream0)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a2a      	ldr	r2, [pc, #168]	; (80008ec <Dma_GetStreamNumber+0xb4>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d003      	beq.n	8000850 <Dma_GetStreamNumber+0x18>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <Dma_GetStreamNumber+0xb8>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d101      	bne.n	8000854 <Dma_GetStreamNumber+0x1c>
	{
		return 0;
 8000850:	2300      	movs	r3, #0
 8000852:	e045      	b.n	80008e0 <Dma_GetStreamNumber+0xa8>
	}
	if (p_stream == DMA1_Stream1 || p_stream == DMA2_Stream1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <Dma_GetStreamNumber+0xbc>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d003      	beq.n	8000864 <Dma_GetStreamNumber+0x2c>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a26      	ldr	r2, [pc, #152]	; (80008f8 <Dma_GetStreamNumber+0xc0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d101      	bne.n	8000868 <Dma_GetStreamNumber+0x30>
	{
		return 1;
 8000864:	2301      	movs	r3, #1
 8000866:	e03b      	b.n	80008e0 <Dma_GetStreamNumber+0xa8>
	}
	if (p_stream == DMA1_Stream2 || p_stream == DMA2_Stream2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a24      	ldr	r2, [pc, #144]	; (80008fc <Dma_GetStreamNumber+0xc4>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d003      	beq.n	8000878 <Dma_GetStreamNumber+0x40>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a23      	ldr	r2, [pc, #140]	; (8000900 <Dma_GetStreamNumber+0xc8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d101      	bne.n	800087c <Dma_GetStreamNumber+0x44>
	{
		return 2;
 8000878:	2302      	movs	r3, #2
 800087a:	e031      	b.n	80008e0 <Dma_GetStreamNumber+0xa8>
	}
	if (p_stream == DMA1_Stream3 || p_stream == DMA2_Stream3)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a21      	ldr	r2, [pc, #132]	; (8000904 <Dma_GetStreamNumber+0xcc>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d003      	beq.n	800088c <Dma_GetStreamNumber+0x54>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a20      	ldr	r2, [pc, #128]	; (8000908 <Dma_GetStreamNumber+0xd0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d101      	bne.n	8000890 <Dma_GetStreamNumber+0x58>
	{
		return 3;
 800088c:	2303      	movs	r3, #3
 800088e:	e027      	b.n	80008e0 <Dma_GetStreamNumber+0xa8>
	}
	if (p_stream == DMA1_Stream4 || p_stream == DMA2_Stream4)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <Dma_GetStreamNumber+0xd4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d003      	beq.n	80008a0 <Dma_GetStreamNumber+0x68>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <Dma_GetStreamNumber+0xd8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d101      	bne.n	80008a4 <Dma_GetStreamNumber+0x6c>
	{
		return 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	e01d      	b.n	80008e0 <Dma_GetStreamNumber+0xa8>
	}
	if (p_stream == DMA1_Stream5 || p_stream == DMA2_Stream5)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <Dma_GetStreamNumber+0xdc>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d003      	beq.n	80008b4 <Dma_GetStreamNumber+0x7c>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <Dma_GetStreamNumber+0xe0>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d101      	bne.n	80008b8 <Dma_GetStreamNumber+0x80>
	{
		return 5;
 80008b4:	2305      	movs	r3, #5
 80008b6:	e013      	b.n	80008e0 <Dma_GetStreamNumber+0xa8>
	}
	if (p_stream == DMA1_Stream6 || p_stream == DMA2_Stream6)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <Dma_GetStreamNumber+0xe4>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d003      	beq.n	80008c8 <Dma_GetStreamNumber+0x90>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <Dma_GetStreamNumber+0xe8>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d101      	bne.n	80008cc <Dma_GetStreamNumber+0x94>
	{
		return 6;
 80008c8:	2306      	movs	r3, #6
 80008ca:	e009      	b.n	80008e0 <Dma_GetStreamNumber+0xa8>
	}
	if (p_stream == DMA1_Stream7 || p_stream == DMA2_Stream7)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <Dma_GetStreamNumber+0xec>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d003      	beq.n	80008dc <Dma_GetStreamNumber+0xa4>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <Dma_GetStreamNumber+0xf0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d101      	bne.n	80008e0 <Dma_GetStreamNumber+0xa8>
	{
		return 7;
 80008dc:	2307      	movs	r3, #7
 80008de:	e7ff      	b.n	80008e0 <Dma_GetStreamNumber+0xa8>
	}
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40026010 	.word	0x40026010
 80008f0:	40026410 	.word	0x40026410
 80008f4:	40026028 	.word	0x40026028
 80008f8:	40026428 	.word	0x40026428
 80008fc:	40026040 	.word	0x40026040
 8000900:	40026440 	.word	0x40026440
 8000904:	40026058 	.word	0x40026058
 8000908:	40026458 	.word	0x40026458
 800090c:	40026070 	.word	0x40026070
 8000910:	40026470 	.word	0x40026470
 8000914:	40026088 	.word	0x40026088
 8000918:	40026488 	.word	0x40026488
 800091c:	400260a0 	.word	0x400260a0
 8000920:	400264a0 	.word	0x400264a0
 8000924:	400260b8 	.word	0x400260b8
 8000928:	400264b8 	.word	0x400264b8

0800092c <Dma_ClearAllStreamFlags>:

static void Dma_ClearAllStreamFlags(DMA_Handle_t *p_handle_dma, uint8_t stream_number)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
	// clear flags
	if (stream_number < 4)
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	2b03      	cmp	r3, #3
 800093c:	d815      	bhi.n	800096a <Dma_ClearAllStreamFlags+0x3e>
	{
		// clear 5 flags on positions 0,6,16,22 for streams 0-3
		p_handle_dma->p_dmax->LIFCR &= ~((DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0 | DMA_LIFCR_CTEIF0 |
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6899      	ldr	r1, [r3, #8]
		DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTCIF0) << (((stream_number / 2) * 16) + (stream_number * 6)));
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	085b      	lsrs	r3, r3, #1
 8000948:	b2db      	uxtb	r3, r3
 800094a:	0118      	lsls	r0, r3, #4
 800094c:	78fa      	ldrb	r2, [r7, #3]
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	4403      	add	r3, r0
 8000958:	223d      	movs	r2, #61	; 0x3d
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
		p_handle_dma->p_dmax->LIFCR &= ~((DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0 | DMA_LIFCR_CTEIF0 |
 800095e:	43da      	mvns	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	400a      	ands	r2, r1
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	e025      	b.n	80009b6 <Dma_ClearAllStreamFlags+0x8a>
	}
	else if (stream_number >= 4 || stream_number < 8)
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	2b03      	cmp	r3, #3
 800096e:	d802      	bhi.n	8000976 <Dma_ClearAllStreamFlags+0x4a>
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	2b07      	cmp	r3, #7
 8000974:	d81a      	bhi.n	80009ac <Dma_ClearAllStreamFlags+0x80>
	{
		// clear 5 flags on positions 0,6,16,22 for streams 0-3
		p_handle_dma->p_dmax->HIFCR &= ~((DMA_HIFCR_CFEIF4 | DMA_HIFCR_CDMEIF4 | DMA_HIFCR_CTEIF4 |
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	68d9      	ldr	r1, [r3, #12]
		DMA_HIFCR_CHTIF4 | DMA_HIFCR_CTCIF4) << (((stream_number / 6) * 16) + ((stream_number % 4) * 6)));
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <Dma_ClearAllStreamFlags+0x94>)
 8000980:	fba2 2303 	umull	r2, r3, r2, r3
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	b2db      	uxtb	r3, r3
 8000988:	0118      	lsls	r0, r3, #4
 800098a:	78fb      	ldrb	r3, [r7, #3]
 800098c:	f003 0203 	and.w	r2, r3, #3
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4403      	add	r3, r0
 800099a:	223d      	movs	r2, #61	; 0x3d
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
		p_handle_dma->p_dmax->HIFCR &= ~((DMA_HIFCR_CFEIF4 | DMA_HIFCR_CDMEIF4 | DMA_HIFCR_CTEIF4 |
 80009a0:	43da      	mvns	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	400a      	ands	r2, r1
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	e004      	b.n	80009b6 <Dma_ClearAllStreamFlags+0x8a>
	}
	else
	{
		// error
		p_handle_dma->status_error = kErrWrongStreamNumber;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2201      	movs	r2, #1
 80009b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		return;
 80009b4:	bf00      	nop
	}
}
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	aaaaaaab 	.word	0xaaaaaaab

080009c4 <Dma_StreamInit>:

void Dma_StreamInit(DMA_Handle_t *p_handle_dma)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	// save stream number in uint8
	uint8_t stream_number = Dma_GetStreamNumber(p_handle_dma->p_dma_streamx);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff31 	bl	8000838 <Dma_GetStreamNumber>
 80009d6:	4603      	mov	r3, r0
 80009d8:	73fb      	strb	r3, [r7, #15]
	// enable peripheral clock
	Dma_ClockEnable(p_handle_dma->p_dmax);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff04 	bl	80007ec <Dma_ClockEnable>

	// disable dma to configure new stream
	p_handle_dma->p_dma_streamx->CR &= ~(DMA_SxCR_EN);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f022 0201 	bic.w	r2, r2, #1
 80009f2:	601a      	str	r2, [r3, #0]

	// wait until EN bit is cleared
	while (p_handle_dma->p_dma_streamx->CR & DMA_SxCR_EN)
 80009f4:	bf00      	nop
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1f8      	bne.n	80009f6 <Dma_StreamInit+0x32>
		;

	// clear flags
	Dma_ClearAllStreamFlags(p_handle_dma, stream_number);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	4619      	mov	r1, r3
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ff8f 	bl	800092c <Dma_ClearAllStreamFlags>

	// insert peripheral (source or destination) address in register
	p_handle_dma->p_dma_streamx->PAR = (uint32_t) p_handle_dma->stream_config.p_peri_address;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]

	// insert memory 0 address to register
	p_handle_dma->p_dma_streamx->M0AR = (uint32_t) p_handle_dma->stream_config.p_mem0_address;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	699a      	ldr	r2, [r3, #24]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	60da      	str	r2, [r3, #12]

	// if double buffer is enable then also put memory 1 address
	if (p_handle_dma->stream_config.double_buffer == kDoubleBufferEnable)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7adb      	ldrb	r3, [r3, #11]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d10c      	bne.n	8000a44 <Dma_StreamInit+0x80>
	{
		p_handle_dma->p_dma_streamx->CR |= DMA_SxCR_DBM;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a38:	601a      	str	r2, [r3, #0]
		p_handle_dma->p_dma_streamx->M1AR = (uint32_t) p_handle_dma->stream_config.p_mem1_address;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69da      	ldr	r2, [r3, #28]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	611a      	str	r2, [r3, #16]
	//	//4. Configure the total number of data items to be transferred in the
	// DMA_SxNDTR 	register. After each peripheral event or each beat of
	// the burst, this value is 	decremented

	// select DMA channel
	p_handle_dma->p_dma_streamx->CR |= (p_handle_dma->stream_config.channel_number << DMA_SxCR_CHSEL_Pos);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7a1b      	ldrb	r3, [r3, #8]
 8000a4e:	065b      	lsls	r3, r3, #25
 8000a50:	4619      	mov	r1, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	430a      	orrs	r2, r1
 8000a58:	601a      	str	r2, [r3, #0]

	// select flow control mode
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.flow_control) << DMA_SxCR_PFCTRL_Pos);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000a66:	015b      	lsls	r3, r3, #5
 8000a68:	4619      	mov	r1, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]

	// configure priority
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.priority) << DMA_SxCR_PL_Pos);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7a5b      	ldrb	r3, [r3, #9]
 8000a7c:	041b      	lsls	r3, r3, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]

	// configure fifo en/dis , thresholds
	p_handle_dma->p_dma_streamx->FCR |= ((p_handle_dma->stream_config.fifo_threshold) << DMA_SxFCR_FTH_Pos);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a94:	4619      	mov	r1, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	615a      	str	r2, [r3, #20]
	p_handle_dma->p_dma_streamx->FCR |= ((p_handle_dma->stream_config.direct_mode) << DMA_SxFCR_DMDIS_Pos);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	695a      	ldr	r2, [r3, #20]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4619      	mov	r1, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	615a      	str	r2, [r3, #20]

	// configure data transfer direction
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.direction) << DMA_SxCR_DIR_Pos);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7a9b      	ldrb	r3, [r3, #10]
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]

	// configure increment/fixed mode
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.mem_increment) << DMA_SxCR_MINC_Pos);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7b5b      	ldrb	r3, [r3, #13]
 8000ad6:	029b      	lsls	r3, r3, #10
 8000ad8:	4619      	mov	r1, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.peri_increment) << DMA_SxCR_PINC_Pos);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7b1b      	ldrb	r3, [r3, #12]
 8000aec:	025b      	lsls	r3, r3, #9
 8000aee:	4619      	mov	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
	{
		// check if its possible to configure this burst mode
	}

	// configure data widths
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.mem_data_size) << DMA_SxCR_MSIZE_Pos);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7b9b      	ldrb	r3, [r3, #14]
 8000b02:	035b      	lsls	r3, r3, #13
 8000b04:	4619      	mov	r1, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.peri_data_size) << DMA_SxCR_PSIZE_Pos);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7bdb      	ldrb	r3, [r3, #15]
 8000b18:	02db      	lsls	r3, r3, #11
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	430a      	orrs	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]

	// configure circular mode
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.circular_mode) << DMA_SxCR_CIRC_Pos);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7c1b      	ldrb	r3, [r3, #16]
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	4619      	mov	r1, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]

	// activate the stream by setting the EN bit in the DMA_SxCR register
	//p_handle_dma->p_dma_streamx->CR |= DMA_SxCR_EN;
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
static void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a24      	ldr	r2, [pc, #144]	; (8000be0 <GPIO_ClockEnable+0x9c>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d106      	bne.n	8000b62 <GPIO_ClockEnable+0x1e>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8000b54:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	e035      	b.n	8000bce <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOB)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <GPIO_ClockEnable+0xa4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d106      	bne.n	8000b78 <GPIO_ClockEnable+0x34>
	{
		RCC_CLOCK_GPIOB_ENABLE();
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a1d      	ldr	r2, [pc, #116]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	e02a      	b.n	8000bce <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOC)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <GPIO_ClockEnable+0xa8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d106      	bne.n	8000b8e <GPIO_ClockEnable+0x4a>
	{
		RCC_CLOCK_GPIOC_ENABLE();
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	e01f      	b.n	8000bce <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOD)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <GPIO_ClockEnable+0xac>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d106      	bne.n	8000ba4 <GPIO_ClockEnable+0x60>
	{
		RCC_CLOCK_GPIOD_ENABLE();
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	e014      	b.n	8000bce <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <GPIO_ClockEnable+0xb0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d106      	bne.n	8000bba <GPIO_ClockEnable+0x76>
	{
		RCC_CLOCK_GPIOE_ENABLE();
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	e009      	b.n	8000bce <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOH)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <GPIO_ClockEnable+0xb4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d105      	bne.n	8000bce <GPIO_ClockEnable+0x8a>
	{
		RCC_CLOCK_GPIOH_ENABLE();
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <GPIO_ClockEnable+0xa0>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bce:	f3bf 8f4f 	dsb	sy
}
 8000bd2:	bf00      	nop
	// this operation is unnecessary here because configuration library is taking
	// more than 2 clock cycles between clock enable and configuring register, i
	// leave it here to remind myself that stmf401x has a limitation that is
	// described in errata point 2.1.6
	__DSB();
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40020800 	.word	0x40020800
 8000bf0:	40020c00 	.word	0x40020c00
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40021c00 	.word	0x40021c00

08000bfc <GPIO_InitPin>:
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base
 * address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	// enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff9b 	bl	8000b44 <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	795b      	ldrb	r3, [r3, #5]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d81f      	bhi.n	8000c56 <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2103      	movs	r1, #3
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	400a      	ands	r2, r1
 8000c32:	601a      	str	r2, [r3, #0]
		hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	795b      	ldrb	r3, [r3, #5]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	791b      	ldrb	r3, [r3, #4]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	430a      	orrs	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	e0a9      	b.n	8000daa <GPIO_InitPin+0x1ae>
	else
	{
		// IRQ mode

		// set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2103      	movs	r1, #3
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	400a      	ands	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]
		// interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000c74:	4b9e      	ldr	r3, [pc, #632]	; (8000ef0 <GPIO_InitPin+0x2f4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	7912      	ldrb	r2, [r2, #4]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	408a      	lsls	r2, r1
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a9a      	ldr	r2, [pc, #616]	; (8000ef0 <GPIO_InitPin+0x2f4>)
 8000c86:	430b      	orrs	r3, r1
 8000c88:	6013      	str	r3, [r2, #0]

		// rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	795b      	ldrb	r3, [r3, #5]
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d003      	beq.n	8000c9a <GPIO_InitPin+0x9e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	795b      	ldrb	r3, [r3, #5]
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d10a      	bne.n	8000cb0 <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000c9a:	4b95      	ldr	r3, [pc, #596]	; (8000ef0 <GPIO_InitPin+0x2f4>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	7912      	ldrb	r2, [r2, #4]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	408a      	lsls	r2, r1
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4a91      	ldr	r2, [pc, #580]	; (8000ef0 <GPIO_InitPin+0x2f4>)
 8000cac:	430b      	orrs	r3, r1
 8000cae:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	795b      	ldrb	r3, [r3, #5]
 8000cb4:	2b05      	cmp	r3, #5
 8000cb6:	d003      	beq.n	8000cc0 <GPIO_InitPin+0xc4>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	795b      	ldrb	r3, [r3, #5]
 8000cbc:	2b06      	cmp	r3, #6
 8000cbe:	d10a      	bne.n	8000cd6 <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000cc0:	4b8b      	ldr	r3, [pc, #556]	; (8000ef0 <GPIO_InitPin+0x2f4>)
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	7912      	ldrb	r2, [r2, #4]
 8000cc8:	4611      	mov	r1, r2
 8000cca:	2201      	movs	r2, #1
 8000ccc:	408a      	lsls	r2, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4a87      	ldr	r2, [pc, #540]	; (8000ef0 <GPIO_InitPin+0x2f4>)
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	6093      	str	r3, [r2, #8]
		}

		// enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	791b      	ldrb	r3, [r3, #4]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d80c      	bhi.n	8000cf8 <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 8000cde:	4b85      	ldr	r3, [pc, #532]	; (8000ef4 <GPIO_InitPin+0x2f8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	7912      	ldrb	r2, [r2, #4]
 8000ce6:	3206      	adds	r2, #6
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fa01 f202 	lsl.w	r2, r1, r2
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4a80      	ldr	r2, [pc, #512]	; (8000ef4 <GPIO_InitPin+0x2f8>)
 8000cf2:	430b      	orrs	r3, r1
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e010      	b.n	8000d1a <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	791b      	ldrb	r3, [r3, #4]
 8000cfc:	2b09      	cmp	r3, #9
 8000cfe:	d806      	bhi.n	8000d0e <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 8000d00:	4b7c      	ldr	r3, [pc, #496]	; (8000ef4 <GPIO_InitPin+0x2f8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a7b      	ldr	r2, [pc, #492]	; (8000ef4 <GPIO_InitPin+0x2f8>)
 8000d06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	e005      	b.n	8000d1a <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 8000d0e:	4b79      	ldr	r3, [pc, #484]	; (8000ef4 <GPIO_InitPin+0x2f8>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	4a78      	ldr	r2, [pc, #480]	; (8000ef4 <GPIO_InitPin+0x2f8>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000d1a:	4b77      	ldr	r3, [pc, #476]	; (8000ef8 <GPIO_InitPin+0x2fc>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a76      	ldr	r2, [pc, #472]	; (8000ef8 <GPIO_InitPin+0x2fc>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a74      	ldr	r2, [pc, #464]	; (8000efc <GPIO_InitPin+0x300>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d024      	beq.n	8000d7a <GPIO_InitPin+0x17e>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a72      	ldr	r2, [pc, #456]	; (8000f00 <GPIO_InitPin+0x304>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d01d      	beq.n	8000d76 <GPIO_InitPin+0x17a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a71      	ldr	r2, [pc, #452]	; (8000f04 <GPIO_InitPin+0x308>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d016      	beq.n	8000d72 <GPIO_InitPin+0x176>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a6f      	ldr	r2, [pc, #444]	; (8000f08 <GPIO_InitPin+0x30c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d00f      	beq.n	8000d6e <GPIO_InitPin+0x172>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a6e      	ldr	r2, [pc, #440]	; (8000f0c <GPIO_InitPin+0x310>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d008      	beq.n	8000d6a <GPIO_InitPin+0x16e>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a6c      	ldr	r2, [pc, #432]	; (8000f10 <GPIO_InitPin+0x314>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <GPIO_InitPin+0x16a>
 8000d62:	2307      	movs	r3, #7
 8000d64:	e00a      	b.n	8000d7c <GPIO_InitPin+0x180>
 8000d66:	2300      	movs	r3, #0
 8000d68:	e008      	b.n	8000d7c <GPIO_InitPin+0x180>
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	e006      	b.n	8000d7c <GPIO_InitPin+0x180>
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e004      	b.n	8000d7c <GPIO_InitPin+0x180>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e002      	b.n	8000d7c <GPIO_InitPin+0x180>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <GPIO_InitPin+0x180>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 8000d7e:	4a65      	ldr	r2, [pc, #404]	; (8000f14 <GPIO_InitPin+0x318>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	791b      	ldrb	r3, [r3, #4]
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	b2d8      	uxtb	r0, r3
 8000d88:	4603      	mov	r3, r0
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d90:	7bf9      	ldrb	r1, [r7, #15]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	7912      	ldrb	r2, [r2, #4]
 8000d96:	f002 0203 	and.w	r2, r2, #3
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	495c      	ldr	r1, [pc, #368]	; (8000f14 <GPIO_InitPin+0x318>)
 8000da2:	431a      	orrs	r2, r3
 8000da4:	1c83      	adds	r3, r0, #2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	795b      	ldrb	r3, [r3, #5]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d003      	beq.n	8000dba <GPIO_InitPin+0x1be>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	795b      	ldrb	r3, [r3, #5]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d13b      	bne.n	8000e32 <GPIO_InitPin+0x236>
	{
		// speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	791b      	ldrb	r3, [r3, #4]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4619      	mov	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	79db      	ldrb	r3, [r3, #7]
 8000de2:	4619      	mov	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	609a      	str	r2, [r3, #8]

		// output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	791b      	ldrb	r3, [r3, #4]
 8000e02:	4619      	mov	r1, r3
 8000e04:	2301      	movs	r3, #1
 8000e06:	408b      	lsls	r3, r1
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	400a      	ands	r2, r1
 8000e12:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	799b      	ldrb	r3, [r3, #6]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	791b      	ldrb	r3, [r3, #4]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	605a      	str	r2, [r3, #4]
	}

	// set alternate function bits
	if (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	795b      	ldrb	r3, [r3, #5]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d137      	bne.n	8000eaa <GPIO_InitPin+0x2ae>
	{
		// clear 4 AF bits and set new value
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] &= ~(15UL << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	7912      	ldrb	r2, [r2, #4]
 8000e42:	08d2      	lsrs	r2, r2, #3
 8000e44:	b2d0      	uxtb	r0, r2
 8000e46:	4602      	mov	r2, r0
 8000e48:	3208      	adds	r2, #8
 8000e4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	791b      	ldrb	r3, [r3, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4011      	ands	r1, r2
 8000e66:	f100 0208 	add.w	r2, r0, #8
 8000e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] |= (hGPIO->PinConfig.AF << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	7912      	ldrb	r2, [r2, #4]
 8000e76:	08d2      	lsrs	r2, r2, #3
 8000e78:	b2d1      	uxtb	r1, r2
 8000e7a:	460a      	mov	r2, r1
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a5b      	ldrb	r3, [r3, #9]
 8000e86:	4618      	mov	r0, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	fa00 f303 	lsl.w	r3, r0, r3
 8000e96:	461c      	mov	r4, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	ea42 0104 	orr.w	r1, r2, r4
 8000ea2:	f100 0208 	add.w	r2, r0, #8
 8000ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7a1b      	ldrb	r3, [r3, #8]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	4619      	mov	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	60da      	str	r2, [r3, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	40013c00 	.word	0x40013c00
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020c00 	.word	0x40020c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40021c00 	.word	0x40021c00
 8000f14:	40013800 	.word	0x40013800

08000f18 <GPIO_TogglePin>:
 * @param[*GPIO] - base address of gpiox peripheral
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *GPIO, uint8_t PinNumber)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
	GPIO->ODR ^= 0b1 << PinNumber;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	78fa      	ldrb	r2, [r7, #3]
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	405a      	eors	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	615a      	str	r2, [r3, #20]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <GPIO_ClearPendingEXTIFlag>:
 *
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_ClearPendingEXTIFlag(uint8_t PinNumber)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0b1 << PinNumber);
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <GPIO_ClearPendingEXTIFlag+0x2c>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	79fa      	ldrb	r2, [r7, #7]
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <GPIO_ClearPendingEXTIFlag+0x2c>)
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	6153      	str	r3, [r2, #20]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40013c00 	.word	0x40013c00

08000f74 <RCC_CalculatePllclk>:

	return 0;
}

static uint32_t RCC_CalculatePllclk(uint32_t source)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <RCC_CalculatePllclk+0x5c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f86:	81fb      	strh	r3, [r7, #14]
	;
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <RCC_CalculatePllclk+0x5c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	099b      	lsrs	r3, r3, #6
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f94:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <RCC_CalculatePllclk+0x5c>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	0c1b      	lsrs	r3, r3, #16
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	817b      	strh	r3, [r7, #10]
	;

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 8000fa4:	897b      	ldrh	r3, [r7, #10]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	89ba      	ldrh	r2, [r7, #12]
 8000fb8:	fb02 f203 	mul.w	r2, r2, r3
 8000fbc:	897b      	ldrh	r3, [r7, #10]
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	d822      	bhi.n	800102a <RCC_GetApbPrescaler+0x56>
 8000fe4:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <RCC_GetApbPrescaler+0x18>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	0800100d 	.word	0x0800100d
 8000ff0:	0800102b 	.word	0x0800102b
 8000ff4:	0800102b 	.word	0x0800102b
 8000ff8:	0800102b 	.word	0x0800102b
 8000ffc:	08001013 	.word	0x08001013
 8001000:	08001019 	.word	0x08001019
 8001004:	0800101f 	.word	0x0800101f
 8001008:	08001025 	.word	0x08001025
	{
	case (RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
		break;
 8001010:	e00b      	b.n	800102a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
		break;
 8001016:	e008      	b.n	800102a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 8001018:	2304      	movs	r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
		break;
 800101c:	e005      	b.n	800102a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 800101e:	2308      	movs	r3, #8
 8001020:	60fb      	str	r3, [r7, #12]
		break;
 8001022:	e002      	b.n	800102a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 8001024:	2310      	movs	r3, #16
 8001026:	60fb      	str	r3, [r7, #12]
		break;
 8001028:	bf00      	nop
	}

	return apb_prescaler;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	b29b      	uxth	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d840      	bhi.n	80010ce <RCC_GetAhbPrescaler+0x92>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <RCC_GetAhbPrescaler+0x18>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	08001095 	.word	0x08001095
 8001058:	080010cf 	.word	0x080010cf
 800105c:	080010cf 	.word	0x080010cf
 8001060:	080010cf 	.word	0x080010cf
 8001064:	080010cf 	.word	0x080010cf
 8001068:	080010cf 	.word	0x080010cf
 800106c:	080010cf 	.word	0x080010cf
 8001070:	080010cf 	.word	0x080010cf
 8001074:	0800109b 	.word	0x0800109b
 8001078:	080010a1 	.word	0x080010a1
 800107c:	080010a7 	.word	0x080010a7
 8001080:	080010ad 	.word	0x080010ad
 8001084:	080010b3 	.word	0x080010b3
 8001088:	080010b9 	.word	0x080010b9
 800108c:	080010bf 	.word	0x080010bf
 8001090:	080010c7 	.word	0x080010c7
	{
	case (RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
		break;
 8001098:	e019      	b.n	80010ce <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	60fb      	str	r3, [r7, #12]
		break;
 800109e:	e016      	b.n	80010ce <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	60fb      	str	r3, [r7, #12]
		break;
 80010a4:	e013      	b.n	80010ce <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 80010a6:	2308      	movs	r3, #8
 80010a8:	60fb      	str	r3, [r7, #12]
		break;
 80010aa:	e010      	b.n	80010ce <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 80010ac:	2310      	movs	r3, #16
 80010ae:	60fb      	str	r3, [r7, #12]
		break;
 80010b0:	e00d      	b.n	80010ce <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 80010b2:	2340      	movs	r3, #64	; 0x40
 80010b4:	60fb      	str	r3, [r7, #12]
		break;
 80010b6:	e00a      	b.n	80010ce <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	60fb      	str	r3, [r7, #12]
		break;
 80010bc:	e007      	b.n	80010ce <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 80010be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c2:	60fb      	str	r3, [r7, #12]
		break;
 80010c4:	e003      	b.n	80010ce <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 80010c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ca:	60fb      	str	r3, [r7, #12]
		break;
 80010cc:	bf00      	nop
	}

	return ahb_prescaler;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	b29b      	uxth	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <RCC_GetSysclk+0x54>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d00a      	beq.n	8001106 <RCC_GetSysclk+0x26>
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d81c      	bhi.n	800112e <RCC_GetSysclk+0x4e>
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <RCC_GetSysclk+0x1e>
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d002      	beq.n	8001102 <RCC_GetSysclk+0x22>
 80010fc:	e017      	b.n	800112e <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <RCC_GetSysclk+0x58>)
 8001100:	e016      	b.n	8001130 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 8001102:	2300      	movs	r3, #0
 8001104:	e014      	b.n	8001130 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <RCC_GetSysclk+0x54>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <RCC_GetSysclk+0x3a>
 8001112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001116:	d005      	beq.n	8001124 <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 8001118:	e009      	b.n	800112e <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <RCC_GetSysclk+0x58>)
 800111c:	f7ff ff2a 	bl	8000f74 <RCC_CalculatePllclk>
 8001120:	4603      	mov	r3, r0
 8001122:	e005      	b.n	8001130 <RCC_GetSysclk+0x50>
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff ff25 	bl	8000f74 <RCC_CalculatePllclk>
 800112a:	4603      	mov	r3, r0
 800112c:	e000      	b.n	8001130 <RCC_GetSysclk+0x50>
	}

	return 0;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	00f42400 	.word	0x00f42400

0800113c <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 8001142:	f7ff ffcd 	bl	80010e0 <RCC_GetSysclk>
 8001146:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <RCC_GetHclk+0x34>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff70 	bl	800103c <RCC_GetAhbPrescaler>
 800115c:	4603      	mov	r3, r0
 800115e:	807b      	strh	r3, [r7, #2]
	return sysclk / ahb_prescaler;
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40023800 	.word	0x40023800

08001174 <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 800117e:	f7ff ffdd 	bl	800113c <RCC_GetHclk>
 8001182:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch (plck_x)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d002      	beq.n	8001190 <RCC_GetPclk+0x1c>
 800118a:	2b02      	cmp	r3, #2
 800118c:	d00d      	beq.n	80011aa <RCC_GetPclk+0x36>
 800118e:	e019      	b.n	80011c4 <RCC_GetPclk+0x50>
	{
	case (1):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >>
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <RCC_GetPclk+0x60>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	0a9b      	lsrs	r3, r3, #10
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff18 	bl	8000fd4 <RCC_GetApbPrescaler>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE1_Pos);
		break;
 80011a8:	e00c      	b.n	80011c4 <RCC_GetPclk+0x50>

	case (2):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >>
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <RCC_GetPclk+0x60>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	0b5b      	lsrs	r3, r3, #13
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff0b 	bl	8000fd4 <RCC_GetApbPrescaler>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE2_Pos);
		break;
 80011c2:	bf00      	nop
	}

	return hclk / apb_prescaler;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800

080011d8 <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs *freqs)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	freqs->sysclk = RCC_GetSysclk();
 80011e0:	f7ff ff7e 	bl	80010e0 <RCC_GetSysclk>
 80011e4:	4602      	mov	r2, r0
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 80011ea:	f7ff ffa7 	bl	800113c <RCC_GetHclk>
 80011ee:	4602      	mov	r2, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff ffbd 	bl	8001174 <RCC_GetPclk>
 80011fa:	4602      	mov	r2, r0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 8001200:	2002      	movs	r0, #2
 8001202:	f7ff ffb7 	bl	8001174 <RCC_GetPclk>
 8001206:	4602      	mov	r2, r0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	60da      	str	r2, [r3, #12]

	return;
 800120c:	bf00      	nop
}
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Usart_InitGpioPins>:
#include "stm32f401xe.h"
#include "stm32f401xe_gpio.h"
#include "stm32f401xe_rcc.h"

void Usart_InitGpioPins(USART_Handle_t *p_handle_usart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	GPIO_Handle_t gpio_rx, gpio_tx;

	if (p_handle_usart->p_usartx == USART2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a16      	ldr	r2, [pc, #88]	; (800127c <Usart_InitGpioPins+0x68>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10b      	bne.n	800123e <Usart_InitGpioPins+0x2a>
	{
		// PB6 RX
		gpio_rx.pGPIOx = GPIOA;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <Usart_InitGpioPins+0x6c>)
 8001228:	617b      	str	r3, [r7, #20]
		gpio_rx.PinConfig.PinNumber = GPIO_PIN_3;
 800122a:	2303      	movs	r3, #3
 800122c:	763b      	strb	r3, [r7, #24]

		// PB7 TX
		gpio_tx.pGPIOx = GPIOA;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <Usart_InitGpioPins+0x6c>)
 8001230:	60bb      	str	r3, [r7, #8]
		gpio_tx.PinConfig.PinNumber = GPIO_PIN_2;
 8001232:	2302      	movs	r3, #2
 8001234:	733b      	strb	r3, [r7, #12]

		// Alternate Function
		gpio_rx.PinConfig.AF = GPIO_PIN_AF_AF7;
 8001236:	2307      	movs	r3, #7
 8001238:	777b      	strb	r3, [r7, #29]
		gpio_tx.PinConfig.AF = GPIO_PIN_AF_AF7;
 800123a:	2307      	movs	r3, #7
 800123c:	747b      	strb	r3, [r7, #17]
	}

	// Mode AF
	gpio_rx.PinConfig.Mode = GPIO_PIN_MODE_AF;
 800123e:	2302      	movs	r3, #2
 8001240:	767b      	strb	r3, [r7, #25]
	gpio_tx.PinConfig.Mode = GPIO_PIN_MODE_AF;
 8001242:	2302      	movs	r3, #2
 8001244:	737b      	strb	r3, [r7, #13]

	// Output type open drain
	gpio_rx.PinConfig.OutputType = GPIO_PIN_OT_OD;
 8001246:	2301      	movs	r3, #1
 8001248:	76bb      	strb	r3, [r7, #26]
	gpio_tx.PinConfig.OutputType = GPIO_PIN_OT_OD;
 800124a:	2301      	movs	r3, #1
 800124c:	73bb      	strb	r3, [r7, #14]

	// Output speed very high
	gpio_rx.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	76fb      	strb	r3, [r7, #27]
	gpio_tx.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	73fb      	strb	r3, [r7, #15]

	// Pull ups
	gpio_rx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	773b      	strb	r3, [r7, #28]
	gpio_tx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	743b      	strb	r3, [r7, #16]

	GPIO_InitPin(&gpio_rx);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fcca 	bl	8000bfc <GPIO_InitPin>
	GPIO_InitPin(&gpio_tx);
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fcc5 	bl	8000bfc <GPIO_InitPin>
}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40004400 	.word	0x40004400
 8001280:	40020000 	.word	0x40020000

08001284 <Usart_SetBaudDivider>:

static void Usart_SetBaudDivider(USART_Handle_t *p_handle_usart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	float baud_div;
	uint16_t baud_div_mantissa;
	uint8_t baud_div_fraction;

	// in equation we have 8 * (2 - OVER8)
	uint8_t usart_divmulti = 8 * (2 - (1U & (p_handle_usart->p_usartx->CR1 >> USART_CR1_OVER8_Pos)));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	0bdb      	lsrs	r3, r3, #15
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	f1c3 0302 	rsb	r3, r3, #2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	f887 3020 	strb.w	r3, [r7, #32]
	// read clock values from rcc registers
	RCC_GetClockFrequencies(&clock_freqs);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff95 	bl	80011d8 <RCC_GetClockFrequencies>

	if (p_handle_usart->p_usartx == USART2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a36      	ldr	r2, [pc, #216]	; (800138c <Usart_SetBaudDivider+0x108>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d102      	bne.n	80012be <Usart_SetBaudDivider+0x3a>
	{
		pclk_freq = clock_freqs.pclk1;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
 80012bc:	e001      	b.n	80012c2 <Usart_SetBaudDivider+0x3e>
	}
	else
	{
		// usart1 and usart6 are on apb2
		pclk_freq = clock_freqs.pclk2;
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	baud_div = ((float) pclk_freq / (p_handle_usart->usart_config.baud_rate * usart_divmulti));
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e4:	edc7 7a07 	vstr	s15, [r7, #28]
	baud_div_mantissa = baud_div;
 80012e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f0:	ee17 3a90 	vmov	r3, s15
 80012f4:	847b      	strh	r3, [r7, #34]	; 0x22
	// rounding number to get correct fraction
	baud_div_fraction = round((baud_div - baud_div_mantissa) * usart_divmulti);
 80012f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001300:	ed97 7a07 	vldr	s14, [r7, #28]
 8001304:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001308:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001318:	ee17 0a90 	vmov	r0, s15
 800131c:	f7ff f8be 	bl	800049c <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	ec43 2b10 	vmov	d0, r2, r3
 8001328:	f000 f8c4 	bl	80014b4 <round>
 800132c:	ec53 2b10 	vmov	r2, r3, d0
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff f90a 	bl	800054c <__aeabi_d2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	// if after rounding we have value bigger or equal to oversampling then we
	// need to carry +1 to mantissa and set fraction to 0. like 50,99 -> 51;
	if (baud_div_fraction >= usart_divmulti)
 800133e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001342:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001346:	429a      	cmp	r2, r3
 8001348:	d305      	bcc.n	8001356 <Usart_SetBaudDivider+0xd2>
	{
		baud_div_fraction = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		baud_div_mantissa++;
 8001350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001352:	3301      	adds	r3, #1
 8001354:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	// insert values to brr register
	p_handle_usart->p_usartx->BRR = 0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa << USART_BRR_DIV_Mantissa_Pos);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	4619      	mov	r1, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction << USART_BRR_DIV_Fraction_Pos);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6899      	ldr	r1, [r3, #8]
 8001378:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	609a      	str	r2, [r3, #8]
}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40004400 	.word	0x40004400

08001390 <Usart_Init>:

void Usart_Init(USART_Handle_t *p_handle_usart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	Usart_InitGpioPins(p_handle_usart);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff3b 	bl	8001214 <Usart_InitGpioPins>

	//	1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_UE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013ac:	60da      	str	r2, [r3, #12]
	//	2. Program the M bit in USART_CR1 to define the word length.
	p_handle_usart->p_usartx->CR1 |= (p_handle_usart->usart_config.word_lenght << USART_CR1_M_Pos);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7c1b      	ldrb	r3, [r3, #16]
 80013b8:	031b      	lsls	r3, r3, #12
 80013ba:	4619      	mov	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	60da      	str	r2, [r3, #12]
	//	3. Program the number of stop bits in USART_CR2.
	p_handle_usart->p_usartx->CR1 |= (p_handle_usart->usart_config.stop_bits << USART_CR2_STOP_Pos);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7c5b      	ldrb	r3, [r3, #17]
 80013ce:	031b      	lsls	r3, r3, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	60da      	str	r2, [r3, #12]
	//	5. Select the desired baud rate using the USART_BRR register.
	Usart_SetBaudDivider(p_handle_usart);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff52 	bl	8001284 <Usart_SetBaudDivider>

	return;
 80013e0:	bf00      	nop
}
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <Usart_TransmitDMA>:
		}
	}
}

void Usart_TransmitDMA(USART_Handle_t *p_handle_usart, uint8_t *p_data_buffer, uint32_t data_lenght)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]

	p_handle_usart->p_usartx->CR1 |= USART_CR1_TE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0208 	orr.w	r2, r2, #8
 8001402:	60da      	str	r2, [r3, #12]
	p_handle_usart->p_usartx->CR3 |= USART_CR3_DMAT;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001412:	615a      	str	r2, [r3, #20]
//	1. Write the USART_DR register address in the DMA control register to configure it as the
//	destination of the transfer. The data will be moved to this address from memory after
//	each TXE event.
	p_handle_usart->usart_dma.p_dma_stream_tx->PAR = (uint32_t) &(p_handle_usart->p_usartx->DR);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	1d1a      	adds	r2, r3, #4
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
//	2. Write the memory address in the DMA control register to configure it as the source of
//	the transfer. The data will be loaded into the USART_DR register from this memory
//	area after each TXE event.
	p_handle_usart->usart_dma.p_dma_stream_tx->M0AR = (uint32_t) p_data_buffer;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	60da      	str	r2, [r3, #12]
//	3. Configure the total number of bytes to be transferred to the DMA control register.
	p_handle_usart->usart_dma.p_dma_stream_tx->NDTR = data_lenght;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	605a      	str	r2, [r3, #4]
//	4. Configure the channel priority in the DMA register
//	5. Configure DMA interrupt generation after half/ full transfer as required by the
//	application.
	p_handle_usart->usart_dma.p_dma_stream_tx->CR |= DMA_SxCR_TCIE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f042 0210 	orr.w	r2, r2, #16
 800143e:	601a      	str	r2, [r3, #0]
//	6. Clear the TC bit in the SR register by writing 0 to it.
	p_handle_usart->p_usartx->SR &= ~(USART_SR_TC);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800144e:	601a      	str	r2, [r3, #0]
//	7. Activate the channel in the DMA register.
	p_handle_usart->usart_dma.p_dma_stream_tx->CR |= DMA_SxCR_EN;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
//	When the number of data transfers programmed


}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <__libc_init_array>:
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	4d0d      	ldr	r5, [pc, #52]	; (80014a4 <__libc_init_array+0x38>)
 8001470:	4c0d      	ldr	r4, [pc, #52]	; (80014a8 <__libc_init_array+0x3c>)
 8001472:	1b64      	subs	r4, r4, r5
 8001474:	10a4      	asrs	r4, r4, #2
 8001476:	2600      	movs	r6, #0
 8001478:	42a6      	cmp	r6, r4
 800147a:	d109      	bne.n	8001490 <__libc_init_array+0x24>
 800147c:	4d0b      	ldr	r5, [pc, #44]	; (80014ac <__libc_init_array+0x40>)
 800147e:	4c0c      	ldr	r4, [pc, #48]	; (80014b0 <__libc_init_array+0x44>)
 8001480:	f000 f85e 	bl	8001540 <_init>
 8001484:	1b64      	subs	r4, r4, r5
 8001486:	10a4      	asrs	r4, r4, #2
 8001488:	2600      	movs	r6, #0
 800148a:	42a6      	cmp	r6, r4
 800148c:	d105      	bne.n	800149a <__libc_init_array+0x2e>
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	f855 3b04 	ldr.w	r3, [r5], #4
 8001494:	4798      	blx	r3
 8001496:	3601      	adds	r6, #1
 8001498:	e7ee      	b.n	8001478 <__libc_init_array+0xc>
 800149a:	f855 3b04 	ldr.w	r3, [r5], #4
 800149e:	4798      	blx	r3
 80014a0:	3601      	adds	r6, #1
 80014a2:	e7f2      	b.n	800148a <__libc_init_array+0x1e>
 80014a4:	08001568 	.word	0x08001568
 80014a8:	08001568 	.word	0x08001568
 80014ac:	08001568 	.word	0x08001568
 80014b0:	0800156c 	.word	0x0800156c

080014b4 <round>:
 80014b4:	ec51 0b10 	vmov	r0, r1, d0
 80014b8:	b570      	push	{r4, r5, r6, lr}
 80014ba:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80014be:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80014c2:	2c13      	cmp	r4, #19
 80014c4:	ee10 2a10 	vmov	r2, s0
 80014c8:	460b      	mov	r3, r1
 80014ca:	dc19      	bgt.n	8001500 <round+0x4c>
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	da09      	bge.n	80014e4 <round+0x30>
 80014d0:	3401      	adds	r4, #1
 80014d2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80014d6:	d103      	bne.n	80014e0 <round+0x2c>
 80014d8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80014dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80014e0:	2100      	movs	r1, #0
 80014e2:	e028      	b.n	8001536 <round+0x82>
 80014e4:	4d15      	ldr	r5, [pc, #84]	; (800153c <round+0x88>)
 80014e6:	4125      	asrs	r5, r4
 80014e8:	ea01 0605 	and.w	r6, r1, r5
 80014ec:	4332      	orrs	r2, r6
 80014ee:	d00e      	beq.n	800150e <round+0x5a>
 80014f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014f4:	fa42 f404 	asr.w	r4, r2, r4
 80014f8:	4423      	add	r3, r4
 80014fa:	ea23 0305 	bic.w	r3, r3, r5
 80014fe:	e7ef      	b.n	80014e0 <round+0x2c>
 8001500:	2c33      	cmp	r4, #51	; 0x33
 8001502:	dd07      	ble.n	8001514 <round+0x60>
 8001504:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001508:	d101      	bne.n	800150e <round+0x5a>
 800150a:	f7fe fe69 	bl	80001e0 <__adddf3>
 800150e:	ec41 0b10 	vmov	d0, r0, r1
 8001512:	bd70      	pop	{r4, r5, r6, pc}
 8001514:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8001518:	f04f 35ff 	mov.w	r5, #4294967295
 800151c:	40f5      	lsrs	r5, r6
 800151e:	4228      	tst	r0, r5
 8001520:	d0f5      	beq.n	800150e <round+0x5a>
 8001522:	2101      	movs	r1, #1
 8001524:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8001528:	fa01 f404 	lsl.w	r4, r1, r4
 800152c:	1912      	adds	r2, r2, r4
 800152e:	bf28      	it	cs
 8001530:	185b      	addcs	r3, r3, r1
 8001532:	ea22 0105 	bic.w	r1, r2, r5
 8001536:	4608      	mov	r0, r1
 8001538:	4619      	mov	r1, r3
 800153a:	e7e8      	b.n	800150e <round+0x5a>
 800153c:	000fffff 	.word	0x000fffff

08001540 <_init>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	bf00      	nop
 8001544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001546:	bc08      	pop	{r3}
 8001548:	469e      	mov	lr, r3
 800154a:	4770      	bx	lr

0800154c <_fini>:
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154e:	bf00      	nop
 8001550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001552:	bc08      	pop	{r3}
 8001554:	469e      	mov	lr, r3
 8001556:	4770      	bx	lr
