
cmsis_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001454  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080015e8  080015e8  000115e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015f8  080015f8  00011600  2**0
                  CONTENTS
  4 .ARM          00000000  080015f8  080015f8  00011600  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015f8  08001600  00011600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015f8  080015f8  000115f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015fc  080015fc  000115fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08001600  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08001600  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011600  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004382  00000000  00000000  00011630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c37  00000000  00000000  000159b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  000165f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  000167d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f6c5  00000000  00000000  00016958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c6f  00000000  00000000  0002601d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055450  00000000  00000000  00028c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007e0dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000724  00000000  00000000  0007e130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080015d0 	.word	0x080015d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080015d0 	.word	0x080015d0

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_d2uiz>:
 800054c:	004a      	lsls	r2, r1, #1
 800054e:	d211      	bcs.n	8000574 <__aeabi_d2uiz+0x28>
 8000550:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000554:	d211      	bcs.n	800057a <__aeabi_d2uiz+0x2e>
 8000556:	d50d      	bpl.n	8000574 <__aeabi_d2uiz+0x28>
 8000558:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800055c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000560:	d40e      	bmi.n	8000580 <__aeabi_d2uiz+0x34>
 8000562:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056e:	fa23 f002 	lsr.w	r0, r3, r2
 8000572:	4770      	bx	lr
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	4770      	bx	lr
 800057a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800057e:	d102      	bne.n	8000586 <__aeabi_d2uiz+0x3a>
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	4770      	bx	lr
 8000586:	f04f 0000 	mov.w	r0, #0
 800058a:	4770      	bx	lr

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <main>:
void USART2Config(USART_Handle_t *p_usart2);
void DMA1Config(DMA_Handle_t *p_dma1);


int main(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b09b      	sub	sp, #108	; 0x6c
 80005cc:	af00      	add	r7, sp, #0
	GPIOConfig();
 80005ce:	f000 f84b 	bl	8000668 <GPIOConfig>

	RCC_CLOCK_USART2_ENABLE();
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <main+0x90>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	4a20      	ldr	r2, [pc, #128]	; (8000658 <main+0x90>)
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	6413      	str	r3, [r2, #64]	; 0x40



	uint8_t databuffer1[16] = "DMA speedbus \n\r";
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <main+0x94>)
 80005e0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t databuffer0[16] =
 80005ea:	2300      	movs	r3, #0
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
 80005ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
	{ 0 };
	DMA_Handle_t p_dma1;
	USART_Handle_t p_usart2;
	memset(&p_dma1, 0, sizeof(p_dma1));
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2228      	movs	r2, #40	; 0x28
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f000 ff96 	bl	8001534 <memset>

	USART2Config(&p_usart2);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f84e 	bl	80006ac <USART2Config>
	DMA1Config(&p_dma1);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f871 	bl	80006fc <DMA1Config>

	NVIC_EnableIRQ(USART2_IRQn);
 800061a:	2026      	movs	r0, #38	; 0x26
 800061c:	f7ff ffb6 	bl	800058c <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000620:	2011      	movs	r0, #17
 8000622:	f7ff ffb3 	bl	800058c <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000626:	2010      	movs	r0, #16
 8000628:	f7ff ffb0 	bl	800058c <__NVIC_EnableIRQ>
//	Usart_TransmitDMADoubleBuffer(&p_usart2, databuffer0, databuffer1, 16);
	Usart_RecieveDMA(&p_usart2, databuffer0, 1);
 800062c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2201      	movs	r2, #1
 8000634:	4618      	mov	r0, r3
 8000636:	f000 ff19 	bl	800146c <Usart_RecieveDMA>
	while (1)
	{
		for (uint32_t i = 0; i < 100000; i++)
 800063a:	2300      	movs	r3, #0
 800063c:	667b      	str	r3, [r7, #100]	; 0x64
 800063e:	e002      	b.n	8000646 <main+0x7e>
 8000640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000642:	3301      	adds	r3, #1
 8000644:	667b      	str	r3, [r7, #100]	; 0x64
 8000646:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000648:	4a05      	ldr	r2, [pc, #20]	; (8000660 <main+0x98>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d9f8      	bls.n	8000640 <main+0x78>
		{
		}
		GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800064e:	2105      	movs	r1, #5
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <main+0x9c>)
 8000652:	f000 fca3 	bl	8000f9c <GPIO_TogglePin>
		for (uint32_t i = 0; i < 100000; i++)
 8000656:	e7f0      	b.n	800063a <main+0x72>
 8000658:	40023800 	.word	0x40023800
 800065c:	080015e8 	.word	0x080015e8
 8000660:	0001869f 	.word	0x0001869f
 8000664:	40020000 	.word	0x40020000

08000668 <GPIOConfig>:
	}
}

void GPIOConfig(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 800066e:	2301      	movs	r3, #1
 8000670:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 8000672:	2305      	movs	r3, #5
 8000674:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 8000676:	2300      	movs	r3, #0
 8000678:	72bb      	strb	r3, [r7, #10]
	GPIOx.pGPIOx = GPIOA;
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <GPIOConfig+0x3c>)
 800067c:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fafd 	bl	8000c80 <GPIO_InitPin>

	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_EXTI_FT;
 8000686:	2304      	movs	r3, #4
 8000688:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.PinNumber = GPIO_PIN_13;
 800068a:	230d      	movs	r3, #13
 800068c:	723b      	strb	r3, [r7, #8]
	GPIOx.pGPIOx = GPIOC;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <GPIOConfig+0x40>)
 8000690:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f000 faf3 	bl	8000c80 <GPIO_InitPin>

	return;
 800069a:	bf00      	nop
}
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020000 	.word	0x40020000
 80006a8:	40020800 	.word	0x40020800

080006ac <USART2Config>:

void USART2Config(USART_Handle_t *p_usart2)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	p_usart2->p_usartx = USART2;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <USART2Config+0x44>)
 80006b8:	601a      	str	r2, [r3, #0]
	p_usart2->usart_config.baud_rate = 115200;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	611a      	str	r2, [r3, #16]
	p_usart2->usart_config.oversampling = USART_OVERSAMPLING_16;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	739a      	strb	r2, [r3, #14]
	p_usart2->usart_config.word_lenght = USART_WORD_LENGHT_8BITS;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	731a      	strb	r2, [r3, #12]
	p_usart2->usart_config.stop_bits = USART_STOPBITS_1;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	735a      	strb	r2, [r3, #13]
	p_usart2->usart_dma.p_dma_stream_tx = DMA1_Stream6;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <USART2Config+0x48>)
 80006d8:	605a      	str	r2, [r3, #4]
	p_usart2->usart_dma.p_dma_stream_rx = DMA1_Stream5;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <USART2Config+0x4c>)
 80006de:	609a      	str	r2, [r3, #8]
	Usart_Init(p_usart2);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 fe97 	bl	8001414 <Usart_Init>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40004400 	.word	0x40004400
 80006f4:	400260a0 	.word	0x400260a0
 80006f8:	40026088 	.word	0x40026088

080006fc <DMA1Config>:

void DMA1Config(DMA_Handle_t *p_dma1)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	//read
	p_dma1->p_dmax = DMA1;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <DMA1Config+0x60>)
 8000708:	601a      	str	r2, [r3, #0]
	p_dma1->p_dma_streamx = DMA1_Stream5;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <DMA1Config+0x64>)
 800070e:	605a      	str	r2, [r3, #4]
	p_dma1->stream_config.channel_number = kChannel4;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2204      	movs	r2, #4
 8000714:	721a      	strb	r2, [r3, #8]
	p_dma1->stream_config.circular_mode = kCircularEnable;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2201      	movs	r2, #1
 800071a:	741a      	strb	r2, [r3, #16]
	p_dma1->stream_config.direction = kPeriToMem;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	729a      	strb	r2, [r3, #10]
	p_dma1->stream_config.mem_data_size = kByte;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	739a      	strb	r2, [r3, #14]
	p_dma1->stream_config.mem_increment = kIncrementEnable;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2201      	movs	r2, #1
 800072c:	735a      	strb	r2, [r3, #13]
	p_dma1->stream_config.peri_data_size = kByte;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	73da      	strb	r2, [r3, #15]
	p_dma1->stream_config.peri_increment = kIncrementDisable;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	731a      	strb	r2, [r3, #12]

	DMA_StreamInit(p_dma1);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f9a2 	bl	8000a84 <DMA_StreamInit>

	//send
	p_dma1->p_dma_streamx = DMA1_Stream6;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <DMA1Config+0x68>)
 8000744:	605a      	str	r2, [r3, #4]
	p_dma1->stream_config.direction = kMemToPeri;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2201      	movs	r2, #1
 800074a:	729a      	strb	r2, [r3, #10]

	DMA_StreamInit(p_dma1);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f999 	bl	8000a84 <DMA_StreamInit>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40026000 	.word	0x40026000
 8000760:	40026088 	.word	0x40026088
 8000764:	400260a0 	.word	0x400260a0

08000768 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	GPIO_ClearPendingEXTIFlag(GPIO_PIN_13);
 800076c:	200d      	movs	r0, #13
 800076e:	f000 fc2b 	bl	8000fc8 <GPIO_ClearPendingEXTIFlag>
	GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000772:	2105      	movs	r1, #5
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <EXTI15_10_IRQHandler+0x18>)
 8000776:	f000 fc11 	bl	8000f9c <GPIO_TogglePin>

	return;
 800077a:	bf00      	nop
}
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40020000 	.word	0x40020000

08000784 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	USART2->SR &= ~(USART_SR_RXNE);
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <USART2_IRQHandler+0x1c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <USART2_IRQHandler+0x1c>)
 800078e:	f023 0320 	bic.w	r3, r3, #32
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40004400 	.word	0x40004400

080007a4 <DMA1_Stream6_IRQHandler>:
//send
void DMA1_Stream6_IRQHandler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	DMA1->HIFCR |= DMA_HIFCR_CTCIF6;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <DMA1_Stream6_IRQHandler+0x1c>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <DMA1_Stream6_IRQHandler+0x1c>)
 80007ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b2:	60d3      	str	r3, [r2, #12]

}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40026000 	.word	0x40026000

080007c4 <DMA1_Stream5_IRQHandler>:
//read
void DMA1_Stream5_IRQHandler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	DMA1->HIFCR |= DMA_HIFCR_CTCIF5;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <DMA1_Stream5_IRQHandler+0x1c>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <DMA1_Stream5_IRQHandler+0x1c>)
 80007ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d2:	60d3      	str	r3, [r2, #12]

}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40026000 	.word	0x40026000

080007e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000824:	4c0b      	ldr	r4, [pc, #44]	; (8000854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000832:	f7ff ffd7 	bl	80007e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000836:	f000 fe59 	bl	80014ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083a:	f7ff fec5 	bl	80005c8 <main>
  bx  lr    
 800083e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000840:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800084c:	08001600 	.word	0x08001600
  ldr r2, =_sbss
 8000850:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000854:	2000001c 	.word	0x2000001c

08000858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC_IRQHandler>
	...

0800085c <DMA_ClockEnable>:
#include "stdint.h"
#include "stm32f401xe.h"
#include "stm32f401xe_rcc.h"

void DMA_ClockEnable(DMA_TypeDef *p_dmax)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	if (p_dmax == DMA1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a0d      	ldr	r2, [pc, #52]	; (800089c <DMA_ClockEnable+0x40>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d106      	bne.n	800087a <DMA_ClockEnable+0x1e>
	{
		RCC_CLOCK_DMA1_ENABLE();
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <DMA_ClockEnable+0x44>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <DMA_ClockEnable+0x44>)
 8000872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000876:	6313      	str	r3, [r2, #48]	; 0x30
	else if (p_dmax == DMA2)
	{
		RCC_CLOCK_DMA2_ENABLE();
	}

	return;
 8000878:	e00a      	b.n	8000890 <DMA_ClockEnable+0x34>
	else if (p_dmax == DMA2)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <DMA_ClockEnable+0x48>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <DMA_ClockEnable+0x34>
		RCC_CLOCK_DMA2_ENABLE();
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <DMA_ClockEnable+0x44>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <DMA_ClockEnable+0x44>)
 8000888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
	return;
 800088e:	bf00      	nop
 8000890:	bf00      	nop
}
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	40026000 	.word	0x40026000
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40026400 	.word	0x40026400

080008a8 <DMA_GetStreamNumber>:

static uint8_t DMA_GetStreamNumber(DMA_Handle_t *p_handle_dma)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if (p_handle_dma->p_dma_streamx == DMA1_Stream0
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	4a34      	ldr	r2, [pc, #208]	; (8000988 <DMA_GetStreamNumber+0xe0>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d004      	beq.n	80008c4 <DMA_GetStreamNumber+0x1c>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream0)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	4a33      	ldr	r2, [pc, #204]	; (800098c <DMA_GetStreamNumber+0xe4>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d101      	bne.n	80008c8 <DMA_GetStreamNumber+0x20>
	{
		return 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	e058      	b.n	800097a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream1
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	4a30      	ldr	r2, [pc, #192]	; (8000990 <DMA_GetStreamNumber+0xe8>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d004      	beq.n	80008dc <DMA_GetStreamNumber+0x34>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream1)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	4a2f      	ldr	r2, [pc, #188]	; (8000994 <DMA_GetStreamNumber+0xec>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d101      	bne.n	80008e0 <DMA_GetStreamNumber+0x38>
	{
		return 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	e04c      	b.n	800097a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream2
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4a2c      	ldr	r2, [pc, #176]	; (8000998 <DMA_GetStreamNumber+0xf0>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d004      	beq.n	80008f4 <DMA_GetStreamNumber+0x4c>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream2)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	4a2b      	ldr	r2, [pc, #172]	; (800099c <DMA_GetStreamNumber+0xf4>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d101      	bne.n	80008f8 <DMA_GetStreamNumber+0x50>
	{
		return 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	e040      	b.n	800097a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <DMA_GetStreamNumber+0xf8>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d004      	beq.n	800090c <DMA_GetStreamNumber+0x64>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream3)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	4a27      	ldr	r2, [pc, #156]	; (80009a4 <DMA_GetStreamNumber+0xfc>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d101      	bne.n	8000910 <DMA_GetStreamNumber+0x68>
	{
		return 3;
 800090c:	2303      	movs	r3, #3
 800090e:	e034      	b.n	800097a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream4
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <DMA_GetStreamNumber+0x100>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d004      	beq.n	8000924 <DMA_GetStreamNumber+0x7c>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream4)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	4a23      	ldr	r2, [pc, #140]	; (80009ac <DMA_GetStreamNumber+0x104>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d101      	bne.n	8000928 <DMA_GetStreamNumber+0x80>
	{
		return 4;
 8000924:	2304      	movs	r3, #4
 8000926:	e028      	b.n	800097a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream5
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <DMA_GetStreamNumber+0x108>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d004      	beq.n	800093c <DMA_GetStreamNumber+0x94>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream5)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <DMA_GetStreamNumber+0x10c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d101      	bne.n	8000940 <DMA_GetStreamNumber+0x98>
	{
		return 5;
 800093c:	2305      	movs	r3, #5
 800093e:	e01c      	b.n	800097a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream6
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <DMA_GetStreamNumber+0x110>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d004      	beq.n	8000954 <DMA_GetStreamNumber+0xac>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream6)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <DMA_GetStreamNumber+0x114>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d101      	bne.n	8000958 <DMA_GetStreamNumber+0xb0>
	{
		return 6;
 8000954:	2306      	movs	r3, #6
 8000956:	e010      	b.n	800097a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream7
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <DMA_GetStreamNumber+0x118>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d004      	beq.n	800096c <DMA_GetStreamNumber+0xc4>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream7)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <DMA_GetStreamNumber+0x11c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d101      	bne.n	8000970 <DMA_GetStreamNumber+0xc8>
	{
		return 7;
 800096c:	2307      	movs	r3, #7
 800096e:	e004      	b.n	800097a <DMA_GetStreamNumber+0xd2>
	}

	p_handle_dma->status_error = kErrWrongStreamNumber;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2201      	movs	r2, #1
 8000974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	return 200;
 8000978:	23c8      	movs	r3, #200	; 0xc8
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40026010 	.word	0x40026010
 800098c:	40026410 	.word	0x40026410
 8000990:	40026028 	.word	0x40026028
 8000994:	40026428 	.word	0x40026428
 8000998:	40026040 	.word	0x40026040
 800099c:	40026440 	.word	0x40026440
 80009a0:	40026058 	.word	0x40026058
 80009a4:	40026458 	.word	0x40026458
 80009a8:	40026070 	.word	0x40026070
 80009ac:	40026470 	.word	0x40026470
 80009b0:	40026088 	.word	0x40026088
 80009b4:	40026488 	.word	0x40026488
 80009b8:	400260a0 	.word	0x400260a0
 80009bc:	400264a0 	.word	0x400264a0
 80009c0:	400260b8 	.word	0x400260b8
 80009c4:	400264b8 	.word	0x400264b8

080009c8 <DMA_ClearAllStreamFlags>:

static void DMA_ClearAllStreamFlags(DMA_Handle_t *p_handle_dma,
		uint8_t stream_number)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
	// clear flags
	if (stream_number < 4)
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d813      	bhi.n	8000a02 <DMA_ClearAllStreamFlags+0x3a>
	{
		// clear 5 flags on positions 0,6,16,22 for streams 0-3
		p_handle_dma->p_dmax->LIFCR |= (DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6899      	ldr	r1, [r3, #8]
				| DMA_LIFCR_CTEIF0 |
				DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTCIF0)
				<< (((stream_number / 2) * 16) + (stream_number * 6));
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	085b      	lsrs	r3, r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	0118      	lsls	r0, r3, #4
 80009e8:	78fa      	ldrb	r2, [r7, #3]
 80009ea:	4613      	mov	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4413      	add	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4403      	add	r3, r0
 80009f4:	223d      	movs	r2, #61	; 0x3d
 80009f6:	409a      	lsls	r2, r3
		p_handle_dma->p_dmax->LIFCR |= (DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	e023      	b.n	8000a4a <DMA_ClearAllStreamFlags+0x82>
	}
	else if (stream_number >= 4 || stream_number < 8)
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	d802      	bhi.n	8000a0e <DMA_ClearAllStreamFlags+0x46>
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b07      	cmp	r3, #7
 8000a0c:	d818      	bhi.n	8000a40 <DMA_ClearAllStreamFlags+0x78>
	{
		// clear 5 flags on positions 0,6,16,22 for streams 0-3
		p_handle_dma->p_dmax->HIFCR |= (DMA_HIFCR_CFEIF4 | DMA_HIFCR_CDMEIF4
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68d9      	ldr	r1, [r3, #12]
				| DMA_HIFCR_CTEIF4 |
				DMA_HIFCR_CHTIF4 | DMA_HIFCR_CTCIF4)
				<< (((stream_number / 6) * 16) + ((stream_number % 4) * 6));
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <DMA_ClearAllStreamFlags+0x8c>)
 8000a18:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	0118      	lsls	r0, r3, #4
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	f003 0203 	and.w	r2, r3, #3
 8000a28:	4613      	mov	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4403      	add	r3, r0
 8000a32:	223d      	movs	r2, #61	; 0x3d
 8000a34:	409a      	lsls	r2, r3
		p_handle_dma->p_dmax->HIFCR |= (DMA_HIFCR_CFEIF4 | DMA_HIFCR_CDMEIF4
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	e004      	b.n	8000a4a <DMA_ClearAllStreamFlags+0x82>
	}
	else
	{
		// error
		p_handle_dma->status_error = kErrWrongStreamNumber;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2201      	movs	r2, #1
 8000a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return;
 8000a48:	bf00      	nop
	}
}
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	aaaaaaab 	.word	0xaaaaaaab

08000a58 <DMA_WriteAdresses>:
	return;
}

void DMA_WriteAdresses(DMA_Stream_TypeDef *p_dma_streamx, uint32_t *peri_add,
		uint32_t *mem0_add, uint32_t *mem1_add)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	603b      	str	r3, [r7, #0]
	p_dma_streamx->PAR = (uint32_t) peri_add;
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	609a      	str	r2, [r3, #8]

	p_dma_streamx->M0AR = (uint32_t) mem0_add;
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	60da      	str	r2, [r3, #12]

	// only used for double buffer mode
	p_dma_streamx->M1AR = (uint32_t) mem1_add;
 8000a72:	683a      	ldr	r2, [r7, #0]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	611a      	str	r2, [r3, #16]

	return;
 8000a78:	bf00      	nop
}
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DMA_StreamInit>:

void DMA_StreamInit(DMA_Handle_t *p_handle_dma)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	// save stream number in uint8
	uint8_t stream_number = DMA_GetStreamNumber(p_handle_dma);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff0b 	bl	80008a8 <DMA_GetStreamNumber>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
	// enable peripheral clock
	DMA_ClockEnable(p_handle_dma->p_dmax);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fede 	bl	800085c <DMA_ClockEnable>

	// disable dma to configure new stream
	p_handle_dma->p_dma_streamx->CR &= ~(DMA_SxCR_EN);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f022 0201 	bic.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]

	// wait until EN bit is cleared
	while (p_handle_dma->p_dma_streamx->CR & DMA_SxCR_EN)
 8000ab0:	bf00      	nop
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1f8      	bne.n	8000ab2 <DMA_StreamInit+0x2e>
		;

	// clear flags
	DMA_ClearAllStreamFlags(p_handle_dma, stream_number);
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff7f 	bl	80009c8 <DMA_ClearAllStreamFlags>
	//** OPTION TO CONFIGURE HERE DOUBLE BUFFER **//
	//** OPTION TO CONFIGURE HERE NO DATA ITEMS TO TRANSFER **//
	//** OPTION TO CONFIGURE MEM/PERI ADDRESSES **//

	// select DMA channel
	p_handle_dma->p_dma_streamx->CR |=
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	681a      	ldr	r2, [r3, #0]
			(p_handle_dma->stream_config.channel_number << DMA_SxCR_CHSEL_Pos);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7a1b      	ldrb	r3, [r3, #8]
 8000ad4:	065b      	lsls	r3, r3, #25
 8000ad6:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]

	// select flow control mode
	p_handle_dma->p_dma_streamx->CR |=
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.flow_control) << DMA_SxCR_PFCTRL_Pos);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000aec:	015b      	lsls	r3, r3, #5
 8000aee:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]

	// configure priority
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.priority)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7a5b      	ldrb	r3, [r3, #9]
			<< DMA_SxCR_PL_Pos);
 8000b02:	041b      	lsls	r3, r3, #16
 8000b04:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.priority)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]

	// configure fifo en/dis , thresholds
	p_handle_dma->p_dma_streamx->FCR |=
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	695a      	ldr	r2, [r3, #20]
			((p_handle_dma->stream_config.fifo_threshold) << DMA_SxFCR_FTH_Pos);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b1a:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->FCR |=
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	430a      	orrs	r2, r1
 8000b22:	615a      	str	r2, [r3, #20]
	p_handle_dma->p_dma_streamx->FCR |=
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	695a      	ldr	r2, [r3, #20]
			((p_handle_dma->stream_config.direct_mode) << DMA_SxFCR_DMDIS_Pos);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->FCR |=
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	615a      	str	r2, [r3, #20]

	// configure data transfer direction
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.direction)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7a9b      	ldrb	r3, [r3, #10]
			<< DMA_SxCR_DIR_Pos);
 8000b46:	019b      	lsls	r3, r3, #6
 8000b48:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.direction)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	601a      	str	r2, [r3, #0]

	// configure increment/fixed mode
	p_handle_dma->p_dma_streamx->CR |=
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.mem_increment) << DMA_SxCR_MINC_Pos);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7b5b      	ldrb	r3, [r3, #13]
 8000b5c:	029b      	lsls	r3, r3, #10
 8000b5e:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
	p_handle_dma->p_dma_streamx->CR |=
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.peri_increment) << DMA_SxCR_PINC_Pos);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7b1b      	ldrb	r3, [r3, #12]
 8000b72:	025b      	lsls	r3, r3, #9
 8000b74:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
	{
		// check if its possible to configure this burst mode
	}

	// configure data widths
	p_handle_dma->p_dma_streamx->CR |=
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.mem_data_size) << DMA_SxCR_MSIZE_Pos);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7b9b      	ldrb	r3, [r3, #14]
 8000b88:	035b      	lsls	r3, r3, #13
 8000b8a:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	430a      	orrs	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]
	p_handle_dma->p_dma_streamx->CR |=
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.peri_data_size) << DMA_SxCR_PSIZE_Pos);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7bdb      	ldrb	r3, [r3, #15]
 8000b9e:	02db      	lsls	r3, r3, #11
 8000ba0:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]

	// configure circular mode
	p_handle_dma->p_dma_streamx->CR |=
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.circular_mode) << DMA_SxCR_CIRC_Pos);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7c1b      	ldrb	r3, [r3, #16]
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]

	// activate the stream by setting the EN bit in the DMA_SxCR register
	// p_handle_dma->p_dma_streamx->CR |= DMA_SxCR_EN;
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
static void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <GPIO_ClockEnable+0x9c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d106      	bne.n	8000be6 <GPIO_ClockEnable+0x1e>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	e035      	b.n	8000c52 <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOB)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a20      	ldr	r2, [pc, #128]	; (8000c6c <GPIO_ClockEnable+0xa4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d106      	bne.n	8000bfc <GPIO_ClockEnable+0x34>
	{
		RCC_CLOCK_GPIOB_ENABLE();
 8000bee:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	e02a      	b.n	8000c52 <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOC)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <GPIO_ClockEnable+0xa8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d106      	bne.n	8000c12 <GPIO_ClockEnable+0x4a>
	{
		RCC_CLOCK_GPIOC_ENABLE();
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	e01f      	b.n	8000c52 <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOD)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <GPIO_ClockEnable+0xac>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d106      	bne.n	8000c28 <GPIO_ClockEnable+0x60>
	{
		RCC_CLOCK_GPIOD_ENABLE();
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	e014      	b.n	8000c52 <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <GPIO_ClockEnable+0xb0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d106      	bne.n	8000c3e <GPIO_ClockEnable+0x76>
	{
		RCC_CLOCK_GPIOE_ENABLE();
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	e009      	b.n	8000c52 <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOH)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <GPIO_ClockEnable+0xb4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d105      	bne.n	8000c52 <GPIO_ClockEnable+0x8a>
	{
		RCC_CLOCK_GPIOH_ENABLE();
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <GPIO_ClockEnable+0xa0>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c52:	f3bf 8f4f 	dsb	sy
}
 8000c56:	bf00      	nop
	// this operation is unnecessary here because configuration library is taking
	// more than 2 clock cycles between clock enable and configuring register, i
	// leave it here to remind myself that stmf401x has a limitation that is
	// described in errata point 2.1.6
	__DSB();
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020c00 	.word	0x40020c00
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40021c00 	.word	0x40021c00

08000c80 <GPIO_InitPin>:
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base
 * address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	// enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff9b 	bl	8000bc8 <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	795b      	ldrb	r3, [r3, #5]
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d81f      	bhi.n	8000cda <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	791b      	ldrb	r3, [r3, #4]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2103      	movs	r1, #3
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
		hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	795b      	ldrb	r3, [r3, #5]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	791b      	ldrb	r3, [r3, #4]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	e0a9      	b.n	8000e2e <GPIO_InitPin+0x1ae>
	else
	{
		// IRQ mode

		// set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	791b      	ldrb	r3, [r3, #4]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	4619      	mov	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	400a      	ands	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
		// interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000cf8:	4b9e      	ldr	r3, [pc, #632]	; (8000f74 <GPIO_InitPin+0x2f4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	7912      	ldrb	r2, [r2, #4]
 8000d00:	4611      	mov	r1, r2
 8000d02:	2201      	movs	r2, #1
 8000d04:	408a      	lsls	r2, r1
 8000d06:	4611      	mov	r1, r2
 8000d08:	4a9a      	ldr	r2, [pc, #616]	; (8000f74 <GPIO_InitPin+0x2f4>)
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6013      	str	r3, [r2, #0]

		// rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	795b      	ldrb	r3, [r3, #5]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d003      	beq.n	8000d1e <GPIO_InitPin+0x9e>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	795b      	ldrb	r3, [r3, #5]
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d10a      	bne.n	8000d34 <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000d1e:	4b95      	ldr	r3, [pc, #596]	; (8000f74 <GPIO_InitPin+0x2f4>)
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	7912      	ldrb	r2, [r2, #4]
 8000d26:	4611      	mov	r1, r2
 8000d28:	2201      	movs	r2, #1
 8000d2a:	408a      	lsls	r2, r1
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4a91      	ldr	r2, [pc, #580]	; (8000f74 <GPIO_InitPin+0x2f4>)
 8000d30:	430b      	orrs	r3, r1
 8000d32:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	795b      	ldrb	r3, [r3, #5]
 8000d38:	2b05      	cmp	r3, #5
 8000d3a:	d003      	beq.n	8000d44 <GPIO_InitPin+0xc4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	795b      	ldrb	r3, [r3, #5]
 8000d40:	2b06      	cmp	r3, #6
 8000d42:	d10a      	bne.n	8000d5a <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000d44:	4b8b      	ldr	r3, [pc, #556]	; (8000f74 <GPIO_InitPin+0x2f4>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	7912      	ldrb	r2, [r2, #4]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	2201      	movs	r2, #1
 8000d50:	408a      	lsls	r2, r1
 8000d52:	4611      	mov	r1, r2
 8000d54:	4a87      	ldr	r2, [pc, #540]	; (8000f74 <GPIO_InitPin+0x2f4>)
 8000d56:	430b      	orrs	r3, r1
 8000d58:	6093      	str	r3, [r2, #8]
		}

		// enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	d80c      	bhi.n	8000d7c <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 8000d62:	4b85      	ldr	r3, [pc, #532]	; (8000f78 <GPIO_InitPin+0x2f8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	7912      	ldrb	r2, [r2, #4]
 8000d6a:	3206      	adds	r2, #6
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	4611      	mov	r1, r2
 8000d74:	4a80      	ldr	r2, [pc, #512]	; (8000f78 <GPIO_InitPin+0x2f8>)
 8000d76:	430b      	orrs	r3, r1
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e010      	b.n	8000d9e <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	791b      	ldrb	r3, [r3, #4]
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	d806      	bhi.n	8000d92 <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 8000d84:	4b7c      	ldr	r3, [pc, #496]	; (8000f78 <GPIO_InitPin+0x2f8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a7b      	ldr	r2, [pc, #492]	; (8000f78 <GPIO_InitPin+0x2f8>)
 8000d8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e005      	b.n	8000d9e <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 8000d92:	4b79      	ldr	r3, [pc, #484]	; (8000f78 <GPIO_InitPin+0x2f8>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4a78      	ldr	r2, [pc, #480]	; (8000f78 <GPIO_InitPin+0x2f8>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000d9e:	4b77      	ldr	r3, [pc, #476]	; (8000f7c <GPIO_InitPin+0x2fc>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a76      	ldr	r2, [pc, #472]	; (8000f7c <GPIO_InitPin+0x2fc>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a74      	ldr	r2, [pc, #464]	; (8000f80 <GPIO_InitPin+0x300>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d024      	beq.n	8000dfe <GPIO_InitPin+0x17e>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a72      	ldr	r2, [pc, #456]	; (8000f84 <GPIO_InitPin+0x304>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d01d      	beq.n	8000dfa <GPIO_InitPin+0x17a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a71      	ldr	r2, [pc, #452]	; (8000f88 <GPIO_InitPin+0x308>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d016      	beq.n	8000df6 <GPIO_InitPin+0x176>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a6f      	ldr	r2, [pc, #444]	; (8000f8c <GPIO_InitPin+0x30c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00f      	beq.n	8000df2 <GPIO_InitPin+0x172>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a6e      	ldr	r2, [pc, #440]	; (8000f90 <GPIO_InitPin+0x310>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d008      	beq.n	8000dee <GPIO_InitPin+0x16e>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a6c      	ldr	r2, [pc, #432]	; (8000f94 <GPIO_InitPin+0x314>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <GPIO_InitPin+0x16a>
 8000de6:	2307      	movs	r3, #7
 8000de8:	e00a      	b.n	8000e00 <GPIO_InitPin+0x180>
 8000dea:	2300      	movs	r3, #0
 8000dec:	e008      	b.n	8000e00 <GPIO_InitPin+0x180>
 8000dee:	2304      	movs	r3, #4
 8000df0:	e006      	b.n	8000e00 <GPIO_InitPin+0x180>
 8000df2:	2303      	movs	r3, #3
 8000df4:	e004      	b.n	8000e00 <GPIO_InitPin+0x180>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e002      	b.n	8000e00 <GPIO_InitPin+0x180>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <GPIO_InitPin+0x180>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 8000e02:	4a65      	ldr	r2, [pc, #404]	; (8000f98 <GPIO_InitPin+0x318>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	791b      	ldrb	r3, [r3, #4]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	b2d8      	uxtb	r0, r3
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	7bf9      	ldrb	r1, [r7, #15]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	7912      	ldrb	r2, [r2, #4]
 8000e1a:	f002 0203 	and.w	r2, r2, #3
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	495c      	ldr	r1, [pc, #368]	; (8000f98 <GPIO_InitPin+0x318>)
 8000e26:	431a      	orrs	r2, r3
 8000e28:	1c83      	adds	r3, r0, #2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	795b      	ldrb	r3, [r3, #5]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d003      	beq.n	8000e3e <GPIO_InitPin+0x1be>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	795b      	ldrb	r3, [r3, #5]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d13b      	bne.n	8000eb6 <GPIO_InitPin+0x236>
	{
		// speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	791b      	ldrb	r3, [r3, #4]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	400a      	ands	r2, r1
 8000e5a:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	79db      	ldrb	r3, [r3, #7]
 8000e66:	4619      	mov	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	791b      	ldrb	r3, [r3, #4]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	609a      	str	r2, [r3, #8]

		// output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	791b      	ldrb	r3, [r3, #4]
 8000e86:	4619      	mov	r1, r3
 8000e88:	2301      	movs	r3, #1
 8000e8a:	408b      	lsls	r3, r1
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4619      	mov	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	400a      	ands	r2, r1
 8000e96:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	799b      	ldrb	r3, [r3, #6]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	791b      	ldrb	r3, [r3, #4]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4619      	mov	r1, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	605a      	str	r2, [r3, #4]
	}

	// set alternate function bits
	if (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	795b      	ldrb	r3, [r3, #5]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d137      	bne.n	8000f2e <GPIO_InitPin+0x2ae>
	{
		// clear 4 AF bits and set new value
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] &= ~(15UL << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	7912      	ldrb	r2, [r2, #4]
 8000ec6:	08d2      	lsrs	r2, r2, #3
 8000ec8:	b2d0      	uxtb	r0, r2
 8000eca:	4602      	mov	r2, r0
 8000ecc:	3208      	adds	r2, #8
 8000ece:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	791b      	ldrb	r3, [r3, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4011      	ands	r1, r2
 8000eea:	f100 0208 	add.w	r2, r0, #8
 8000eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] |= (hGPIO->PinConfig.AF << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	7912      	ldrb	r2, [r2, #4]
 8000efa:	08d2      	lsrs	r2, r2, #3
 8000efc:	b2d1      	uxtb	r1, r2
 8000efe:	460a      	mov	r2, r1
 8000f00:	3208      	adds	r2, #8
 8000f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7a5b      	ldrb	r3, [r3, #9]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	791b      	ldrb	r3, [r3, #4]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	fa00 f303 	lsl.w	r3, r0, r3
 8000f1a:	461c      	mov	r4, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4608      	mov	r0, r1
 8000f22:	ea42 0104 	orr.w	r1, r2, r4
 8000f26:	f100 0208 	add.w	r2, r0, #8
 8000f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	791b      	ldrb	r3, [r3, #4]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	4619      	mov	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	400a      	ands	r2, r1
 8000f4a:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7a1b      	ldrb	r3, [r3, #8]
 8000f56:	4619      	mov	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	791b      	ldrb	r3, [r3, #4]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	60da      	str	r2, [r3, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	40013c00 	.word	0x40013c00
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40021c00 	.word	0x40021c00
 8000f98:	40013800 	.word	0x40013800

08000f9c <GPIO_TogglePin>:
 * @param[*GPIO] - base address of gpiox peripheral
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *GPIO, uint8_t PinNumber)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
	GPIO->ODR ^= 0b1 << PinNumber;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	78fa      	ldrb	r2, [r7, #3]
 8000fae:	2101      	movs	r1, #1
 8000fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb4:	405a      	eors	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	615a      	str	r2, [r3, #20]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <GPIO_ClearPendingEXTIFlag>:
 *
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_ClearPendingEXTIFlag(uint8_t PinNumber)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0b1 << PinNumber);
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <GPIO_ClearPendingEXTIFlag+0x2c>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <GPIO_ClearPendingEXTIFlag+0x2c>)
 8000fe2:	430b      	orrs	r3, r1
 8000fe4:	6153      	str	r3, [r2, #20]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40013c00 	.word	0x40013c00

08000ff8 <RCC_CalculatePllclk>:

	return 0;
}

static uint32_t RCC_CalculatePllclk(uint32_t source)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <RCC_CalculatePllclk+0x5c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	b29b      	uxth	r3, r3
 8001006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800100a:	81fb      	strh	r3, [r7, #14]
	;
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <RCC_CalculatePllclk+0x5c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	099b      	lsrs	r3, r3, #6
 8001012:	b29b      	uxth	r3, r3
 8001014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001018:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <RCC_CalculatePllclk+0x5c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	0c1b      	lsrs	r3, r3, #16
 8001020:	b29b      	uxth	r3, r3
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	817b      	strh	r3, [r7, #10]
	;

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 8001028:	897b      	ldrh	r3, [r7, #10]
 800102a:	3301      	adds	r3, #1
 800102c:	b29b      	uxth	r3, r3
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	89ba      	ldrh	r2, [r7, #12]
 800103c:	fb02 f203 	mul.w	r2, r2, r3
 8001040:	897b      	ldrh	r3, [r7, #10]
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b07      	cmp	r3, #7
 8001066:	d822      	bhi.n	80010ae <RCC_GetApbPrescaler+0x56>
 8001068:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <RCC_GetApbPrescaler+0x18>)
 800106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	08001091 	.word	0x08001091
 8001074:	080010af 	.word	0x080010af
 8001078:	080010af 	.word	0x080010af
 800107c:	080010af 	.word	0x080010af
 8001080:	08001097 	.word	0x08001097
 8001084:	0800109d 	.word	0x0800109d
 8001088:	080010a3 	.word	0x080010a3
 800108c:	080010a9 	.word	0x080010a9
	{
	case (RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
		break;
 8001094:	e00b      	b.n	80010ae <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 8001096:	2302      	movs	r3, #2
 8001098:	60fb      	str	r3, [r7, #12]
		break;
 800109a:	e008      	b.n	80010ae <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 800109c:	2304      	movs	r3, #4
 800109e:	60fb      	str	r3, [r7, #12]
		break;
 80010a0:	e005      	b.n	80010ae <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 80010a2:	2308      	movs	r3, #8
 80010a4:	60fb      	str	r3, [r7, #12]
		break;
 80010a6:	e002      	b.n	80010ae <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 80010a8:	2310      	movs	r3, #16
 80010aa:	60fb      	str	r3, [r7, #12]
		break;
 80010ac:	bf00      	nop
	}

	return apb_prescaler;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	b29b      	uxth	r3, r3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d840      	bhi.n	8001152 <RCC_GetAhbPrescaler+0x92>
 80010d0:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <RCC_GetAhbPrescaler+0x18>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	08001119 	.word	0x08001119
 80010dc:	08001153 	.word	0x08001153
 80010e0:	08001153 	.word	0x08001153
 80010e4:	08001153 	.word	0x08001153
 80010e8:	08001153 	.word	0x08001153
 80010ec:	08001153 	.word	0x08001153
 80010f0:	08001153 	.word	0x08001153
 80010f4:	08001153 	.word	0x08001153
 80010f8:	0800111f 	.word	0x0800111f
 80010fc:	08001125 	.word	0x08001125
 8001100:	0800112b 	.word	0x0800112b
 8001104:	08001131 	.word	0x08001131
 8001108:	08001137 	.word	0x08001137
 800110c:	0800113d 	.word	0x0800113d
 8001110:	08001143 	.word	0x08001143
 8001114:	0800114b 	.word	0x0800114b
	{
	case (RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 8001118:	2301      	movs	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
		break;
 800111c:	e019      	b.n	8001152 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
		break;
 8001122:	e016      	b.n	8001152 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
		break;
 8001128:	e013      	b.n	8001152 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 800112a:	2308      	movs	r3, #8
 800112c:	60fb      	str	r3, [r7, #12]
		break;
 800112e:	e010      	b.n	8001152 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 8001130:	2310      	movs	r3, #16
 8001132:	60fb      	str	r3, [r7, #12]
		break;
 8001134:	e00d      	b.n	8001152 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 8001136:	2340      	movs	r3, #64	; 0x40
 8001138:	60fb      	str	r3, [r7, #12]
		break;
 800113a:	e00a      	b.n	8001152 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	60fb      	str	r3, [r7, #12]
		break;
 8001140:	e007      	b.n	8001152 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 8001142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001146:	60fb      	str	r3, [r7, #12]
		break;
 8001148:	e003      	b.n	8001152 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 800114a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114e:	60fb      	str	r3, [r7, #12]
		break;
 8001150:	bf00      	nop
	}

	return ahb_prescaler;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	b29b      	uxth	r3, r3
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <RCC_GetSysclk+0x54>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b08      	cmp	r3, #8
 8001172:	d00a      	beq.n	800118a <RCC_GetSysclk+0x26>
 8001174:	2b08      	cmp	r3, #8
 8001176:	d81c      	bhi.n	80011b2 <RCC_GetSysclk+0x4e>
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <RCC_GetSysclk+0x1e>
 800117c:	2b04      	cmp	r3, #4
 800117e:	d002      	beq.n	8001186 <RCC_GetSysclk+0x22>
 8001180:	e017      	b.n	80011b2 <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <RCC_GetSysclk+0x58>)
 8001184:	e016      	b.n	80011b4 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 8001186:	2300      	movs	r3, #0
 8001188:	e014      	b.n	80011b4 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <RCC_GetSysclk+0x54>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <RCC_GetSysclk+0x3a>
 8001196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800119a:	d005      	beq.n	80011a8 <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 800119c:	e009      	b.n	80011b2 <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <RCC_GetSysclk+0x58>)
 80011a0:	f7ff ff2a 	bl	8000ff8 <RCC_CalculatePllclk>
 80011a4:	4603      	mov	r3, r0
 80011a6:	e005      	b.n	80011b4 <RCC_GetSysclk+0x50>
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff ff25 	bl	8000ff8 <RCC_CalculatePllclk>
 80011ae:	4603      	mov	r3, r0
 80011b0:	e000      	b.n	80011b4 <RCC_GetSysclk+0x50>
	}

	return 0;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	00f42400 	.word	0x00f42400

080011c0 <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 80011c6:	f7ff ffcd 	bl	8001164 <RCC_GetSysclk>
 80011ca:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <RCC_GetHclk+0x34>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff70 	bl	80010c0 <RCC_GetAhbPrescaler>
 80011e0:	4603      	mov	r3, r0
 80011e2:	807b      	strh	r3, [r7, #2]
	return sysclk / ahb_prescaler;
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800

080011f8 <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 8001202:	f7ff ffdd 	bl	80011c0 <RCC_GetHclk>
 8001206:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch (plck_x)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d002      	beq.n	8001214 <RCC_GetPclk+0x1c>
 800120e:	2b02      	cmp	r3, #2
 8001210:	d00d      	beq.n	800122e <RCC_GetPclk+0x36>
 8001212:	e019      	b.n	8001248 <RCC_GetPclk+0x50>
	{
	case (1):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >>
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <RCC_GetPclk+0x60>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	0a9b      	lsrs	r3, r3, #10
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff18 	bl	8001058 <RCC_GetApbPrescaler>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE1_Pos);
		break;
 800122c:	e00c      	b.n	8001248 <RCC_GetPclk+0x50>

	case (2):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >>
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <RCC_GetPclk+0x60>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	0b5b      	lsrs	r3, r3, #13
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff0b 	bl	8001058 <RCC_GetApbPrescaler>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE2_Pos);
		break;
 8001246:	bf00      	nop
	}

	return hclk / apb_prescaler;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800

0800125c <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs *freqs)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	freqs->sysclk = RCC_GetSysclk();
 8001264:	f7ff ff7e 	bl	8001164 <RCC_GetSysclk>
 8001268:	4602      	mov	r2, r0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 800126e:	f7ff ffa7 	bl	80011c0 <RCC_GetHclk>
 8001272:	4602      	mov	r2, r0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff ffbd 	bl	80011f8 <RCC_GetPclk>
 800127e:	4602      	mov	r2, r0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 8001284:	2002      	movs	r0, #2
 8001286:	f7ff ffb7 	bl	80011f8 <RCC_GetPclk>
 800128a:	4602      	mov	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	60da      	str	r2, [r3, #12]

	return;
 8001290:	bf00      	nop
}
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <Usart_InitGpioPins>:
#include "stm32f401xe.h"
#include "stm32f401xe_gpio.h"
#include "stm32f401xe_rcc.h"

void Usart_InitGpioPins(USART_Handle_t *p_handle_usart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	GPIO_Handle_t gpio_rx, gpio_tx;

	if (p_handle_usart->p_usartx == USART2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a16      	ldr	r2, [pc, #88]	; (8001300 <Usart_InitGpioPins+0x68>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10b      	bne.n	80012c2 <Usart_InitGpioPins+0x2a>
	{
		// PB6 RX
		gpio_rx.pGPIOx = GPIOA;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <Usart_InitGpioPins+0x6c>)
 80012ac:	617b      	str	r3, [r7, #20]
		gpio_rx.PinConfig.PinNumber = GPIO_PIN_3;
 80012ae:	2303      	movs	r3, #3
 80012b0:	763b      	strb	r3, [r7, #24]

		// PB7 TX
		gpio_tx.pGPIOx = GPIOA;
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <Usart_InitGpioPins+0x6c>)
 80012b4:	60bb      	str	r3, [r7, #8]
		gpio_tx.PinConfig.PinNumber = GPIO_PIN_2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	733b      	strb	r3, [r7, #12]

		// Alternate Function
		gpio_rx.PinConfig.AF = GPIO_PIN_AF_AF7;
 80012ba:	2307      	movs	r3, #7
 80012bc:	777b      	strb	r3, [r7, #29]
		gpio_tx.PinConfig.AF = GPIO_PIN_AF_AF7;
 80012be:	2307      	movs	r3, #7
 80012c0:	747b      	strb	r3, [r7, #17]
	}

	// Mode AF
	gpio_rx.PinConfig.Mode = GPIO_PIN_MODE_AF;
 80012c2:	2302      	movs	r3, #2
 80012c4:	767b      	strb	r3, [r7, #25]
	gpio_tx.PinConfig.Mode = GPIO_PIN_MODE_AF;
 80012c6:	2302      	movs	r3, #2
 80012c8:	737b      	strb	r3, [r7, #13]

	// Output type open drain
	gpio_rx.PinConfig.OutputType = GPIO_PIN_OT_OD;
 80012ca:	2301      	movs	r3, #1
 80012cc:	76bb      	strb	r3, [r7, #26]
	gpio_tx.PinConfig.OutputType = GPIO_PIN_OT_OD;
 80012ce:	2301      	movs	r3, #1
 80012d0:	73bb      	strb	r3, [r7, #14]

	// Output speed very high
	gpio_rx.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	76fb      	strb	r3, [r7, #27]
	gpio_tx.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	73fb      	strb	r3, [r7, #15]

	// Pull ups
	gpio_rx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	773b      	strb	r3, [r7, #28]
	gpio_tx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	743b      	strb	r3, [r7, #16]

	GPIO_InitPin(&gpio_rx);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fcca 	bl	8000c80 <GPIO_InitPin>
	GPIO_InitPin(&gpio_tx);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fcc5 	bl	8000c80 <GPIO_InitPin>
}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40004400 	.word	0x40004400
 8001304:	40020000 	.word	0x40020000

08001308 <Usart_SetBaudDivider>:

static void Usart_SetBaudDivider(USART_Handle_t *p_handle_usart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	// in equation we have 8 * (2 - OVER8)
	uint8_t usart_divmulti =
			8
					* (2
							- (1U
									& (p_handle_usart->p_usartx->CR1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
											>> USART_CR1_OVER8_Pos)));
 8001316:	0bdb      	lsrs	r3, r3, #15
									& (p_handle_usart->p_usartx->CR1
 8001318:	f003 0301 	and.w	r3, r3, #1
							- (1U
 800131c:	f1c3 0302 	rsb	r3, r3, #2
	uint8_t usart_divmulti =
 8001320:	b2db      	uxtb	r3, r3
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	f887 3020 	strb.w	r3, [r7, #32]
	// read clock values from rcc registers
	RCC_GetClockFrequencies(&clock_freqs);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff95 	bl	800125c <RCC_GetClockFrequencies>

	if (p_handle_usart->p_usartx == USART2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a36      	ldr	r2, [pc, #216]	; (8001410 <Usart_SetBaudDivider+0x108>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d102      	bne.n	8001342 <Usart_SetBaudDivider+0x3a>
	{
		pclk_freq = clock_freqs.pclk1;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
 8001340:	e001      	b.n	8001346 <Usart_SetBaudDivider+0x3e>
	}
	else
	{
		// usart1 and usart6 are on apb2
		pclk_freq = clock_freqs.pclk2;
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
	}

	baud_div = ((float) pclk_freq
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 6a67 	vcvt.f32.u32	s13, s15
			/ (p_handle_usart->usart_config.baud_rate * usart_divmulti));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
	baud_div = ((float) pclk_freq
 8001364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001368:	edc7 7a07 	vstr	s15, [r7, #28]
	baud_div_mantissa = baud_div;
 800136c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001374:	ee17 3a90 	vmov	r3, s15
 8001378:	847b      	strh	r3, [r7, #34]	; 0x22
	// rounding number to get correct fraction
	baud_div_fraction = round((baud_div - baud_div_mantissa) * usart_divmulti);
 800137a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	ed97 7a07 	vldr	s14, [r7, #28]
 8001388:	ee37 7a67 	vsub.f32	s14, s14, s15
 800138c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139c:	ee17 0a90 	vmov	r0, s15
 80013a0:	f7ff f87c 	bl	800049c <__aeabi_f2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	ec43 2b10 	vmov	d0, r2, r3
 80013ac:	f000 f8ca 	bl	8001544 <round>
 80013b0:	ec53 2b10 	vmov	r2, r3, d0
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff f8c8 	bl	800054c <__aeabi_d2uiz>
 80013bc:	4603      	mov	r3, r0
 80013be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	// if after rounding we have value bigger or equal to oversampling then we
	// need to carry +1 to mantissa and set fraction to 0. like 50,99 -> 51;
	if (baud_div_fraction >= usart_divmulti)
 80013c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80013c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d305      	bcc.n	80013da <Usart_SetBaudDivider+0xd2>
	{
		baud_div_fraction = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		baud_div_mantissa++;
 80013d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013d6:	3301      	adds	r3, #1
 80013d8:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	// insert values to brr register
	p_handle_usart->p_usartx->BRR = 0;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
			<< USART_BRR_DIV_Mantissa_Pos);
 80013e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	4619      	mov	r1, r3
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6899      	ldr	r1, [r3, #8]
			<< USART_BRR_DIV_Fraction_Pos);
 80013fc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	609a      	str	r2, [r3, #8]
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40004400 	.word	0x40004400

08001414 <Usart_Init>:

void Usart_Init(USART_Handle_t *p_handle_usart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	Usart_InitGpioPins(p_handle_usart);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff3b 	bl	8001298 <Usart_InitGpioPins>

	//	1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_UE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001430:	60da      	str	r2, [r3, #12]
	//	2. Program the M bit in USART_CR1 to define the word length.
	p_handle_usart->p_usartx->CR1 |= (p_handle_usart->usart_config.word_lenght
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7b1b      	ldrb	r3, [r3, #12]
			<< USART_CR1_M_Pos);
 800143c:	031b      	lsls	r3, r3, #12
 800143e:	4619      	mov	r1, r3
	p_handle_usart->p_usartx->CR1 |= (p_handle_usart->usart_config.word_lenght
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	60da      	str	r2, [r3, #12]
	//	3. Program the number of stop bits in USART_CR2.
	p_handle_usart->p_usartx->CR1 |= (p_handle_usart->usart_config.stop_bits
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7b5b      	ldrb	r3, [r3, #13]
			<< USART_CR2_STOP_Pos);
 8001452:	031b      	lsls	r3, r3, #12
 8001454:	4619      	mov	r1, r3
	p_handle_usart->p_usartx->CR1 |= (p_handle_usart->usart_config.stop_bits
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	60da      	str	r2, [r3, #12]
	//	5. Select the desired baud rate using the USART_BRR register.
	Usart_SetBaudDivider(p_handle_usart);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff52 	bl	8001308 <Usart_SetBaudDivider>

	return;
 8001464:	bf00      	nop
}
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <Usart_RecieveDMA>:
	}
}

void Usart_RecieveDMA(USART_Handle_t *p_handle_usart, uint8_t *p_data_buffer,
		uint32_t data_lenght)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	// enable recieve mode
	p_handle_usart->p_usartx->CR1 |= USART_CR1_RE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0204 	orr.w	r2, r2, #4
 8001486:	60da      	str	r2, [r3, #12]
	p_handle_usart->p_usartx->CR3 |= USART_CR3_DMAR;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001496:	615a      	str	r2, [r3, #20]

	DMA_WriteAdresses(p_handle_usart->usart_dma.p_dma_stream_rx,
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6898      	ldr	r0, [r3, #8]
			(uint32_t*) &(p_handle_usart->p_usartx->DR),
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	1d19      	adds	r1, r3, #4
	DMA_WriteAdresses(p_handle_usart->usart_dma.p_dma_stream_rx,
 80014a2:	2300      	movs	r3, #0
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	f7ff fad7 	bl	8000a58 <DMA_WriteAdresses>
			(uint32_t*) p_data_buffer, NULL);


	// configure the total number of bytes to be transferred to the DMA
	p_handle_usart->usart_dma.p_dma_stream_rx->NDTR = data_lenght;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	605a      	str	r2, [r3, #4]

	// configure irs flags
	p_handle_usart->usart_dma.p_dma_stream_rx->CR |= DMA_SxCR_TCIE;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f042 0210 	orr.w	r2, r2, #16
 80014c0:	601a      	str	r2, [r3, #0]
	p_handle_usart->p_usartx->CR1 |= USART_CR1_RXNEIE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0220 	orr.w	r2, r2, #32
 80014d0:	60da      	str	r2, [r3, #12]

	// activate DMA channel transfer
	p_handle_usart->usart_dma.p_dma_stream_rx->CR |= DMA_SxCR_EN;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <__libc_init_array>:
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	4d0d      	ldr	r5, [pc, #52]	; (8001524 <__libc_init_array+0x38>)
 80014f0:	4c0d      	ldr	r4, [pc, #52]	; (8001528 <__libc_init_array+0x3c>)
 80014f2:	1b64      	subs	r4, r4, r5
 80014f4:	10a4      	asrs	r4, r4, #2
 80014f6:	2600      	movs	r6, #0
 80014f8:	42a6      	cmp	r6, r4
 80014fa:	d109      	bne.n	8001510 <__libc_init_array+0x24>
 80014fc:	4d0b      	ldr	r5, [pc, #44]	; (800152c <__libc_init_array+0x40>)
 80014fe:	4c0c      	ldr	r4, [pc, #48]	; (8001530 <__libc_init_array+0x44>)
 8001500:	f000 f866 	bl	80015d0 <_init>
 8001504:	1b64      	subs	r4, r4, r5
 8001506:	10a4      	asrs	r4, r4, #2
 8001508:	2600      	movs	r6, #0
 800150a:	42a6      	cmp	r6, r4
 800150c:	d105      	bne.n	800151a <__libc_init_array+0x2e>
 800150e:	bd70      	pop	{r4, r5, r6, pc}
 8001510:	f855 3b04 	ldr.w	r3, [r5], #4
 8001514:	4798      	blx	r3
 8001516:	3601      	adds	r6, #1
 8001518:	e7ee      	b.n	80014f8 <__libc_init_array+0xc>
 800151a:	f855 3b04 	ldr.w	r3, [r5], #4
 800151e:	4798      	blx	r3
 8001520:	3601      	adds	r6, #1
 8001522:	e7f2      	b.n	800150a <__libc_init_array+0x1e>
 8001524:	080015f8 	.word	0x080015f8
 8001528:	080015f8 	.word	0x080015f8
 800152c:	080015f8 	.word	0x080015f8
 8001530:	080015fc 	.word	0x080015fc

08001534 <memset>:
 8001534:	4402      	add	r2, r0
 8001536:	4603      	mov	r3, r0
 8001538:	4293      	cmp	r3, r2
 800153a:	d100      	bne.n	800153e <memset+0xa>
 800153c:	4770      	bx	lr
 800153e:	f803 1b01 	strb.w	r1, [r3], #1
 8001542:	e7f9      	b.n	8001538 <memset+0x4>

08001544 <round>:
 8001544:	ec51 0b10 	vmov	r0, r1, d0
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800154e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8001552:	2c13      	cmp	r4, #19
 8001554:	ee10 2a10 	vmov	r2, s0
 8001558:	460b      	mov	r3, r1
 800155a:	dc19      	bgt.n	8001590 <round+0x4c>
 800155c:	2c00      	cmp	r4, #0
 800155e:	da09      	bge.n	8001574 <round+0x30>
 8001560:	3401      	adds	r4, #1
 8001562:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8001566:	d103      	bne.n	8001570 <round+0x2c>
 8001568:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800156c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001570:	2100      	movs	r1, #0
 8001572:	e028      	b.n	80015c6 <round+0x82>
 8001574:	4d15      	ldr	r5, [pc, #84]	; (80015cc <round+0x88>)
 8001576:	4125      	asrs	r5, r4
 8001578:	ea01 0605 	and.w	r6, r1, r5
 800157c:	4332      	orrs	r2, r6
 800157e:	d00e      	beq.n	800159e <round+0x5a>
 8001580:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001584:	fa42 f404 	asr.w	r4, r2, r4
 8001588:	4423      	add	r3, r4
 800158a:	ea23 0305 	bic.w	r3, r3, r5
 800158e:	e7ef      	b.n	8001570 <round+0x2c>
 8001590:	2c33      	cmp	r4, #51	; 0x33
 8001592:	dd07      	ble.n	80015a4 <round+0x60>
 8001594:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001598:	d101      	bne.n	800159e <round+0x5a>
 800159a:	f7fe fe21 	bl	80001e0 <__adddf3>
 800159e:	ec41 0b10 	vmov	d0, r0, r1
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
 80015a4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80015a8:	f04f 35ff 	mov.w	r5, #4294967295
 80015ac:	40f5      	lsrs	r5, r6
 80015ae:	4228      	tst	r0, r5
 80015b0:	d0f5      	beq.n	800159e <round+0x5a>
 80015b2:	2101      	movs	r1, #1
 80015b4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80015b8:	fa01 f404 	lsl.w	r4, r1, r4
 80015bc:	1912      	adds	r2, r2, r4
 80015be:	bf28      	it	cs
 80015c0:	185b      	addcs	r3, r3, r1
 80015c2:	ea22 0105 	bic.w	r1, r2, r5
 80015c6:	4608      	mov	r0, r1
 80015c8:	4619      	mov	r1, r3
 80015ca:	e7e8      	b.n	800159e <round+0x5a>
 80015cc:	000fffff 	.word	0x000fffff

080015d0 <_init>:
 80015d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d2:	bf00      	nop
 80015d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d6:	bc08      	pop	{r3}
 80015d8:	469e      	mov	lr, r3
 80015da:	4770      	bx	lr

080015dc <_fini>:
 80015dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015de:	bf00      	nop
 80015e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015e2:	bc08      	pop	{r3}
 80015e4:	469e      	mov	lr, r3
 80015e6:	4770      	bx	lr
