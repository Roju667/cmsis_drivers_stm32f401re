
cmsis_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fe8  08001fe8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001fe8  08001fe8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fe8  08001fe8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fe8  08001fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fec  08001fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000064  08002054  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002054  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005471  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ff7  00000000  00000000  00025505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  00026500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00026760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f20f  00000000  00000000  00026928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003801  00000000  00000000  00035b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000568e0  00000000  00000000  00039338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008fc18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c08  00000000  00000000  0008fc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001ee8 	.word	0x08001ee8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001ee8 	.word	0x08001ee8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2uiz>:
 8000608:	004a      	lsls	r2, r1, #1
 800060a:	d211      	bcs.n	8000630 <__aeabi_d2uiz+0x28>
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d211      	bcs.n	8000636 <__aeabi_d2uiz+0x2e>
 8000612:	d50d      	bpl.n	8000630 <__aeabi_d2uiz+0x28>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d40e      	bmi.n	800063c <__aeabi_d2uiz+0x34>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	fa23 f002 	lsr.w	r0, r3, r2
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d102      	bne.n	8000642 <__aeabi_d2uiz+0x3a>
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr

08000648 <main>:
 ******************************************************************************
 */
#include "wwdg_example.h"

int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	wwdg_example();
 800064c:	f000 f92c 	bl	80008a8 <wwdg_example>
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000660:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <_sbrk+0x5c>)
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <_sbrk+0x60>)
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <_sbrk+0x64>)
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <_sbrk+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <_sbrk+0x64>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	429a      	cmp	r2, r3
 8000686:	d207      	bcs.n	8000698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000688:	f000 ff90 	bl	80015ac <__errno>
 800068c:	4603      	mov	r3, r0
 800068e:	220c      	movs	r2, #12
 8000690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	e009      	b.n	80006ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <_sbrk+0x64>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <_sbrk+0x64>)
 80006a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006aa:	68fb      	ldr	r3, [r7, #12]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20018000 	.word	0x20018000
 80006b8:	00000400 	.word	0x00000400
 80006bc:	20000080 	.word	0x20000080
 80006c0:	200000b0 	.word	0x200000b0

080006c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <SystemInit+0x20>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <SystemInit+0x20>)
 80006d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <PrintResetSource>:
#include "stm32f401xe_rcc.h"
#include "stm32f401xe_usart.h"
#include "utilities.h"

void PrintResetSource(USART_Handle_t *p_usartx)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	if (RCC->CSR & RCC_CSR_LPWRRSTF)
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <PrintResetSource+0xb4>)
 80006f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	da04      	bge.n	8000702 <PrintResetSource+0x1a>
	{
		USART_Transmit(p_usartx, (uint8_t*) "Low-power reset \n\r", 16);
 80006f8:	2210      	movs	r2, #16
 80006fa:	4929      	ldr	r1, [pc, #164]	; (80007a0 <PrintResetSource+0xb8>)
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 fe73 	bl	80013e8 <USART_Transmit>
	}

	if (RCC->CSR & RCC_CSR_WWDGRSTF)
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <PrintResetSource+0xb4>)
 8000704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000706:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <PrintResetSource+0x30>
	{
		USART_Transmit(p_usartx, (uint8_t*) "WWDG reset \n\r", 16);
 800070e:	2210      	movs	r2, #16
 8000710:	4924      	ldr	r1, [pc, #144]	; (80007a4 <PrintResetSource+0xbc>)
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f000 fe68 	bl	80013e8 <USART_Transmit>
	}

	if (RCC->CSR & RCC_CSR_IWDGRSTF)
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <PrintResetSource+0xb4>)
 800071a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800071c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000720:	2b00      	cmp	r3, #0
 8000722:	d004      	beq.n	800072e <PrintResetSource+0x46>
	{
		USART_Transmit(p_usartx, (uint8_t*) "IWDG reset \n\r", 16);
 8000724:	2210      	movs	r2, #16
 8000726:	4920      	ldr	r1, [pc, #128]	; (80007a8 <PrintResetSource+0xc0>)
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 fe5d 	bl	80013e8 <USART_Transmit>
	}

	if (RCC->CSR & RCC_CSR_SFTRSTF)
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <PrintResetSource+0xb4>)
 8000730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	2b00      	cmp	r3, #0
 8000738:	d004      	beq.n	8000744 <PrintResetSource+0x5c>
	{
		USART_Transmit(p_usartx, (uint8_t*) "Software reset \n\r", 16);
 800073a:	2210      	movs	r2, #16
 800073c:	491b      	ldr	r1, [pc, #108]	; (80007ac <PrintResetSource+0xc4>)
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 fe52 	bl	80013e8 <USART_Transmit>
	}

	if (RCC->CSR & RCC_CSR_PORRSTF)
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <PrintResetSource+0xb4>)
 8000746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800074c:	2b00      	cmp	r3, #0
 800074e:	d004      	beq.n	800075a <PrintResetSource+0x72>
	{
		USART_Transmit(p_usartx, (uint8_t*) "POR/PDR reset \n\r", 16);
 8000750:	2210      	movs	r2, #16
 8000752:	4917      	ldr	r1, [pc, #92]	; (80007b0 <PrintResetSource+0xc8>)
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 fe47 	bl	80013e8 <USART_Transmit>
	}

	if (RCC->CSR & RCC_CSR_PINRSTF)
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <PrintResetSource+0xb4>)
 800075c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800075e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000762:	2b00      	cmp	r3, #0
 8000764:	d004      	beq.n	8000770 <PrintResetSource+0x88>
	{
		USART_Transmit(p_usartx, (uint8_t*) "Pin reset \n\r", 16);
 8000766:	2210      	movs	r2, #16
 8000768:	4912      	ldr	r1, [pc, #72]	; (80007b4 <PrintResetSource+0xcc>)
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 fe3c 	bl	80013e8 <USART_Transmit>
	}

	if (RCC->CSR & RCC_CSR_BORRSTF)
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <PrintResetSource+0xb4>)
 8000772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000778:	2b00      	cmp	r3, #0
 800077a:	d004      	beq.n	8000786 <PrintResetSource+0x9e>
	{
		USART_Transmit(p_usartx, (uint8_t*) "BOR reset \n\r", 16);
 800077c:	2210      	movs	r2, #16
 800077e:	490e      	ldr	r1, [pc, #56]	; (80007b8 <PrintResetSource+0xd0>)
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 fe31 	bl	80013e8 <USART_Transmit>
	}

	RCC->CSR |= RCC_CSR_RMVF;
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <PrintResetSource+0xb4>)
 8000788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <PrintResetSource+0xb4>)
 800078c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000790:	6753      	str	r3, [r2, #116]	; 0x74

	return;
 8000792:	bf00      	nop
}
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	08001f00 	.word	0x08001f00
 80007a4:	08001f14 	.word	0x08001f14
 80007a8:	08001f24 	.word	0x08001f24
 80007ac:	08001f34 	.word	0x08001f34
 80007b0:	08001f48 	.word	0x08001f48
 80007b4:	08001f5c 	.word	0x08001f5c
 80007b8:	08001f6c 	.word	0x08001f6c

080007bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007c2:	490e      	ldr	r1, [pc, #56]	; (80007fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007c4:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007d8:	4c0b      	ldr	r4, [pc, #44]	; (8000808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007e6:	f7ff ff6d 	bl	80006c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ea:	f000 fee5 	bl	80015b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ee:	f7ff ff2b 	bl	8000648 <main>
  bx  lr    
 80007f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000800:	08001ff0 	.word	0x08001ff0
  ldr r2, =_sbss
 8000804:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000808:	200000b0 	.word	0x200000b0

0800080c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC_IRQHandler>
	...

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f7ff ffc2 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <wwdg_example>:
volatile uint32_t system_ticks = 0;

USART_Handle_t p_usart2;

void wwdg_example(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b097      	sub	sp, #92	; 0x5c
 80008ac:	af02      	add	r7, sp, #8
	uint8_t start_program, stop_program;
	uint8_t msg[64];
	uint32_t time_systick, time_wwdg;

	// config peripherals
	GPIOConfig();
 80008ae:	f000 f85f 	bl	8000970 <GPIOConfig>
	USART2Config(&p_usart2);
 80008b2:	482b      	ldr	r0, [pc, #172]	; (8000960 <wwdg_example+0xb8>)
 80008b4:	f000 f872 	bl	800099c <USART2Config>
	PrintResetSource(&p_usart2);
 80008b8:	4829      	ldr	r0, [pc, #164]	; (8000960 <wwdg_example+0xb8>)
 80008ba:	f7ff ff15 	bl	80006e8 <PrintResetSource>

	// set prescaler and window value (64 - 127)
	// if watchdog is fed earlier than window value then reset

	WWDG_SetBasicParameters(kWwdgPrescaler4, 127);
 80008be:	217f      	movs	r1, #127	; 0x7f
 80008c0:	2002      	movs	r0, #2
 80008c2:	f000 fe13 	bl	80014ec <WWDG_SetBasicParameters>
	// start watchdog and systick
	WWDG_StartWatchdog();
 80008c6:	f000 fe3b 	bl	8001540 <WWDG_StartWatchdog>
	SysTick_Config(16000);
 80008ca:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80008ce:	f7ff ffc9 	bl	8000864 <SysTick_Config>
	start_program = WWDG_GetWatchdog();
 80008d2:	f000 fe5b 	bl	800158c <WWDG_GetWatchdog>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	while (1)
	{
		for (uint32_t i = 0; i < 10000; i++)
 80008dc:	2300      	movs	r3, #0
 80008de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008e0:	e002      	b.n	80008e8 <wwdg_example+0x40>
 80008e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008e4:	3301      	adds	r3, #1
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d9f7      	bls.n	80008e2 <wwdg_example+0x3a>
		{
		}
		GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008f2:	2105      	movs	r1, #5
 80008f4:	481b      	ldr	r0, [pc, #108]	; (8000964 <wwdg_example+0xbc>)
 80008f6:	f000 fa73 	bl	8000de0 <GPIO_TogglePin>

		// after this loop calculate time from watchdog source and from systick source
		stop_program = WWDG_GetWatchdog();
 80008fa:	f000 fe47 	bl	800158c <WWDG_GetWatchdog>
 80008fe:	4603      	mov	r3, r0
 8000900:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		time_systick = system_ticks;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <wwdg_example+0xc0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	647b      	str	r3, [r7, #68]	; 0x44
		time_wwdg = (start_program - stop_program) * WWDG_GetTimePerWwdgTick();
 800090a:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800090e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	461c      	mov	r4, r3
 8000916:	f000 fdb7 	bl	8001488 <WWDG_GetTimePerWwdgTick>
 800091a:	4603      	mov	r3, r0
 800091c:	fb03 f304 	mul.w	r3, r3, r4
 8000920:	643b      	str	r3, [r7, #64]	; 0x40

		// print calculations on uart
		sprintf((char*) msg,
				"Systick : %ld [ms] ; WWDG : %ld [us] ; diff %ld [us] \n\r",
				time_systick, time_wwdg, (time_wwdg - (time_systick * 1000)));
 8000922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000928:	fb02 f303 	mul.w	r3, r2, r3
		sprintf((char*) msg,
 800092c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	4638      	mov	r0, r7
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <wwdg_example+0xc4>)
 800093a:	f000 fe61 	bl	8001600 <siprintf>
		USART_Transmit(&p_usart2, msg, strlen((char*) msg));
 800093e:	463b      	mov	r3, r7
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc4d 	bl	80001e0 <strlen>
 8000946:	4602      	mov	r2, r0
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <wwdg_example+0xb8>)
 800094e:	f000 fd4b 	bl	80013e8 <USART_Transmit>

		// reload watchdog and systick
		WWDG_ReloadWatchdog();
 8000952:	f000 fe0b 	bl	800156c <WWDG_ReloadWatchdog>
		system_ticks = 0;
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <wwdg_example+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < 10000; i++)
 800095c:	e7be      	b.n	80008dc <wwdg_example+0x34>
 800095e:	bf00      	nop
 8000960:	20000090 	.word	0x20000090
 8000964:	40020000 	.word	0x40020000
 8000968:	20000084 	.word	0x20000084
 800096c:	08001f7c 	.word	0x08001f7c

08000970 <GPIOConfig>:

/*
 * configure LED on the board
 */
void GPIOConfig(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 8000976:	2301      	movs	r3, #1
 8000978:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 800097a:	2305      	movs	r3, #5
 800097c:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 800097e:	2300      	movs	r3, #0
 8000980:	72bb      	strb	r3, [r7, #10]
	GPIOx.pGPIOx = GPIOA;
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <GPIOConfig+0x28>)
 8000984:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f89b 	bl	8000ac4 <GPIO_InitPin>

	return;
 800098e:	bf00      	nop
}
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40020000 	.word	0x40020000

0800099c <USART2Config>:
 * - set basic parameters
 * - set baud rate
 * - enable usart irqs
 */
void USART2Config(USART_Handle_t *p_usart2)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	p_usart2->p_usartx = USART2;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <USART2Config+0x48>)
 80009a8:	601a      	str	r2, [r3, #0]
	p_usart2->usart_dma.p_dma_stream_tx = DMA1_Stream6;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <USART2Config+0x4c>)
 80009ae:	605a      	str	r2, [r3, #4]
	p_usart2->usart_dma.p_dma_stream_rx = DMA1_Stream5;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <USART2Config+0x50>)
 80009b4:	609a      	str	r2, [r3, #8]
	USART_SetBasicParameters(p_usart2, kUsartWordLenght8, kUsartStopBits0,
 80009b6:	2302      	movs	r3, #2
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 fcc3 	bl	8001348 <USART_SetBasicParameters>
			kUsartNoParity);
	USART_SetBaudRate(p_usart2, 115200, kUsartOversampling16);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f000 fbfb 	bl	80011c4 <USART_SetBaudRate>
	USART_EnableIRQs(p_usart2, USART_CR1_IDLEIE, 0, USART_CR3_EIE);
 80009ce:	2301      	movs	r3, #1
 80009d0:	2200      	movs	r2, #0
 80009d2:	2110      	movs	r1, #16
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 fc87 	bl	80012e8 <USART_EnableIRQs>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40004400 	.word	0x40004400
 80009e8:	400260a0 	.word	0x400260a0
 80009ec:	40026088 	.word	0x40026088

080009f0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	system_ticks++;
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <SysTick_Handler+0x18>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <SysTick_Handler+0x18>)
 80009fc:	6013      	str	r3, [r2, #0]
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	20000084 	.word	0x20000084

08000a0c <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
static void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a24      	ldr	r2, [pc, #144]	; (8000aa8 <GPIO_ClockEnable+0x9c>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d106      	bne.n	8000a2a <GPIO_ClockEnable+0x1e>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a22      	ldr	r2, [pc, #136]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	e035      	b.n	8000a96 <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOB)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <GPIO_ClockEnable+0xa4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d106      	bne.n	8000a40 <GPIO_ClockEnable+0x34>
	{
		RCC_CLOCK_GPIOB_ENABLE();
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	e02a      	b.n	8000a96 <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOC)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <GPIO_ClockEnable+0xa8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d106      	bne.n	8000a56 <GPIO_ClockEnable+0x4a>
	{
		RCC_CLOCK_GPIOC_ENABLE();
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a17      	ldr	r2, [pc, #92]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30
 8000a54:	e01f      	b.n	8000a96 <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOD)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <GPIO_ClockEnable+0xac>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d106      	bne.n	8000a6c <GPIO_ClockEnable+0x60>
	{
		RCC_CLOCK_GPIOD_ENABLE();
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	e014      	b.n	8000a96 <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a13      	ldr	r2, [pc, #76]	; (8000abc <GPIO_ClockEnable+0xb0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d106      	bne.n	8000a82 <GPIO_ClockEnable+0x76>
	{
		RCC_CLOCK_GPIOE_ENABLE();
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	e009      	b.n	8000a96 <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOH)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <GPIO_ClockEnable+0xb4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d105      	bne.n	8000a96 <GPIO_ClockEnable+0x8a>
	{
		RCC_CLOCK_GPIOH_ENABLE();
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a07      	ldr	r2, [pc, #28]	; (8000aac <GPIO_ClockEnable+0xa0>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a96:	f3bf 8f4f 	dsb	sy
}
 8000a9a:	bf00      	nop
	// this operation is unnecessary here because configuration library is taking
	// more than 2 clock cycles between clock enable and configuring register, i
	// leave it here to remind myself that stmf401x has a limitation that is
	// described in errata point 2.1.6
	__DSB();
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40021c00 	.word	0x40021c00

08000ac4 <GPIO_InitPin>:
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base
 * address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	// enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff9b 	bl	8000a0c <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	795b      	ldrb	r3, [r3, #5]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d81f      	bhi.n	8000b1e <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	2103      	movs	r1, #3
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	4619      	mov	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	400a      	ands	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]
		hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	795b      	ldrb	r3, [r3, #5]
 8000b06:	4619      	mov	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	791b      	ldrb	r3, [r3, #4]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	4619      	mov	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e0a9      	b.n	8000c72 <GPIO_InitPin+0x1ae>
	else
	{
		// IRQ mode

		// set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	4619      	mov	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	400a      	ands	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
		// interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000b3c:	4b9e      	ldr	r3, [pc, #632]	; (8000db8 <GPIO_InitPin+0x2f4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	7912      	ldrb	r2, [r2, #4]
 8000b44:	4611      	mov	r1, r2
 8000b46:	2201      	movs	r2, #1
 8000b48:	408a      	lsls	r2, r1
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4a9a      	ldr	r2, [pc, #616]	; (8000db8 <GPIO_InitPin+0x2f4>)
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	6013      	str	r3, [r2, #0]

		// rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	795b      	ldrb	r3, [r3, #5]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d003      	beq.n	8000b62 <GPIO_InitPin+0x9e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	795b      	ldrb	r3, [r3, #5]
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d10a      	bne.n	8000b78 <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000b62:	4b95      	ldr	r3, [pc, #596]	; (8000db8 <GPIO_InitPin+0x2f4>)
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	7912      	ldrb	r2, [r2, #4]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	408a      	lsls	r2, r1
 8000b70:	4611      	mov	r1, r2
 8000b72:	4a91      	ldr	r2, [pc, #580]	; (8000db8 <GPIO_InitPin+0x2f4>)
 8000b74:	430b      	orrs	r3, r1
 8000b76:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	795b      	ldrb	r3, [r3, #5]
 8000b7c:	2b05      	cmp	r3, #5
 8000b7e:	d003      	beq.n	8000b88 <GPIO_InitPin+0xc4>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	795b      	ldrb	r3, [r3, #5]
 8000b84:	2b06      	cmp	r3, #6
 8000b86:	d10a      	bne.n	8000b9e <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000b88:	4b8b      	ldr	r3, [pc, #556]	; (8000db8 <GPIO_InitPin+0x2f4>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	7912      	ldrb	r2, [r2, #4]
 8000b90:	4611      	mov	r1, r2
 8000b92:	2201      	movs	r2, #1
 8000b94:	408a      	lsls	r2, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	4a87      	ldr	r2, [pc, #540]	; (8000db8 <GPIO_InitPin+0x2f4>)
 8000b9a:	430b      	orrs	r3, r1
 8000b9c:	6093      	str	r3, [r2, #8]
		}

		// enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	791b      	ldrb	r3, [r3, #4]
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d80c      	bhi.n	8000bc0 <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 8000ba6:	4b85      	ldr	r3, [pc, #532]	; (8000dbc <GPIO_InitPin+0x2f8>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	7912      	ldrb	r2, [r2, #4]
 8000bae:	3206      	adds	r2, #6
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4a80      	ldr	r2, [pc, #512]	; (8000dbc <GPIO_InitPin+0x2f8>)
 8000bba:	430b      	orrs	r3, r1
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e010      	b.n	8000be2 <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	791b      	ldrb	r3, [r3, #4]
 8000bc4:	2b09      	cmp	r3, #9
 8000bc6:	d806      	bhi.n	8000bd6 <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 8000bc8:	4b7c      	ldr	r3, [pc, #496]	; (8000dbc <GPIO_InitPin+0x2f8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a7b      	ldr	r2, [pc, #492]	; (8000dbc <GPIO_InitPin+0x2f8>)
 8000bce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e005      	b.n	8000be2 <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 8000bd6:	4b79      	ldr	r3, [pc, #484]	; (8000dbc <GPIO_InitPin+0x2f8>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4a78      	ldr	r2, [pc, #480]	; (8000dbc <GPIO_InitPin+0x2f8>)
 8000bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be0:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000be2:	4b77      	ldr	r3, [pc, #476]	; (8000dc0 <GPIO_InitPin+0x2fc>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a76      	ldr	r2, [pc, #472]	; (8000dc0 <GPIO_InitPin+0x2fc>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a74      	ldr	r2, [pc, #464]	; (8000dc4 <GPIO_InitPin+0x300>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d024      	beq.n	8000c42 <GPIO_InitPin+0x17e>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a72      	ldr	r2, [pc, #456]	; (8000dc8 <GPIO_InitPin+0x304>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d01d      	beq.n	8000c3e <GPIO_InitPin+0x17a>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a71      	ldr	r2, [pc, #452]	; (8000dcc <GPIO_InitPin+0x308>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d016      	beq.n	8000c3a <GPIO_InitPin+0x176>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a6f      	ldr	r2, [pc, #444]	; (8000dd0 <GPIO_InitPin+0x30c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d00f      	beq.n	8000c36 <GPIO_InitPin+0x172>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a6e      	ldr	r2, [pc, #440]	; (8000dd4 <GPIO_InitPin+0x310>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d008      	beq.n	8000c32 <GPIO_InitPin+0x16e>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a6c      	ldr	r2, [pc, #432]	; (8000dd8 <GPIO_InitPin+0x314>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <GPIO_InitPin+0x16a>
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	e00a      	b.n	8000c44 <GPIO_InitPin+0x180>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e008      	b.n	8000c44 <GPIO_InitPin+0x180>
 8000c32:	2304      	movs	r3, #4
 8000c34:	e006      	b.n	8000c44 <GPIO_InitPin+0x180>
 8000c36:	2303      	movs	r3, #3
 8000c38:	e004      	b.n	8000c44 <GPIO_InitPin+0x180>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	e002      	b.n	8000c44 <GPIO_InitPin+0x180>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <GPIO_InitPin+0x180>
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 8000c46:	4a65      	ldr	r2, [pc, #404]	; (8000ddc <GPIO_InitPin+0x318>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	791b      	ldrb	r3, [r3, #4]
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	b2d8      	uxtb	r0, r3
 8000c50:	4603      	mov	r3, r0
 8000c52:	3302      	adds	r3, #2
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	7bf9      	ldrb	r1, [r7, #15]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	7912      	ldrb	r2, [r2, #4]
 8000c5e:	f002 0203 	and.w	r2, r2, #3
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	fa01 f202 	lsl.w	r2, r1, r2
 8000c68:	495c      	ldr	r1, [pc, #368]	; (8000ddc <GPIO_InitPin+0x318>)
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	1c83      	adds	r3, r0, #2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	795b      	ldrb	r3, [r3, #5]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d003      	beq.n	8000c82 <GPIO_InitPin+0x1be>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	795b      	ldrb	r3, [r3, #5]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d13b      	bne.n	8000cfa <GPIO_InitPin+0x236>
	{
		// speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	791b      	ldrb	r3, [r3, #4]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2103      	movs	r1, #3
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4619      	mov	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	79db      	ldrb	r3, [r3, #7]
 8000caa:	4619      	mov	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	791b      	ldrb	r3, [r3, #4]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	609a      	str	r2, [r3, #8]

		// output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	791b      	ldrb	r3, [r3, #4]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2301      	movs	r3, #1
 8000cce:	408b      	lsls	r3, r1
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	400a      	ands	r2, r1
 8000cda:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	799b      	ldrb	r3, [r3, #6]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	791b      	ldrb	r3, [r3, #4]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	605a      	str	r2, [r3, #4]
	}

	// set alternate function bits
	if (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	795b      	ldrb	r3, [r3, #5]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d137      	bne.n	8000d72 <GPIO_InitPin+0x2ae>
	{
		// clear 4 AF bits and set new value
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] &= ~(15UL << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	7912      	ldrb	r2, [r2, #4]
 8000d0a:	08d2      	lsrs	r2, r2, #3
 8000d0c:	b2d0      	uxtb	r0, r2
 8000d0e:	4602      	mov	r2, r0
 8000d10:	3208      	adds	r2, #8
 8000d12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	791b      	ldrb	r3, [r3, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	220f      	movs	r2, #15
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4011      	ands	r1, r2
 8000d2e:	f100 0208 	add.w	r2, r0, #8
 8000d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] |= (hGPIO->PinConfig.AF << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	7912      	ldrb	r2, [r2, #4]
 8000d3e:	08d2      	lsrs	r2, r2, #3
 8000d40:	b2d1      	uxtb	r1, r2
 8000d42:	460a      	mov	r2, r1
 8000d44:	3208      	adds	r2, #8
 8000d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7a5b      	ldrb	r3, [r3, #9]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	791b      	ldrb	r3, [r3, #4]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	fa00 f303 	lsl.w	r3, r0, r3
 8000d5e:	461c      	mov	r4, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4608      	mov	r0, r1
 8000d66:	ea42 0104 	orr.w	r1, r2, r4
 8000d6a:	f100 0208 	add.w	r2, r0, #8
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2103      	movs	r1, #3
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7a1b      	ldrb	r3, [r3, #8]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	791b      	ldrb	r3, [r3, #4]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	4619      	mov	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	60da      	str	r2, [r3, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd90      	pop	{r4, r7, pc}
 8000db8:	40013c00 	.word	0x40013c00
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40021c00 	.word	0x40021c00
 8000ddc:	40013800 	.word	0x40013800

08000de0 <GPIO_TogglePin>:
 * @param[*GPIO] - base address of gpiox peripheral
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *GPIO, uint8_t PinNumber)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	GPIO->ODR ^= 0b1 << PinNumber;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	78fa      	ldrb	r2, [r7, #3]
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	405a      	eors	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	615a      	str	r2, [r3, #20]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <RCC_CalculatePllclk>:

	return 0;
}

static uint32_t RCC_CalculatePllclk(uint32_t source)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <RCC_CalculatePllclk+0x5c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e1e:	81fb      	strh	r3, [r7, #14]
	;
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <RCC_CalculatePllclk+0x5c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	099b      	lsrs	r3, r3, #6
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e2c:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <RCC_CalculatePllclk+0x5c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	817b      	strh	r3, [r7, #10]
	;

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 8000e3c:	897b      	ldrh	r3, [r7, #10]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	89ba      	ldrh	r2, [r7, #12]
 8000e50:	fb02 f203 	mul.w	r2, r2, r3
 8000e54:	897b      	ldrh	r3, [r7, #10]
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800

08000e6c <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b07      	cmp	r3, #7
 8000e7a:	d822      	bhi.n	8000ec2 <RCC_GetApbPrescaler+0x56>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <RCC_GetApbPrescaler+0x18>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	08000ea5 	.word	0x08000ea5
 8000e88:	08000ec3 	.word	0x08000ec3
 8000e8c:	08000ec3 	.word	0x08000ec3
 8000e90:	08000ec3 	.word	0x08000ec3
 8000e94:	08000eab 	.word	0x08000eab
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000eb7 	.word	0x08000eb7
 8000ea0:	08000ebd 	.word	0x08000ebd
	{
	case (RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
		break;
 8000ea8:	e00b      	b.n	8000ec2 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	60fb      	str	r3, [r7, #12]
		break;
 8000eae:	e008      	b.n	8000ec2 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	60fb      	str	r3, [r7, #12]
		break;
 8000eb4:	e005      	b.n	8000ec2 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	60fb      	str	r3, [r7, #12]
		break;
 8000eba:	e002      	b.n	8000ec2 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	60fb      	str	r3, [r7, #12]
		break;
 8000ec0:	bf00      	nop
	}

	return apb_prescaler;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	b29b      	uxth	r3, r3
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d840      	bhi.n	8000f66 <RCC_GetAhbPrescaler+0x92>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <RCC_GetAhbPrescaler+0x18>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	08000f2d 	.word	0x08000f2d
 8000ef0:	08000f67 	.word	0x08000f67
 8000ef4:	08000f67 	.word	0x08000f67
 8000ef8:	08000f67 	.word	0x08000f67
 8000efc:	08000f67 	.word	0x08000f67
 8000f00:	08000f67 	.word	0x08000f67
 8000f04:	08000f67 	.word	0x08000f67
 8000f08:	08000f67 	.word	0x08000f67
 8000f0c:	08000f33 	.word	0x08000f33
 8000f10:	08000f39 	.word	0x08000f39
 8000f14:	08000f3f 	.word	0x08000f3f
 8000f18:	08000f45 	.word	0x08000f45
 8000f1c:	08000f4b 	.word	0x08000f4b
 8000f20:	08000f51 	.word	0x08000f51
 8000f24:	08000f57 	.word	0x08000f57
 8000f28:	08000f5f 	.word	0x08000f5f
	{
	case (RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
		break;
 8000f30:	e019      	b.n	8000f66 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	60fb      	str	r3, [r7, #12]
		break;
 8000f36:	e016      	b.n	8000f66 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
		break;
 8000f3c:	e013      	b.n	8000f66 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	60fb      	str	r3, [r7, #12]
		break;
 8000f42:	e010      	b.n	8000f66 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 8000f44:	2310      	movs	r3, #16
 8000f46:	60fb      	str	r3, [r7, #12]
		break;
 8000f48:	e00d      	b.n	8000f66 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 8000f4a:	2340      	movs	r3, #64	; 0x40
 8000f4c:	60fb      	str	r3, [r7, #12]
		break;
 8000f4e:	e00a      	b.n	8000f66 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	60fb      	str	r3, [r7, #12]
		break;
 8000f54:	e007      	b.n	8000f66 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 8000f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5a:	60fb      	str	r3, [r7, #12]
		break;
 8000f5c:	e003      	b.n	8000f66 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 8000f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f62:	60fb      	str	r3, [r7, #12]
		break;
 8000f64:	bf00      	nop
	}

	return ahb_prescaler;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	b29b      	uxth	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <RCC_GetSysclk+0x54>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d00a      	beq.n	8000f9e <RCC_GetSysclk+0x26>
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d81c      	bhi.n	8000fc6 <RCC_GetSysclk+0x4e>
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <RCC_GetSysclk+0x1e>
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d002      	beq.n	8000f9a <RCC_GetSysclk+0x22>
 8000f94:	e017      	b.n	8000fc6 <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <RCC_GetSysclk+0x58>)
 8000f98:	e016      	b.n	8000fc8 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e014      	b.n	8000fc8 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <RCC_GetSysclk+0x54>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <RCC_GetSysclk+0x3a>
 8000faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fae:	d005      	beq.n	8000fbc <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 8000fb0:	e009      	b.n	8000fc6 <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <RCC_GetSysclk+0x58>)
 8000fb4:	f7ff ff2a 	bl	8000e0c <RCC_CalculatePllclk>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	e005      	b.n	8000fc8 <RCC_GetSysclk+0x50>
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff ff25 	bl	8000e0c <RCC_CalculatePllclk>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e000      	b.n	8000fc8 <RCC_GetSysclk+0x50>
	}

	return 0;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	00f42400 	.word	0x00f42400

08000fd4 <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 8000fda:	f7ff ffcd 	bl	8000f78 <RCC_GetSysclk>
 8000fde:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <RCC_GetHclk+0x34>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f003 030f 	and.w	r3, r3, #15
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff70 	bl	8000ed4 <RCC_GetAhbPrescaler>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	807b      	strh	r3, [r7, #2]
	return sysclk / ahb_prescaler;
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800

0800100c <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 8001016:	f7ff ffdd 	bl	8000fd4 <RCC_GetHclk>
 800101a:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch (plck_x)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d002      	beq.n	8001028 <RCC_GetPclk+0x1c>
 8001022:	2b02      	cmp	r3, #2
 8001024:	d00d      	beq.n	8001042 <RCC_GetPclk+0x36>
 8001026:	e019      	b.n	800105c <RCC_GetPclk+0x50>
	{
	case (1):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >>
 8001028:	4b10      	ldr	r3, [pc, #64]	; (800106c <RCC_GetPclk+0x60>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	0a9b      	lsrs	r3, r3, #10
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff18 	bl	8000e6c <RCC_GetApbPrescaler>
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE1_Pos);
		break;
 8001040:	e00c      	b.n	800105c <RCC_GetPclk+0x50>

	case (2):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >>
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <RCC_GetPclk+0x60>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	0b5b      	lsrs	r3, r3, #13
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff0b 	bl	8000e6c <RCC_GetApbPrescaler>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE2_Pos);
		break;
 800105a:	bf00      	nop
	}

	return hclk / apb_prescaler;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800

08001070 <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs *freqs)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	freqs->sysclk = RCC_GetSysclk();
 8001078:	f7ff ff7e 	bl	8000f78 <RCC_GetSysclk>
 800107c:	4602      	mov	r2, r0
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 8001082:	f7ff ffa7 	bl	8000fd4 <RCC_GetHclk>
 8001086:	4602      	mov	r2, r0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ffbd 	bl	800100c <RCC_GetPclk>
 8001092:	4602      	mov	r2, r0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 8001098:	2002      	movs	r0, #2
 800109a:	f7ff ffb7 	bl	800100c <RCC_GetPclk>
 800109e:	4602      	mov	r2, r0
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	60da      	str	r2, [r3, #12]

	return;
 80010a4:	bf00      	nop
}
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <__NVIC_EnableIRQ>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <USART_ClockEnable>:
// ******** INIT FUNCTIONS ******** //
/*
 * enable RCC Clock
 */
static void USART_ClockEnable(USART_Handle_t *p_handle_usart)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if (p_handle_usart->p_usartx == USART1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a13      	ldr	r2, [pc, #76]	; (8001144 <USART_ClockEnable+0x5c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d106      	bne.n	8001108 <USART_ClockEnable+0x20>
	{
		RCC_CLOCK_USART1_ENABLE();
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <USART_ClockEnable+0x60>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <USART_ClockEnable+0x60>)
 8001100:	f043 0310 	orr.w	r3, r3, #16
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else if (p_handle_usart->p_usartx == USART6)
	{
		RCC_CLOCK_USART6_ENABLE();
	}
}
 8001106:	e016      	b.n	8001136 <USART_ClockEnable+0x4e>
	else if (p_handle_usart->p_usartx == USART2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0f      	ldr	r2, [pc, #60]	; (800114c <USART_ClockEnable+0x64>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d106      	bne.n	8001120 <USART_ClockEnable+0x38>
		RCC_CLOCK_USART2_ENABLE();
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <USART_ClockEnable+0x60>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <USART_ClockEnable+0x60>)
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800111e:	e00a      	b.n	8001136 <USART_ClockEnable+0x4e>
	else if (p_handle_usart->p_usartx == USART6)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <USART_ClockEnable+0x68>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d105      	bne.n	8001136 <USART_ClockEnable+0x4e>
		RCC_CLOCK_USART6_ENABLE();
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <USART_ClockEnable+0x60>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a06      	ldr	r2, [pc, #24]	; (8001148 <USART_ClockEnable+0x60>)
 8001130:	f043 0320 	orr.w	r3, r3, #32
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40011000 	.word	0x40011000
 8001148:	40023800 	.word	0x40023800
 800114c:	40004400 	.word	0x40004400
 8001150:	40011400 	.word	0x40011400

08001154 <USART_InitGpioPins>:

/*
 * init gpio pins
 */
static void USART_InitGpioPins(USART_Handle_t *p_handle_usart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	GPIO_Handle_t gpio_rx, gpio_tx;

	if (p_handle_usart->p_usartx == USART2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a16      	ldr	r2, [pc, #88]	; (80011bc <USART_InitGpioPins+0x68>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d10b      	bne.n	800117e <USART_InitGpioPins+0x2a>
	{
		// PB6 RX
		gpio_rx.pGPIOx = GPIOA;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <USART_InitGpioPins+0x6c>)
 8001168:	617b      	str	r3, [r7, #20]
		gpio_rx.PinConfig.PinNumber = GPIO_PIN_3;
 800116a:	2303      	movs	r3, #3
 800116c:	763b      	strb	r3, [r7, #24]

		// PB7 TX
		gpio_tx.pGPIOx = GPIOA;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <USART_InitGpioPins+0x6c>)
 8001170:	60bb      	str	r3, [r7, #8]
		gpio_tx.PinConfig.PinNumber = GPIO_PIN_2;
 8001172:	2302      	movs	r3, #2
 8001174:	733b      	strb	r3, [r7, #12]

		// Alternate Function
		gpio_rx.PinConfig.AF = GPIO_PIN_AF_AF7;
 8001176:	2307      	movs	r3, #7
 8001178:	777b      	strb	r3, [r7, #29]
		gpio_tx.PinConfig.AF = GPIO_PIN_AF_AF7;
 800117a:	2307      	movs	r3, #7
 800117c:	747b      	strb	r3, [r7, #17]
	}

	// Mode AF
	gpio_rx.PinConfig.Mode = GPIO_PIN_MODE_AF;
 800117e:	2302      	movs	r3, #2
 8001180:	767b      	strb	r3, [r7, #25]
	gpio_tx.PinConfig.Mode = GPIO_PIN_MODE_AF;
 8001182:	2302      	movs	r3, #2
 8001184:	737b      	strb	r3, [r7, #13]

	// Output type open drain
	gpio_rx.PinConfig.OutputType = GPIO_PIN_OT_OD;
 8001186:	2301      	movs	r3, #1
 8001188:	76bb      	strb	r3, [r7, #26]
	gpio_tx.PinConfig.OutputType = GPIO_PIN_OT_OD;
 800118a:	2301      	movs	r3, #1
 800118c:	73bb      	strb	r3, [r7, #14]

	// Output speed very high
	gpio_rx.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	76fb      	strb	r3, [r7, #27]
	gpio_tx.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	73fb      	strb	r3, [r7, #15]

	// Pull ups
	gpio_rx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	773b      	strb	r3, [r7, #28]
	gpio_tx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	743b      	strb	r3, [r7, #16]

	GPIO_InitPin(&gpio_rx);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fc8e 	bl	8000ac4 <GPIO_InitPin>
	GPIO_InitPin(&gpio_tx);
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fc89 	bl	8000ac4 <GPIO_InitPin>
}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40004400 	.word	0x40004400
 80011c0:	40020000 	.word	0x40020000

080011c4 <USART_SetBaudRate>:
/*
 * calculate and write in baud rate divider
 */
void USART_SetBaudRate(USART_Handle_t *p_handle_usart, uint32_t baud_rate,
		UsartOversampling_t oversampling)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	4613      	mov	r3, r2
 80011d0:	71fb      	strb	r3, [r7, #7]
	uint16_t baud_div_mantissa;
	uint8_t baud_div_fraction;

	// set oversampling

	p_handle_usart->p_usartx->CR1 |= (oversampling << USART_CR1_OVER8_Pos);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	03db      	lsls	r3, r3, #15
 80011dc:	4619      	mov	r1, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	60da      	str	r2, [r3, #12]
	// in equation we have 8 * (2 - OVER8)
	uint8_t usart_divmulti =
			8
					* (2
							- (1U
									& (p_handle_usart->p_usartx->CR1
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
											>> USART_CR1_OVER8_Pos)));
 80011ec:	0bdb      	lsrs	r3, r3, #15
									& (p_handle_usart->p_usartx->CR1
 80011ee:	f003 0301 	and.w	r3, r3, #1
							- (1U
 80011f2:	f1c3 0302 	rsb	r3, r3, #2
	uint8_t usart_divmulti =
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	// read clock values from rcc registers
	RCC_GetClockFrequencies(&clock_freqs);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff34 	bl	8001070 <RCC_GetClockFrequencies>

	if (p_handle_usart->p_usartx == USART2)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a35      	ldr	r2, [pc, #212]	; (80012e4 <USART_SetBaudRate+0x120>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d102      	bne.n	8001218 <USART_SetBaudRate+0x54>
	{
		pclk_freq = clock_freqs.pclk1;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001216:	e001      	b.n	800121c <USART_SetBaudRate+0x58>
	}
	else
	{
		// usart1 and usart6 are on apb2
		pclk_freq = clock_freqs.pclk2;
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	baud_div = ((float) pclk_freq / (baud_rate * usart_divmulti));
 800121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001226:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	baud_div_mantissa = baud_div;
 8001240:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001248:	ee17 3a90 	vmov	r3, s15
 800124c:	857b      	strh	r3, [r7, #42]	; 0x2a
	// rounding number to get correct fraction
	baud_div_fraction = round((baud_div - baud_div_mantissa) * usart_divmulti);
 800124e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001258:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800125c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001260:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001270:	ee17 0a90 	vmov	r0, s15
 8001274:	f7ff f970 	bl	8000558 <__aeabi_f2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	ec43 2b10 	vmov	d0, r2, r3
 8001280:	f000 fdec 	bl	8001e5c <round>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff f9bc 	bl	8000608 <__aeabi_d2uiz>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	// if after rounding we have value bigger or equal to oversampling then we
	// need to carry +1 to mantissa and set fraction to 0. like 50,99 -> 51;
	if (baud_div_fraction >= usart_divmulti)
 8001296:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800129a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800129e:	429a      	cmp	r2, r3
 80012a0:	d305      	bcc.n	80012ae <USART_SetBaudRate+0xea>
	{
		baud_div_fraction = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		baud_div_mantissa++;
 80012a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012aa:	3301      	adds	r3, #1
 80012ac:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	// insert values to brr register
	p_handle_usart->p_usartx->BRR = 0;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
			<< USART_BRR_DIV_Mantissa_Pos);
 80012bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4619      	mov	r1, r3
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6899      	ldr	r1, [r3, #8]
			<< USART_BRR_DIV_Fraction_Pos);
 80012d0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	609a      	str	r2, [r3, #8]
}
 80012dc:	bf00      	nop
 80012de:	3730      	adds	r7, #48	; 0x30
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40004400 	.word	0x40004400

080012e8 <USART_EnableIRQs>:
 * use CRx_IRQ_FLAGS to enable all the interrupts in register, otherwise use
 * like : (USART_CR1_PEIE | USART_CR1_TXEIE)
 */
void USART_EnableIRQs(USART_Handle_t *p_handle_usart, uint32_t CR1_flags,
		uint32_t CR2_flags, uint32_t CR3_flags)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	603b      	str	r3, [r7, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 80012f6:	2026      	movs	r0, #38	; 0x26
 80012f8:	f7ff fed8 	bl	80010ac <__NVIC_EnableIRQ>
	// CR1 - PEIE,TXEIE,TCIE,RXNEIE,IDLEIE
	if (CR1_flags)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <USART_EnableIRQs+0x2a>
	{
		p_handle_usart->p_usartx->CR1 |= CR1_flags;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68d9      	ldr	r1, [r3, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	430a      	orrs	r2, r1
 8001310:	60da      	str	r2, [r3, #12]
	}

	// CR2 - LBDIE
	if (CR2_flags)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <USART_EnableIRQs+0x40>
	{
		p_handle_usart->p_usartx->CR2 |= CR2_flags;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6919      	ldr	r1, [r3, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	430a      	orrs	r2, r1
 8001326:	611a      	str	r2, [r3, #16]
	}

	// CR3 - CTSIE, EIE
	if (CR3_flags)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d008      	beq.n	8001340 <USART_EnableIRQs+0x58>
	{
		p_handle_usart->p_usartx->CR1 |= CR3_flags;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68d9      	ldr	r1, [r3, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	60da      	str	r2, [r3, #12]
	}

	return;
 800133e:	bf00      	nop
 8001340:	bf00      	nop
}
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <USART_SetBasicParameters>:
 * basic init function
 */
void USART_SetBasicParameters(USART_Handle_t *p_handle_usart,
		UsartWordLenght_t word_lenght, UsartStopBits_t stop_bits,
		UsartParity_t parity)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4603      	mov	r3, r0
 8001358:	70fb      	strb	r3, [r7, #3]
 800135a:	460b      	mov	r3, r1
 800135c:	70bb      	strb	r3, [r7, #2]
 800135e:	4613      	mov	r3, r2
 8001360:	707b      	strb	r3, [r7, #1]
	USART_InitGpioPins(p_handle_usart);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fef6 	bl	8001154 <USART_InitGpioPins>
	USART_ClockEnable(p_handle_usart);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff febd 	bl	80010e8 <USART_ClockEnable>

	//	enable the USART by writing the UE bit in USART_CR1 register to 1.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_UE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800137c:	60da      	str	r2, [r3, #12]
	//	program the M bit in USART_CR1 to define the word length.
	p_handle_usart->p_usartx->CR1 |= (word_lenght << USART_CR1_M_Pos);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	031b      	lsls	r3, r3, #12
 8001388:	4619      	mov	r1, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	60da      	str	r2, [r3, #12]
	//	program the number of stop bits in USART_CR2.
	p_handle_usart->p_usartx->CR1 |= (stop_bits << USART_CR2_STOP_Pos);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	78bb      	ldrb	r3, [r7, #2]
 800139a:	031b      	lsls	r3, r3, #12
 800139c:	4619      	mov	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	60da      	str	r2, [r3, #12]
	// program parity control
	if (parity != kUsartNoParity)
 80013a6:	787b      	ldrb	r3, [r7, #1]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d011      	beq.n	80013d0 <USART_SetBasicParameters+0x88>
	{
		p_handle_usart->p_usartx->CR1 |= USART_CR1_PCE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013ba:	60da      	str	r2, [r3, #12]
		p_handle_usart->p_usartx->CR1 |= (parity << USART_CR1_PS_Pos);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	787b      	ldrb	r3, [r7, #1]
 80013c4:	025b      	lsls	r3, r3, #9
 80013c6:	4619      	mov	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	60da      	str	r2, [r3, #12]
	}

	//clear TC flag
	p_handle_usart->p_usartx->SR &= ~(USART_SR_TC);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013de:	601a      	str	r2, [r3, #0]
	return;
 80013e0:	bf00      	nop
}
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <USART_Transmit>:
/*
 * Blocking transmit UART function
 */
void USART_Transmit(USART_Handle_t *p_handle_usart, uint8_t *p_data_buffer,
		uint32_t data_lenght)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
	// check if dma transfer is not ongoing
	if (p_handle_usart->tx_status != kUsartTxIdle)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	7b9b      	ldrb	r3, [r3, #14]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <USART_Transmit+0x1c>
	{
		p_handle_usart->error = kUsartErrorTxBusy;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2203      	movs	r2, #3
 8001400:	731a      	strb	r2, [r3, #12]
		return;
 8001402:	e03b      	b.n	800147c <USART_Transmit+0x94>
	}

	// disable dma and put the status
	p_handle_usart->p_usartx->CR3 &= ~(USART_CR3_DMAT);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001412:	615a      	str	r2, [r3, #20]
	p_handle_usart->tx_status = kUsartTxPolling;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2201      	movs	r2, #1
 8001418:	739a      	strb	r2, [r3, #14]

	uint32_t tx_data_to_send = data_lenght;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	617b      	str	r3, [r7, #20]

	//	6. Set the TE bit in USART_CR1 to send an idle frame as first
	// transmission.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_TE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0208 	orr.w	r2, r2, #8
 800142c:	60da      	str	r2, [r3, #12]
	//	7. Write the data to send in the USART_DR register (this clears the TXE
	// bit). Repeat this 	for each data to be transmitted in case of single
	// buffer.
	while (tx_data_to_send > 0)
 800142e:	e022      	b.n	8001476 <USART_Transmit+0x8e>
	{
		// wait until data register is empty
		while (!(p_handle_usart->p_usartx->SR & USART_SR_TXE))
 8001430:	bf00      	nop
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f8      	beq.n	8001432 <USART_Transmit+0x4a>
			;

		// put data in data register
		p_handle_usart->p_usartx->DR = p_data_buffer[data_lenght
				- tx_data_to_send];
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	1ad3      	subs	r3, r2, r3
		p_handle_usart->p_usartx->DR = p_data_buffer[data_lenght
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	4413      	add	r3, r2
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]

		// change counter
		tx_data_to_send--;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3b01      	subs	r3, #1
 8001456:	617b      	str	r3, [r7, #20]

		//	8. After writing the last data into the USART_DR register, wait until
		// TC=1. This indicates 	that the transmission of the last frame is
		// complete. This is required for instance when 	the USART is disabled or
		// enters the Halt mode to avoid corrupting the last 	transmission
		if (tx_data_to_send == 0)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10b      	bne.n	8001476 <USART_Transmit+0x8e>
		{
			// check if data transfer is finished
			while (!(p_handle_usart->p_usartx->SR & USART_SR_TC))
 800145e:	bf00      	nop
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f8      	beq.n	8001460 <USART_Transmit+0x78>
				;
			p_handle_usart->tx_status = kUsartTxIdle;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	739a      	strb	r2, [r3, #14]
			return;
 8001474:	e002      	b.n	800147c <USART_Transmit+0x94>
	while (tx_data_to_send > 0)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1d9      	bne.n	8001430 <USART_Transmit+0x48>
		}
	}
}
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <WWDG_GetTimePerWwdgTick>:

/*
 * this function calculates wwdg frequency and returns time per tick in [us]
 */
uint32_t WWDG_GetTimePerWwdgTick(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
	RCC_ClockFreqs freqs;
	uint32_t wwdg_freq;
	uint8_t timer_base = ((WWDG->CFR >> 7) & 3U);
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <WWDG_GetTimePerWwdgTick+0x5c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	09db      	lsrs	r3, r3, #7
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	777b      	strb	r3, [r7, #29]
	uint8_t pow_timer_base = 1;
 800149c:	2301      	movs	r3, #1
 800149e:	77fb      	strb	r3, [r7, #31]
	uint32_t time_per_tick; // time per 1 watchdog tick in [us]

	// some stupid loop to not use math function pow() that is using floats
	for (uint8_t i = 0; i < timer_base; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	77bb      	strb	r3, [r7, #30]
 80014a4:	e005      	b.n	80014b2 <WWDG_GetTimePerWwdgTick+0x2a>
	{
		pow_timer_base *= 2;
 80014a6:	7ffb      	ldrb	r3, [r7, #31]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i < timer_base; i++)
 80014ac:	7fbb      	ldrb	r3, [r7, #30]
 80014ae:	3301      	adds	r3, #1
 80014b0:	77bb      	strb	r3, [r7, #30]
 80014b2:	7fba      	ldrb	r2, [r7, #30]
 80014b4:	7f7b      	ldrb	r3, [r7, #29]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3f5      	bcc.n	80014a6 <WWDG_GetTimePerWwdgTick+0x1e>
	}

	// get pclk1 frequency
	RCC_GetClockFrequencies(&freqs);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fdd7 	bl	8001070 <RCC_GetClockFrequencies>

	// calculate wwdg frequency
	wwdg_freq = freqs.pclk1 / (4096 * pow_timer_base);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	7ffa      	ldrb	r2, [r7, #31]
 80014c6:	0312      	lsls	r2, r2, #12
 80014c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
	// calculate time per one tick
	time_per_tick = 1000000 / wwdg_freq;
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <WWDG_GetTimePerWwdgTick+0x60>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]

	return time_per_tick;
 80014d8:	697b      	ldr	r3, [r7, #20]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40002c00 	.word	0x40002c00
 80014e8:	000f4240 	.word	0x000f4240

080014ec <WWDG_SetBasicParameters>:
 * window val - if watchdog is going to be reloaded before this value must be
 * between 63 - 127 -> reset
 */

void WWDG_SetBasicParameters(WwdgTimerBase_t prescaler, uint8_t window_val)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	460a      	mov	r2, r1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	4613      	mov	r3, r2
 80014fa:	71bb      	strb	r3, [r7, #6]
	RCC_CLOCK_WWDG_ENABLE();
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <WWDG_SetBasicParameters+0x4c>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <WWDG_SetBasicParameters+0x4c>)
 8001502:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001506:	6413      	str	r3, [r2, #64]	; 0x40

	WWDG->CFR |= (prescaler << WWDG_CFR_WDGTB_Pos);
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <WWDG_SetBasicParameters+0x50>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	79fa      	ldrb	r2, [r7, #7]
 800150e:	01d2      	lsls	r2, r2, #7
 8001510:	4611      	mov	r1, r2
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <WWDG_SetBasicParameters+0x50>)
 8001514:	430b      	orrs	r3, r1
 8001516:	6053      	str	r3, [r2, #4]

	// 7-bit window register so to be sure i am reseting msb of uint8
	window_val &= ~(1U << 7U);
 8001518:	79bb      	ldrb	r3, [r7, #6]
 800151a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800151e:	71bb      	strb	r3, [r7, #6]
	WWDG->CFR |= (window_val << WWDG_CFR_W_Pos);
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <WWDG_SetBasicParameters+0x50>)
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	4905      	ldr	r1, [pc, #20]	; (800153c <WWDG_SetBasicParameters+0x50>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]

	return;
 800152c:	bf00      	nop
}
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40023800 	.word	0x40023800
 800153c:	40002c00 	.word	0x40002c00

08001540 <WWDG_StartWatchdog>:

/*
 * start watchdog (can not be stopped - only with reset)
 */
void WWDG_StartWatchdog(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	// activate watchdog
	WWDG->CR |= (WWDG_FEED_VALUE << WWDG_CR_T_Pos);
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <WWDG_StartWatchdog+0x28>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <WWDG_StartWatchdog+0x28>)
 800154a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800154e:	6013      	str	r3, [r2, #0]
	WWDG->CR |= WWDG_CR_WDGA;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <WWDG_StartWatchdog+0x28>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <WWDG_StartWatchdog+0x28>)
 8001556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155a:	6013      	str	r3, [r2, #0]

	return;
 800155c:	bf00      	nop
}
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40002c00 	.word	0x40002c00

0800156c <WWDG_ReloadWatchdog>:

/*
 * feed watchdog with the counter value
 */
void WWDG_ReloadWatchdog(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	// put a value in the counter
	WWDG->CR |= (WWDG_FEED_VALUE << WWDG_CR_T_Pos);
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <WWDG_ReloadWatchdog+0x1c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <WWDG_ReloadWatchdog+0x1c>)
 8001576:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800157a:	6013      	str	r3, [r2, #0]
	return;
 800157c:	bf00      	nop
}
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40002c00 	.word	0x40002c00

0800158c <WWDG_GetWatchdog>:

/*
 * return current timer value between 127 and 63
 */
uint8_t WWDG_GetWatchdog(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
	return (WWDG->CR & WWDG_CR_T_Msk);
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <WWDG_GetWatchdog+0x1c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800159a:	b2db      	uxtb	r3, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40002c00 	.word	0x40002c00

080015ac <__errno>:
 80015ac:	4b01      	ldr	r3, [pc, #4]	; (80015b4 <__errno+0x8>)
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000000 	.word	0x20000000

080015b8 <__libc_init_array>:
 80015b8:	b570      	push	{r4, r5, r6, lr}
 80015ba:	4d0d      	ldr	r5, [pc, #52]	; (80015f0 <__libc_init_array+0x38>)
 80015bc:	4c0d      	ldr	r4, [pc, #52]	; (80015f4 <__libc_init_array+0x3c>)
 80015be:	1b64      	subs	r4, r4, r5
 80015c0:	10a4      	asrs	r4, r4, #2
 80015c2:	2600      	movs	r6, #0
 80015c4:	42a6      	cmp	r6, r4
 80015c6:	d109      	bne.n	80015dc <__libc_init_array+0x24>
 80015c8:	4d0b      	ldr	r5, [pc, #44]	; (80015f8 <__libc_init_array+0x40>)
 80015ca:	4c0c      	ldr	r4, [pc, #48]	; (80015fc <__libc_init_array+0x44>)
 80015cc:	f000 fc8c 	bl	8001ee8 <_init>
 80015d0:	1b64      	subs	r4, r4, r5
 80015d2:	10a4      	asrs	r4, r4, #2
 80015d4:	2600      	movs	r6, #0
 80015d6:	42a6      	cmp	r6, r4
 80015d8:	d105      	bne.n	80015e6 <__libc_init_array+0x2e>
 80015da:	bd70      	pop	{r4, r5, r6, pc}
 80015dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e0:	4798      	blx	r3
 80015e2:	3601      	adds	r6, #1
 80015e4:	e7ee      	b.n	80015c4 <__libc_init_array+0xc>
 80015e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ea:	4798      	blx	r3
 80015ec:	3601      	adds	r6, #1
 80015ee:	e7f2      	b.n	80015d6 <__libc_init_array+0x1e>
 80015f0:	08001fe8 	.word	0x08001fe8
 80015f4:	08001fe8 	.word	0x08001fe8
 80015f8:	08001fe8 	.word	0x08001fe8
 80015fc:	08001fec 	.word	0x08001fec

08001600 <siprintf>:
 8001600:	b40e      	push	{r1, r2, r3}
 8001602:	b500      	push	{lr}
 8001604:	b09c      	sub	sp, #112	; 0x70
 8001606:	ab1d      	add	r3, sp, #116	; 0x74
 8001608:	9002      	str	r0, [sp, #8]
 800160a:	9006      	str	r0, [sp, #24]
 800160c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001610:	4809      	ldr	r0, [pc, #36]	; (8001638 <siprintf+0x38>)
 8001612:	9107      	str	r1, [sp, #28]
 8001614:	9104      	str	r1, [sp, #16]
 8001616:	4909      	ldr	r1, [pc, #36]	; (800163c <siprintf+0x3c>)
 8001618:	f853 2b04 	ldr.w	r2, [r3], #4
 800161c:	9105      	str	r1, [sp, #20]
 800161e:	6800      	ldr	r0, [r0, #0]
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	a902      	add	r1, sp, #8
 8001624:	f000 f868 	bl	80016f8 <_svfiprintf_r>
 8001628:	9b02      	ldr	r3, [sp, #8]
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	b01c      	add	sp, #112	; 0x70
 8001630:	f85d eb04 	ldr.w	lr, [sp], #4
 8001634:	b003      	add	sp, #12
 8001636:	4770      	bx	lr
 8001638:	20000000 	.word	0x20000000
 800163c:	ffff0208 	.word	0xffff0208

08001640 <__ssputs_r>:
 8001640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001644:	688e      	ldr	r6, [r1, #8]
 8001646:	429e      	cmp	r6, r3
 8001648:	4682      	mov	sl, r0
 800164a:	460c      	mov	r4, r1
 800164c:	4690      	mov	r8, r2
 800164e:	461f      	mov	r7, r3
 8001650:	d838      	bhi.n	80016c4 <__ssputs_r+0x84>
 8001652:	898a      	ldrh	r2, [r1, #12]
 8001654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001658:	d032      	beq.n	80016c0 <__ssputs_r+0x80>
 800165a:	6825      	ldr	r5, [r4, #0]
 800165c:	6909      	ldr	r1, [r1, #16]
 800165e:	eba5 0901 	sub.w	r9, r5, r1
 8001662:	6965      	ldr	r5, [r4, #20]
 8001664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800166c:	3301      	adds	r3, #1
 800166e:	444b      	add	r3, r9
 8001670:	106d      	asrs	r5, r5, #1
 8001672:	429d      	cmp	r5, r3
 8001674:	bf38      	it	cc
 8001676:	461d      	movcc	r5, r3
 8001678:	0553      	lsls	r3, r2, #21
 800167a:	d531      	bpl.n	80016e0 <__ssputs_r+0xa0>
 800167c:	4629      	mov	r1, r5
 800167e:	f000 fb47 	bl	8001d10 <_malloc_r>
 8001682:	4606      	mov	r6, r0
 8001684:	b950      	cbnz	r0, 800169c <__ssputs_r+0x5c>
 8001686:	230c      	movs	r3, #12
 8001688:	f8ca 3000 	str.w	r3, [sl]
 800168c:	89a3      	ldrh	r3, [r4, #12]
 800168e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001692:	81a3      	strh	r3, [r4, #12]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800169c:	6921      	ldr	r1, [r4, #16]
 800169e:	464a      	mov	r2, r9
 80016a0:	f000 fabe 	bl	8001c20 <memcpy>
 80016a4:	89a3      	ldrh	r3, [r4, #12]
 80016a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80016aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ae:	81a3      	strh	r3, [r4, #12]
 80016b0:	6126      	str	r6, [r4, #16]
 80016b2:	6165      	str	r5, [r4, #20]
 80016b4:	444e      	add	r6, r9
 80016b6:	eba5 0509 	sub.w	r5, r5, r9
 80016ba:	6026      	str	r6, [r4, #0]
 80016bc:	60a5      	str	r5, [r4, #8]
 80016be:	463e      	mov	r6, r7
 80016c0:	42be      	cmp	r6, r7
 80016c2:	d900      	bls.n	80016c6 <__ssputs_r+0x86>
 80016c4:	463e      	mov	r6, r7
 80016c6:	4632      	mov	r2, r6
 80016c8:	6820      	ldr	r0, [r4, #0]
 80016ca:	4641      	mov	r1, r8
 80016cc:	f000 fab6 	bl	8001c3c <memmove>
 80016d0:	68a3      	ldr	r3, [r4, #8]
 80016d2:	6822      	ldr	r2, [r4, #0]
 80016d4:	1b9b      	subs	r3, r3, r6
 80016d6:	4432      	add	r2, r6
 80016d8:	60a3      	str	r3, [r4, #8]
 80016da:	6022      	str	r2, [r4, #0]
 80016dc:	2000      	movs	r0, #0
 80016de:	e7db      	b.n	8001698 <__ssputs_r+0x58>
 80016e0:	462a      	mov	r2, r5
 80016e2:	f000 fb6f 	bl	8001dc4 <_realloc_r>
 80016e6:	4606      	mov	r6, r0
 80016e8:	2800      	cmp	r0, #0
 80016ea:	d1e1      	bne.n	80016b0 <__ssputs_r+0x70>
 80016ec:	6921      	ldr	r1, [r4, #16]
 80016ee:	4650      	mov	r0, sl
 80016f0:	f000 fabe 	bl	8001c70 <_free_r>
 80016f4:	e7c7      	b.n	8001686 <__ssputs_r+0x46>
	...

080016f8 <_svfiprintf_r>:
 80016f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fc:	4698      	mov	r8, r3
 80016fe:	898b      	ldrh	r3, [r1, #12]
 8001700:	061b      	lsls	r3, r3, #24
 8001702:	b09d      	sub	sp, #116	; 0x74
 8001704:	4607      	mov	r7, r0
 8001706:	460d      	mov	r5, r1
 8001708:	4614      	mov	r4, r2
 800170a:	d50e      	bpl.n	800172a <_svfiprintf_r+0x32>
 800170c:	690b      	ldr	r3, [r1, #16]
 800170e:	b963      	cbnz	r3, 800172a <_svfiprintf_r+0x32>
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	f000 fafd 	bl	8001d10 <_malloc_r>
 8001716:	6028      	str	r0, [r5, #0]
 8001718:	6128      	str	r0, [r5, #16]
 800171a:	b920      	cbnz	r0, 8001726 <_svfiprintf_r+0x2e>
 800171c:	230c      	movs	r3, #12
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	e0d1      	b.n	80018ca <_svfiprintf_r+0x1d2>
 8001726:	2340      	movs	r3, #64	; 0x40
 8001728:	616b      	str	r3, [r5, #20]
 800172a:	2300      	movs	r3, #0
 800172c:	9309      	str	r3, [sp, #36]	; 0x24
 800172e:	2320      	movs	r3, #32
 8001730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001734:	f8cd 800c 	str.w	r8, [sp, #12]
 8001738:	2330      	movs	r3, #48	; 0x30
 800173a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80018e4 <_svfiprintf_r+0x1ec>
 800173e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001742:	f04f 0901 	mov.w	r9, #1
 8001746:	4623      	mov	r3, r4
 8001748:	469a      	mov	sl, r3
 800174a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800174e:	b10a      	cbz	r2, 8001754 <_svfiprintf_r+0x5c>
 8001750:	2a25      	cmp	r2, #37	; 0x25
 8001752:	d1f9      	bne.n	8001748 <_svfiprintf_r+0x50>
 8001754:	ebba 0b04 	subs.w	fp, sl, r4
 8001758:	d00b      	beq.n	8001772 <_svfiprintf_r+0x7a>
 800175a:	465b      	mov	r3, fp
 800175c:	4622      	mov	r2, r4
 800175e:	4629      	mov	r1, r5
 8001760:	4638      	mov	r0, r7
 8001762:	f7ff ff6d 	bl	8001640 <__ssputs_r>
 8001766:	3001      	adds	r0, #1
 8001768:	f000 80aa 	beq.w	80018c0 <_svfiprintf_r+0x1c8>
 800176c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800176e:	445a      	add	r2, fp
 8001770:	9209      	str	r2, [sp, #36]	; 0x24
 8001772:	f89a 3000 	ldrb.w	r3, [sl]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80a2 	beq.w	80018c0 <_svfiprintf_r+0x1c8>
 800177c:	2300      	movs	r3, #0
 800177e:	f04f 32ff 	mov.w	r2, #4294967295
 8001782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001786:	f10a 0a01 	add.w	sl, sl, #1
 800178a:	9304      	str	r3, [sp, #16]
 800178c:	9307      	str	r3, [sp, #28]
 800178e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001792:	931a      	str	r3, [sp, #104]	; 0x68
 8001794:	4654      	mov	r4, sl
 8001796:	2205      	movs	r2, #5
 8001798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800179c:	4851      	ldr	r0, [pc, #324]	; (80018e4 <_svfiprintf_r+0x1ec>)
 800179e:	f7fe fd27 	bl	80001f0 <memchr>
 80017a2:	9a04      	ldr	r2, [sp, #16]
 80017a4:	b9d8      	cbnz	r0, 80017de <_svfiprintf_r+0xe6>
 80017a6:	06d0      	lsls	r0, r2, #27
 80017a8:	bf44      	itt	mi
 80017aa:	2320      	movmi	r3, #32
 80017ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017b0:	0711      	lsls	r1, r2, #28
 80017b2:	bf44      	itt	mi
 80017b4:	232b      	movmi	r3, #43	; 0x2b
 80017b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017ba:	f89a 3000 	ldrb.w	r3, [sl]
 80017be:	2b2a      	cmp	r3, #42	; 0x2a
 80017c0:	d015      	beq.n	80017ee <_svfiprintf_r+0xf6>
 80017c2:	9a07      	ldr	r2, [sp, #28]
 80017c4:	4654      	mov	r4, sl
 80017c6:	2000      	movs	r0, #0
 80017c8:	f04f 0c0a 	mov.w	ip, #10
 80017cc:	4621      	mov	r1, r4
 80017ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017d2:	3b30      	subs	r3, #48	; 0x30
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d94e      	bls.n	8001876 <_svfiprintf_r+0x17e>
 80017d8:	b1b0      	cbz	r0, 8001808 <_svfiprintf_r+0x110>
 80017da:	9207      	str	r2, [sp, #28]
 80017dc:	e014      	b.n	8001808 <_svfiprintf_r+0x110>
 80017de:	eba0 0308 	sub.w	r3, r0, r8
 80017e2:	fa09 f303 	lsl.w	r3, r9, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	9304      	str	r3, [sp, #16]
 80017ea:	46a2      	mov	sl, r4
 80017ec:	e7d2      	b.n	8001794 <_svfiprintf_r+0x9c>
 80017ee:	9b03      	ldr	r3, [sp, #12]
 80017f0:	1d19      	adds	r1, r3, #4
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	9103      	str	r1, [sp, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bfbb      	ittet	lt
 80017fa:	425b      	neglt	r3, r3
 80017fc:	f042 0202 	orrlt.w	r2, r2, #2
 8001800:	9307      	strge	r3, [sp, #28]
 8001802:	9307      	strlt	r3, [sp, #28]
 8001804:	bfb8      	it	lt
 8001806:	9204      	strlt	r2, [sp, #16]
 8001808:	7823      	ldrb	r3, [r4, #0]
 800180a:	2b2e      	cmp	r3, #46	; 0x2e
 800180c:	d10c      	bne.n	8001828 <_svfiprintf_r+0x130>
 800180e:	7863      	ldrb	r3, [r4, #1]
 8001810:	2b2a      	cmp	r3, #42	; 0x2a
 8001812:	d135      	bne.n	8001880 <_svfiprintf_r+0x188>
 8001814:	9b03      	ldr	r3, [sp, #12]
 8001816:	1d1a      	adds	r2, r3, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	9203      	str	r2, [sp, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	bfb8      	it	lt
 8001820:	f04f 33ff 	movlt.w	r3, #4294967295
 8001824:	3402      	adds	r4, #2
 8001826:	9305      	str	r3, [sp, #20]
 8001828:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80018f4 <_svfiprintf_r+0x1fc>
 800182c:	7821      	ldrb	r1, [r4, #0]
 800182e:	2203      	movs	r2, #3
 8001830:	4650      	mov	r0, sl
 8001832:	f7fe fcdd 	bl	80001f0 <memchr>
 8001836:	b140      	cbz	r0, 800184a <_svfiprintf_r+0x152>
 8001838:	2340      	movs	r3, #64	; 0x40
 800183a:	eba0 000a 	sub.w	r0, r0, sl
 800183e:	fa03 f000 	lsl.w	r0, r3, r0
 8001842:	9b04      	ldr	r3, [sp, #16]
 8001844:	4303      	orrs	r3, r0
 8001846:	3401      	adds	r4, #1
 8001848:	9304      	str	r3, [sp, #16]
 800184a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800184e:	4826      	ldr	r0, [pc, #152]	; (80018e8 <_svfiprintf_r+0x1f0>)
 8001850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001854:	2206      	movs	r2, #6
 8001856:	f7fe fccb 	bl	80001f0 <memchr>
 800185a:	2800      	cmp	r0, #0
 800185c:	d038      	beq.n	80018d0 <_svfiprintf_r+0x1d8>
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <_svfiprintf_r+0x1f4>)
 8001860:	bb1b      	cbnz	r3, 80018aa <_svfiprintf_r+0x1b2>
 8001862:	9b03      	ldr	r3, [sp, #12]
 8001864:	3307      	adds	r3, #7
 8001866:	f023 0307 	bic.w	r3, r3, #7
 800186a:	3308      	adds	r3, #8
 800186c:	9303      	str	r3, [sp, #12]
 800186e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001870:	4433      	add	r3, r6
 8001872:	9309      	str	r3, [sp, #36]	; 0x24
 8001874:	e767      	b.n	8001746 <_svfiprintf_r+0x4e>
 8001876:	fb0c 3202 	mla	r2, ip, r2, r3
 800187a:	460c      	mov	r4, r1
 800187c:	2001      	movs	r0, #1
 800187e:	e7a5      	b.n	80017cc <_svfiprintf_r+0xd4>
 8001880:	2300      	movs	r3, #0
 8001882:	3401      	adds	r4, #1
 8001884:	9305      	str	r3, [sp, #20]
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 0c0a 	mov.w	ip, #10
 800188c:	4620      	mov	r0, r4
 800188e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001892:	3a30      	subs	r2, #48	; 0x30
 8001894:	2a09      	cmp	r2, #9
 8001896:	d903      	bls.n	80018a0 <_svfiprintf_r+0x1a8>
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0c5      	beq.n	8001828 <_svfiprintf_r+0x130>
 800189c:	9105      	str	r1, [sp, #20]
 800189e:	e7c3      	b.n	8001828 <_svfiprintf_r+0x130>
 80018a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80018a4:	4604      	mov	r4, r0
 80018a6:	2301      	movs	r3, #1
 80018a8:	e7f0      	b.n	800188c <_svfiprintf_r+0x194>
 80018aa:	ab03      	add	r3, sp, #12
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	462a      	mov	r2, r5
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <_svfiprintf_r+0x1f8>)
 80018b2:	a904      	add	r1, sp, #16
 80018b4:	4638      	mov	r0, r7
 80018b6:	f3af 8000 	nop.w
 80018ba:	1c42      	adds	r2, r0, #1
 80018bc:	4606      	mov	r6, r0
 80018be:	d1d6      	bne.n	800186e <_svfiprintf_r+0x176>
 80018c0:	89ab      	ldrh	r3, [r5, #12]
 80018c2:	065b      	lsls	r3, r3, #25
 80018c4:	f53f af2c 	bmi.w	8001720 <_svfiprintf_r+0x28>
 80018c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018ca:	b01d      	add	sp, #116	; 0x74
 80018cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018d0:	ab03      	add	r3, sp, #12
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	462a      	mov	r2, r5
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <_svfiprintf_r+0x1f8>)
 80018d8:	a904      	add	r1, sp, #16
 80018da:	4638      	mov	r0, r7
 80018dc:	f000 f87a 	bl	80019d4 <_printf_i>
 80018e0:	e7eb      	b.n	80018ba <_svfiprintf_r+0x1c2>
 80018e2:	bf00      	nop
 80018e4:	08001fb4 	.word	0x08001fb4
 80018e8:	08001fbe 	.word	0x08001fbe
 80018ec:	00000000 	.word	0x00000000
 80018f0:	08001641 	.word	0x08001641
 80018f4:	08001fba 	.word	0x08001fba

080018f8 <_printf_common>:
 80018f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018fc:	4616      	mov	r6, r2
 80018fe:	4699      	mov	r9, r3
 8001900:	688a      	ldr	r2, [r1, #8]
 8001902:	690b      	ldr	r3, [r1, #16]
 8001904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001908:	4293      	cmp	r3, r2
 800190a:	bfb8      	it	lt
 800190c:	4613      	movlt	r3, r2
 800190e:	6033      	str	r3, [r6, #0]
 8001910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001914:	4607      	mov	r7, r0
 8001916:	460c      	mov	r4, r1
 8001918:	b10a      	cbz	r2, 800191e <_printf_common+0x26>
 800191a:	3301      	adds	r3, #1
 800191c:	6033      	str	r3, [r6, #0]
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	0699      	lsls	r1, r3, #26
 8001922:	bf42      	ittt	mi
 8001924:	6833      	ldrmi	r3, [r6, #0]
 8001926:	3302      	addmi	r3, #2
 8001928:	6033      	strmi	r3, [r6, #0]
 800192a:	6825      	ldr	r5, [r4, #0]
 800192c:	f015 0506 	ands.w	r5, r5, #6
 8001930:	d106      	bne.n	8001940 <_printf_common+0x48>
 8001932:	f104 0a19 	add.w	sl, r4, #25
 8001936:	68e3      	ldr	r3, [r4, #12]
 8001938:	6832      	ldr	r2, [r6, #0]
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	42ab      	cmp	r3, r5
 800193e:	dc26      	bgt.n	800198e <_printf_common+0x96>
 8001940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001944:	1e13      	subs	r3, r2, #0
 8001946:	6822      	ldr	r2, [r4, #0]
 8001948:	bf18      	it	ne
 800194a:	2301      	movne	r3, #1
 800194c:	0692      	lsls	r2, r2, #26
 800194e:	d42b      	bmi.n	80019a8 <_printf_common+0xb0>
 8001950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001954:	4649      	mov	r1, r9
 8001956:	4638      	mov	r0, r7
 8001958:	47c0      	blx	r8
 800195a:	3001      	adds	r0, #1
 800195c:	d01e      	beq.n	800199c <_printf_common+0xa4>
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	68e5      	ldr	r5, [r4, #12]
 8001962:	6832      	ldr	r2, [r6, #0]
 8001964:	f003 0306 	and.w	r3, r3, #6
 8001968:	2b04      	cmp	r3, #4
 800196a:	bf08      	it	eq
 800196c:	1aad      	subeq	r5, r5, r2
 800196e:	68a3      	ldr	r3, [r4, #8]
 8001970:	6922      	ldr	r2, [r4, #16]
 8001972:	bf0c      	ite	eq
 8001974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001978:	2500      	movne	r5, #0
 800197a:	4293      	cmp	r3, r2
 800197c:	bfc4      	itt	gt
 800197e:	1a9b      	subgt	r3, r3, r2
 8001980:	18ed      	addgt	r5, r5, r3
 8001982:	2600      	movs	r6, #0
 8001984:	341a      	adds	r4, #26
 8001986:	42b5      	cmp	r5, r6
 8001988:	d11a      	bne.n	80019c0 <_printf_common+0xc8>
 800198a:	2000      	movs	r0, #0
 800198c:	e008      	b.n	80019a0 <_printf_common+0xa8>
 800198e:	2301      	movs	r3, #1
 8001990:	4652      	mov	r2, sl
 8001992:	4649      	mov	r1, r9
 8001994:	4638      	mov	r0, r7
 8001996:	47c0      	blx	r8
 8001998:	3001      	adds	r0, #1
 800199a:	d103      	bne.n	80019a4 <_printf_common+0xac>
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019a4:	3501      	adds	r5, #1
 80019a6:	e7c6      	b.n	8001936 <_printf_common+0x3e>
 80019a8:	18e1      	adds	r1, r4, r3
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	2030      	movs	r0, #48	; 0x30
 80019ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019b2:	4422      	add	r2, r4
 80019b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019bc:	3302      	adds	r3, #2
 80019be:	e7c7      	b.n	8001950 <_printf_common+0x58>
 80019c0:	2301      	movs	r3, #1
 80019c2:	4622      	mov	r2, r4
 80019c4:	4649      	mov	r1, r9
 80019c6:	4638      	mov	r0, r7
 80019c8:	47c0      	blx	r8
 80019ca:	3001      	adds	r0, #1
 80019cc:	d0e6      	beq.n	800199c <_printf_common+0xa4>
 80019ce:	3601      	adds	r6, #1
 80019d0:	e7d9      	b.n	8001986 <_printf_common+0x8e>
	...

080019d4 <_printf_i>:
 80019d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019d8:	460c      	mov	r4, r1
 80019da:	4691      	mov	r9, r2
 80019dc:	7e27      	ldrb	r7, [r4, #24]
 80019de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80019e0:	2f78      	cmp	r7, #120	; 0x78
 80019e2:	4680      	mov	r8, r0
 80019e4:	469a      	mov	sl, r3
 80019e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019ea:	d807      	bhi.n	80019fc <_printf_i+0x28>
 80019ec:	2f62      	cmp	r7, #98	; 0x62
 80019ee:	d80a      	bhi.n	8001a06 <_printf_i+0x32>
 80019f0:	2f00      	cmp	r7, #0
 80019f2:	f000 80d8 	beq.w	8001ba6 <_printf_i+0x1d2>
 80019f6:	2f58      	cmp	r7, #88	; 0x58
 80019f8:	f000 80a3 	beq.w	8001b42 <_printf_i+0x16e>
 80019fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a04:	e03a      	b.n	8001a7c <_printf_i+0xa8>
 8001a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a0a:	2b15      	cmp	r3, #21
 8001a0c:	d8f6      	bhi.n	80019fc <_printf_i+0x28>
 8001a0e:	a001      	add	r0, pc, #4	; (adr r0, 8001a14 <_printf_i+0x40>)
 8001a10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001a14:	08001a6d 	.word	0x08001a6d
 8001a18:	08001a81 	.word	0x08001a81
 8001a1c:	080019fd 	.word	0x080019fd
 8001a20:	080019fd 	.word	0x080019fd
 8001a24:	080019fd 	.word	0x080019fd
 8001a28:	080019fd 	.word	0x080019fd
 8001a2c:	08001a81 	.word	0x08001a81
 8001a30:	080019fd 	.word	0x080019fd
 8001a34:	080019fd 	.word	0x080019fd
 8001a38:	080019fd 	.word	0x080019fd
 8001a3c:	080019fd 	.word	0x080019fd
 8001a40:	08001b8d 	.word	0x08001b8d
 8001a44:	08001ab1 	.word	0x08001ab1
 8001a48:	08001b6f 	.word	0x08001b6f
 8001a4c:	080019fd 	.word	0x080019fd
 8001a50:	080019fd 	.word	0x080019fd
 8001a54:	08001baf 	.word	0x08001baf
 8001a58:	080019fd 	.word	0x080019fd
 8001a5c:	08001ab1 	.word	0x08001ab1
 8001a60:	080019fd 	.word	0x080019fd
 8001a64:	080019fd 	.word	0x080019fd
 8001a68:	08001b77 	.word	0x08001b77
 8001a6c:	680b      	ldr	r3, [r1, #0]
 8001a6e:	1d1a      	adds	r2, r3, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	600a      	str	r2, [r1, #0]
 8001a74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0a3      	b.n	8001bc8 <_printf_i+0x1f4>
 8001a80:	6825      	ldr	r5, [r4, #0]
 8001a82:	6808      	ldr	r0, [r1, #0]
 8001a84:	062e      	lsls	r6, r5, #24
 8001a86:	f100 0304 	add.w	r3, r0, #4
 8001a8a:	d50a      	bpl.n	8001aa2 <_printf_i+0xce>
 8001a8c:	6805      	ldr	r5, [r0, #0]
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	2d00      	cmp	r5, #0
 8001a92:	da03      	bge.n	8001a9c <_printf_i+0xc8>
 8001a94:	232d      	movs	r3, #45	; 0x2d
 8001a96:	426d      	negs	r5, r5
 8001a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a9c:	485e      	ldr	r0, [pc, #376]	; (8001c18 <_printf_i+0x244>)
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	e019      	b.n	8001ad6 <_printf_i+0x102>
 8001aa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001aa6:	6805      	ldr	r5, [r0, #0]
 8001aa8:	600b      	str	r3, [r1, #0]
 8001aaa:	bf18      	it	ne
 8001aac:	b22d      	sxthne	r5, r5
 8001aae:	e7ef      	b.n	8001a90 <_printf_i+0xbc>
 8001ab0:	680b      	ldr	r3, [r1, #0]
 8001ab2:	6825      	ldr	r5, [r4, #0]
 8001ab4:	1d18      	adds	r0, r3, #4
 8001ab6:	6008      	str	r0, [r1, #0]
 8001ab8:	0628      	lsls	r0, r5, #24
 8001aba:	d501      	bpl.n	8001ac0 <_printf_i+0xec>
 8001abc:	681d      	ldr	r5, [r3, #0]
 8001abe:	e002      	b.n	8001ac6 <_printf_i+0xf2>
 8001ac0:	0669      	lsls	r1, r5, #25
 8001ac2:	d5fb      	bpl.n	8001abc <_printf_i+0xe8>
 8001ac4:	881d      	ldrh	r5, [r3, #0]
 8001ac6:	4854      	ldr	r0, [pc, #336]	; (8001c18 <_printf_i+0x244>)
 8001ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8001aca:	bf0c      	ite	eq
 8001acc:	2308      	moveq	r3, #8
 8001ace:	230a      	movne	r3, #10
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ad6:	6866      	ldr	r6, [r4, #4]
 8001ad8:	60a6      	str	r6, [r4, #8]
 8001ada:	2e00      	cmp	r6, #0
 8001adc:	bfa2      	ittt	ge
 8001ade:	6821      	ldrge	r1, [r4, #0]
 8001ae0:	f021 0104 	bicge.w	r1, r1, #4
 8001ae4:	6021      	strge	r1, [r4, #0]
 8001ae6:	b90d      	cbnz	r5, 8001aec <_printf_i+0x118>
 8001ae8:	2e00      	cmp	r6, #0
 8001aea:	d04d      	beq.n	8001b88 <_printf_i+0x1b4>
 8001aec:	4616      	mov	r6, r2
 8001aee:	fbb5 f1f3 	udiv	r1, r5, r3
 8001af2:	fb03 5711 	mls	r7, r3, r1, r5
 8001af6:	5dc7      	ldrb	r7, [r0, r7]
 8001af8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001afc:	462f      	mov	r7, r5
 8001afe:	42bb      	cmp	r3, r7
 8001b00:	460d      	mov	r5, r1
 8001b02:	d9f4      	bls.n	8001aee <_printf_i+0x11a>
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d10b      	bne.n	8001b20 <_printf_i+0x14c>
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	07df      	lsls	r7, r3, #31
 8001b0c:	d508      	bpl.n	8001b20 <_printf_i+0x14c>
 8001b0e:	6923      	ldr	r3, [r4, #16]
 8001b10:	6861      	ldr	r1, [r4, #4]
 8001b12:	4299      	cmp	r1, r3
 8001b14:	bfde      	ittt	le
 8001b16:	2330      	movle	r3, #48	; 0x30
 8001b18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b20:	1b92      	subs	r2, r2, r6
 8001b22:	6122      	str	r2, [r4, #16]
 8001b24:	f8cd a000 	str.w	sl, [sp]
 8001b28:	464b      	mov	r3, r9
 8001b2a:	aa03      	add	r2, sp, #12
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	4640      	mov	r0, r8
 8001b30:	f7ff fee2 	bl	80018f8 <_printf_common>
 8001b34:	3001      	adds	r0, #1
 8001b36:	d14c      	bne.n	8001bd2 <_printf_i+0x1fe>
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	b004      	add	sp, #16
 8001b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b42:	4835      	ldr	r0, [pc, #212]	; (8001c18 <_printf_i+0x244>)
 8001b44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	680e      	ldr	r6, [r1, #0]
 8001b4c:	061f      	lsls	r7, r3, #24
 8001b4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001b52:	600e      	str	r6, [r1, #0]
 8001b54:	d514      	bpl.n	8001b80 <_printf_i+0x1ac>
 8001b56:	07d9      	lsls	r1, r3, #31
 8001b58:	bf44      	itt	mi
 8001b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8001b5e:	6023      	strmi	r3, [r4, #0]
 8001b60:	b91d      	cbnz	r5, 8001b6a <_printf_i+0x196>
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	f023 0320 	bic.w	r3, r3, #32
 8001b68:	6023      	str	r3, [r4, #0]
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	e7b0      	b.n	8001ad0 <_printf_i+0xfc>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f043 0320 	orr.w	r3, r3, #32
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	2378      	movs	r3, #120	; 0x78
 8001b78:	4828      	ldr	r0, [pc, #160]	; (8001c1c <_printf_i+0x248>)
 8001b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b7e:	e7e3      	b.n	8001b48 <_printf_i+0x174>
 8001b80:	065e      	lsls	r6, r3, #25
 8001b82:	bf48      	it	mi
 8001b84:	b2ad      	uxthmi	r5, r5
 8001b86:	e7e6      	b.n	8001b56 <_printf_i+0x182>
 8001b88:	4616      	mov	r6, r2
 8001b8a:	e7bb      	b.n	8001b04 <_printf_i+0x130>
 8001b8c:	680b      	ldr	r3, [r1, #0]
 8001b8e:	6826      	ldr	r6, [r4, #0]
 8001b90:	6960      	ldr	r0, [r4, #20]
 8001b92:	1d1d      	adds	r5, r3, #4
 8001b94:	600d      	str	r5, [r1, #0]
 8001b96:	0635      	lsls	r5, r6, #24
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	d501      	bpl.n	8001ba0 <_printf_i+0x1cc>
 8001b9c:	6018      	str	r0, [r3, #0]
 8001b9e:	e002      	b.n	8001ba6 <_printf_i+0x1d2>
 8001ba0:	0671      	lsls	r1, r6, #25
 8001ba2:	d5fb      	bpl.n	8001b9c <_printf_i+0x1c8>
 8001ba4:	8018      	strh	r0, [r3, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	6123      	str	r3, [r4, #16]
 8001baa:	4616      	mov	r6, r2
 8001bac:	e7ba      	b.n	8001b24 <_printf_i+0x150>
 8001bae:	680b      	ldr	r3, [r1, #0]
 8001bb0:	1d1a      	adds	r2, r3, #4
 8001bb2:	600a      	str	r2, [r1, #0]
 8001bb4:	681e      	ldr	r6, [r3, #0]
 8001bb6:	6862      	ldr	r2, [r4, #4]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f7fe fb18 	bl	80001f0 <memchr>
 8001bc0:	b108      	cbz	r0, 8001bc6 <_printf_i+0x1f2>
 8001bc2:	1b80      	subs	r0, r0, r6
 8001bc4:	6060      	str	r0, [r4, #4]
 8001bc6:	6863      	ldr	r3, [r4, #4]
 8001bc8:	6123      	str	r3, [r4, #16]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bd0:	e7a8      	b.n	8001b24 <_printf_i+0x150>
 8001bd2:	6923      	ldr	r3, [r4, #16]
 8001bd4:	4632      	mov	r2, r6
 8001bd6:	4649      	mov	r1, r9
 8001bd8:	4640      	mov	r0, r8
 8001bda:	47d0      	blx	sl
 8001bdc:	3001      	adds	r0, #1
 8001bde:	d0ab      	beq.n	8001b38 <_printf_i+0x164>
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	079b      	lsls	r3, r3, #30
 8001be4:	d413      	bmi.n	8001c0e <_printf_i+0x23a>
 8001be6:	68e0      	ldr	r0, [r4, #12]
 8001be8:	9b03      	ldr	r3, [sp, #12]
 8001bea:	4298      	cmp	r0, r3
 8001bec:	bfb8      	it	lt
 8001bee:	4618      	movlt	r0, r3
 8001bf0:	e7a4      	b.n	8001b3c <_printf_i+0x168>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	4632      	mov	r2, r6
 8001bf6:	4649      	mov	r1, r9
 8001bf8:	4640      	mov	r0, r8
 8001bfa:	47d0      	blx	sl
 8001bfc:	3001      	adds	r0, #1
 8001bfe:	d09b      	beq.n	8001b38 <_printf_i+0x164>
 8001c00:	3501      	adds	r5, #1
 8001c02:	68e3      	ldr	r3, [r4, #12]
 8001c04:	9903      	ldr	r1, [sp, #12]
 8001c06:	1a5b      	subs	r3, r3, r1
 8001c08:	42ab      	cmp	r3, r5
 8001c0a:	dcf2      	bgt.n	8001bf2 <_printf_i+0x21e>
 8001c0c:	e7eb      	b.n	8001be6 <_printf_i+0x212>
 8001c0e:	2500      	movs	r5, #0
 8001c10:	f104 0619 	add.w	r6, r4, #25
 8001c14:	e7f5      	b.n	8001c02 <_printf_i+0x22e>
 8001c16:	bf00      	nop
 8001c18:	08001fc5 	.word	0x08001fc5
 8001c1c:	08001fd6 	.word	0x08001fd6

08001c20 <memcpy>:
 8001c20:	440a      	add	r2, r1
 8001c22:	4291      	cmp	r1, r2
 8001c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c28:	d100      	bne.n	8001c2c <memcpy+0xc>
 8001c2a:	4770      	bx	lr
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c36:	4291      	cmp	r1, r2
 8001c38:	d1f9      	bne.n	8001c2e <memcpy+0xe>
 8001c3a:	bd10      	pop	{r4, pc}

08001c3c <memmove>:
 8001c3c:	4288      	cmp	r0, r1
 8001c3e:	b510      	push	{r4, lr}
 8001c40:	eb01 0402 	add.w	r4, r1, r2
 8001c44:	d902      	bls.n	8001c4c <memmove+0x10>
 8001c46:	4284      	cmp	r4, r0
 8001c48:	4623      	mov	r3, r4
 8001c4a:	d807      	bhi.n	8001c5c <memmove+0x20>
 8001c4c:	1e43      	subs	r3, r0, #1
 8001c4e:	42a1      	cmp	r1, r4
 8001c50:	d008      	beq.n	8001c64 <memmove+0x28>
 8001c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c5a:	e7f8      	b.n	8001c4e <memmove+0x12>
 8001c5c:	4402      	add	r2, r0
 8001c5e:	4601      	mov	r1, r0
 8001c60:	428a      	cmp	r2, r1
 8001c62:	d100      	bne.n	8001c66 <memmove+0x2a>
 8001c64:	bd10      	pop	{r4, pc}
 8001c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c6e:	e7f7      	b.n	8001c60 <memmove+0x24>

08001c70 <_free_r>:
 8001c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c72:	2900      	cmp	r1, #0
 8001c74:	d048      	beq.n	8001d08 <_free_r+0x98>
 8001c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c7a:	9001      	str	r0, [sp, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8001c82:	bfb8      	it	lt
 8001c84:	18e4      	addlt	r4, r4, r3
 8001c86:	f000 f8d3 	bl	8001e30 <__malloc_lock>
 8001c8a:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <_free_r+0x9c>)
 8001c8c:	9801      	ldr	r0, [sp, #4]
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	4615      	mov	r5, r2
 8001c92:	b933      	cbnz	r3, 8001ca2 <_free_r+0x32>
 8001c94:	6063      	str	r3, [r4, #4]
 8001c96:	6014      	str	r4, [r2, #0]
 8001c98:	b003      	add	sp, #12
 8001c9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c9e:	f000 b8cd 	b.w	8001e3c <__malloc_unlock>
 8001ca2:	42a3      	cmp	r3, r4
 8001ca4:	d90b      	bls.n	8001cbe <_free_r+0x4e>
 8001ca6:	6821      	ldr	r1, [r4, #0]
 8001ca8:	1862      	adds	r2, r4, r1
 8001caa:	4293      	cmp	r3, r2
 8001cac:	bf04      	itt	eq
 8001cae:	681a      	ldreq	r2, [r3, #0]
 8001cb0:	685b      	ldreq	r3, [r3, #4]
 8001cb2:	6063      	str	r3, [r4, #4]
 8001cb4:	bf04      	itt	eq
 8001cb6:	1852      	addeq	r2, r2, r1
 8001cb8:	6022      	streq	r2, [r4, #0]
 8001cba:	602c      	str	r4, [r5, #0]
 8001cbc:	e7ec      	b.n	8001c98 <_free_r+0x28>
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	b10b      	cbz	r3, 8001cc8 <_free_r+0x58>
 8001cc4:	42a3      	cmp	r3, r4
 8001cc6:	d9fa      	bls.n	8001cbe <_free_r+0x4e>
 8001cc8:	6811      	ldr	r1, [r2, #0]
 8001cca:	1855      	adds	r5, r2, r1
 8001ccc:	42a5      	cmp	r5, r4
 8001cce:	d10b      	bne.n	8001ce8 <_free_r+0x78>
 8001cd0:	6824      	ldr	r4, [r4, #0]
 8001cd2:	4421      	add	r1, r4
 8001cd4:	1854      	adds	r4, r2, r1
 8001cd6:	42a3      	cmp	r3, r4
 8001cd8:	6011      	str	r1, [r2, #0]
 8001cda:	d1dd      	bne.n	8001c98 <_free_r+0x28>
 8001cdc:	681c      	ldr	r4, [r3, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	6053      	str	r3, [r2, #4]
 8001ce2:	4421      	add	r1, r4
 8001ce4:	6011      	str	r1, [r2, #0]
 8001ce6:	e7d7      	b.n	8001c98 <_free_r+0x28>
 8001ce8:	d902      	bls.n	8001cf0 <_free_r+0x80>
 8001cea:	230c      	movs	r3, #12
 8001cec:	6003      	str	r3, [r0, #0]
 8001cee:	e7d3      	b.n	8001c98 <_free_r+0x28>
 8001cf0:	6825      	ldr	r5, [r4, #0]
 8001cf2:	1961      	adds	r1, r4, r5
 8001cf4:	428b      	cmp	r3, r1
 8001cf6:	bf04      	itt	eq
 8001cf8:	6819      	ldreq	r1, [r3, #0]
 8001cfa:	685b      	ldreq	r3, [r3, #4]
 8001cfc:	6063      	str	r3, [r4, #4]
 8001cfe:	bf04      	itt	eq
 8001d00:	1949      	addeq	r1, r1, r5
 8001d02:	6021      	streq	r1, [r4, #0]
 8001d04:	6054      	str	r4, [r2, #4]
 8001d06:	e7c7      	b.n	8001c98 <_free_r+0x28>
 8001d08:	b003      	add	sp, #12
 8001d0a:	bd30      	pop	{r4, r5, pc}
 8001d0c:	20000088 	.word	0x20000088

08001d10 <_malloc_r>:
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d12:	1ccd      	adds	r5, r1, #3
 8001d14:	f025 0503 	bic.w	r5, r5, #3
 8001d18:	3508      	adds	r5, #8
 8001d1a:	2d0c      	cmp	r5, #12
 8001d1c:	bf38      	it	cc
 8001d1e:	250c      	movcc	r5, #12
 8001d20:	2d00      	cmp	r5, #0
 8001d22:	4606      	mov	r6, r0
 8001d24:	db01      	blt.n	8001d2a <_malloc_r+0x1a>
 8001d26:	42a9      	cmp	r1, r5
 8001d28:	d903      	bls.n	8001d32 <_malloc_r+0x22>
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	6033      	str	r3, [r6, #0]
 8001d2e:	2000      	movs	r0, #0
 8001d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d32:	f000 f87d 	bl	8001e30 <__malloc_lock>
 8001d36:	4921      	ldr	r1, [pc, #132]	; (8001dbc <_malloc_r+0xac>)
 8001d38:	680a      	ldr	r2, [r1, #0]
 8001d3a:	4614      	mov	r4, r2
 8001d3c:	b99c      	cbnz	r4, 8001d66 <_malloc_r+0x56>
 8001d3e:	4f20      	ldr	r7, [pc, #128]	; (8001dc0 <_malloc_r+0xb0>)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b923      	cbnz	r3, 8001d4e <_malloc_r+0x3e>
 8001d44:	4621      	mov	r1, r4
 8001d46:	4630      	mov	r0, r6
 8001d48:	f000 f862 	bl	8001e10 <_sbrk_r>
 8001d4c:	6038      	str	r0, [r7, #0]
 8001d4e:	4629      	mov	r1, r5
 8001d50:	4630      	mov	r0, r6
 8001d52:	f000 f85d 	bl	8001e10 <_sbrk_r>
 8001d56:	1c43      	adds	r3, r0, #1
 8001d58:	d123      	bne.n	8001da2 <_malloc_r+0x92>
 8001d5a:	230c      	movs	r3, #12
 8001d5c:	6033      	str	r3, [r6, #0]
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f000 f86c 	bl	8001e3c <__malloc_unlock>
 8001d64:	e7e3      	b.n	8001d2e <_malloc_r+0x1e>
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	1b5b      	subs	r3, r3, r5
 8001d6a:	d417      	bmi.n	8001d9c <_malloc_r+0x8c>
 8001d6c:	2b0b      	cmp	r3, #11
 8001d6e:	d903      	bls.n	8001d78 <_malloc_r+0x68>
 8001d70:	6023      	str	r3, [r4, #0]
 8001d72:	441c      	add	r4, r3
 8001d74:	6025      	str	r5, [r4, #0]
 8001d76:	e004      	b.n	8001d82 <_malloc_r+0x72>
 8001d78:	6863      	ldr	r3, [r4, #4]
 8001d7a:	42a2      	cmp	r2, r4
 8001d7c:	bf0c      	ite	eq
 8001d7e:	600b      	streq	r3, [r1, #0]
 8001d80:	6053      	strne	r3, [r2, #4]
 8001d82:	4630      	mov	r0, r6
 8001d84:	f000 f85a 	bl	8001e3c <__malloc_unlock>
 8001d88:	f104 000b 	add.w	r0, r4, #11
 8001d8c:	1d23      	adds	r3, r4, #4
 8001d8e:	f020 0007 	bic.w	r0, r0, #7
 8001d92:	1ac2      	subs	r2, r0, r3
 8001d94:	d0cc      	beq.n	8001d30 <_malloc_r+0x20>
 8001d96:	1a1b      	subs	r3, r3, r0
 8001d98:	50a3      	str	r3, [r4, r2]
 8001d9a:	e7c9      	b.n	8001d30 <_malloc_r+0x20>
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	6864      	ldr	r4, [r4, #4]
 8001da0:	e7cc      	b.n	8001d3c <_malloc_r+0x2c>
 8001da2:	1cc4      	adds	r4, r0, #3
 8001da4:	f024 0403 	bic.w	r4, r4, #3
 8001da8:	42a0      	cmp	r0, r4
 8001daa:	d0e3      	beq.n	8001d74 <_malloc_r+0x64>
 8001dac:	1a21      	subs	r1, r4, r0
 8001dae:	4630      	mov	r0, r6
 8001db0:	f000 f82e 	bl	8001e10 <_sbrk_r>
 8001db4:	3001      	adds	r0, #1
 8001db6:	d1dd      	bne.n	8001d74 <_malloc_r+0x64>
 8001db8:	e7cf      	b.n	8001d5a <_malloc_r+0x4a>
 8001dba:	bf00      	nop
 8001dbc:	20000088 	.word	0x20000088
 8001dc0:	2000008c 	.word	0x2000008c

08001dc4 <_realloc_r>:
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	4607      	mov	r7, r0
 8001dc8:	4614      	mov	r4, r2
 8001dca:	460e      	mov	r6, r1
 8001dcc:	b921      	cbnz	r1, 8001dd8 <_realloc_r+0x14>
 8001dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	f7ff bf9c 	b.w	8001d10 <_malloc_r>
 8001dd8:	b922      	cbnz	r2, 8001de4 <_realloc_r+0x20>
 8001dda:	f7ff ff49 	bl	8001c70 <_free_r>
 8001dde:	4625      	mov	r5, r4
 8001de0:	4628      	mov	r0, r5
 8001de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001de4:	f000 f830 	bl	8001e48 <_malloc_usable_size_r>
 8001de8:	42a0      	cmp	r0, r4
 8001dea:	d20f      	bcs.n	8001e0c <_realloc_r+0x48>
 8001dec:	4621      	mov	r1, r4
 8001dee:	4638      	mov	r0, r7
 8001df0:	f7ff ff8e 	bl	8001d10 <_malloc_r>
 8001df4:	4605      	mov	r5, r0
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d0f2      	beq.n	8001de0 <_realloc_r+0x1c>
 8001dfa:	4631      	mov	r1, r6
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	f7ff ff0f 	bl	8001c20 <memcpy>
 8001e02:	4631      	mov	r1, r6
 8001e04:	4638      	mov	r0, r7
 8001e06:	f7ff ff33 	bl	8001c70 <_free_r>
 8001e0a:	e7e9      	b.n	8001de0 <_realloc_r+0x1c>
 8001e0c:	4635      	mov	r5, r6
 8001e0e:	e7e7      	b.n	8001de0 <_realloc_r+0x1c>

08001e10 <_sbrk_r>:
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	4d06      	ldr	r5, [pc, #24]	; (8001e2c <_sbrk_r+0x1c>)
 8001e14:	2300      	movs	r3, #0
 8001e16:	4604      	mov	r4, r0
 8001e18:	4608      	mov	r0, r1
 8001e1a:	602b      	str	r3, [r5, #0]
 8001e1c:	f7fe fc1c 	bl	8000658 <_sbrk>
 8001e20:	1c43      	adds	r3, r0, #1
 8001e22:	d102      	bne.n	8001e2a <_sbrk_r+0x1a>
 8001e24:	682b      	ldr	r3, [r5, #0]
 8001e26:	b103      	cbz	r3, 8001e2a <_sbrk_r+0x1a>
 8001e28:	6023      	str	r3, [r4, #0]
 8001e2a:	bd38      	pop	{r3, r4, r5, pc}
 8001e2c:	200000a0 	.word	0x200000a0

08001e30 <__malloc_lock>:
 8001e30:	4801      	ldr	r0, [pc, #4]	; (8001e38 <__malloc_lock+0x8>)
 8001e32:	f000 b811 	b.w	8001e58 <__retarget_lock_acquire_recursive>
 8001e36:	bf00      	nop
 8001e38:	200000a8 	.word	0x200000a8

08001e3c <__malloc_unlock>:
 8001e3c:	4801      	ldr	r0, [pc, #4]	; (8001e44 <__malloc_unlock+0x8>)
 8001e3e:	f000 b80c 	b.w	8001e5a <__retarget_lock_release_recursive>
 8001e42:	bf00      	nop
 8001e44:	200000a8 	.word	0x200000a8

08001e48 <_malloc_usable_size_r>:
 8001e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e4c:	1f18      	subs	r0, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bfbc      	itt	lt
 8001e52:	580b      	ldrlt	r3, [r1, r0]
 8001e54:	18c0      	addlt	r0, r0, r3
 8001e56:	4770      	bx	lr

08001e58 <__retarget_lock_acquire_recursive>:
 8001e58:	4770      	bx	lr

08001e5a <__retarget_lock_release_recursive>:
 8001e5a:	4770      	bx	lr

08001e5c <round>:
 8001e5c:	ec51 0b10 	vmov	r0, r1, d0
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8001e66:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8001e6a:	2c13      	cmp	r4, #19
 8001e6c:	ee10 2a10 	vmov	r2, s0
 8001e70:	460b      	mov	r3, r1
 8001e72:	dc19      	bgt.n	8001ea8 <round+0x4c>
 8001e74:	2c00      	cmp	r4, #0
 8001e76:	da09      	bge.n	8001e8c <round+0x30>
 8001e78:	3401      	adds	r4, #1
 8001e7a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8001e7e:	d103      	bne.n	8001e88 <round+0x2c>
 8001e80:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8001e84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001e88:	2100      	movs	r1, #0
 8001e8a:	e028      	b.n	8001ede <round+0x82>
 8001e8c:	4d15      	ldr	r5, [pc, #84]	; (8001ee4 <round+0x88>)
 8001e8e:	4125      	asrs	r5, r4
 8001e90:	ea01 0605 	and.w	r6, r1, r5
 8001e94:	4332      	orrs	r2, r6
 8001e96:	d00e      	beq.n	8001eb6 <round+0x5a>
 8001e98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e9c:	fa42 f404 	asr.w	r4, r2, r4
 8001ea0:	4423      	add	r3, r4
 8001ea2:	ea23 0305 	bic.w	r3, r3, r5
 8001ea6:	e7ef      	b.n	8001e88 <round+0x2c>
 8001ea8:	2c33      	cmp	r4, #51	; 0x33
 8001eaa:	dd07      	ble.n	8001ebc <round+0x60>
 8001eac:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001eb0:	d101      	bne.n	8001eb6 <round+0x5a>
 8001eb2:	f7fe f9f3 	bl	800029c <__adddf3>
 8001eb6:	ec41 0b10 	vmov	d0, r0, r1
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
 8001ebc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8001ec0:	f04f 35ff 	mov.w	r5, #4294967295
 8001ec4:	40f5      	lsrs	r5, r6
 8001ec6:	4228      	tst	r0, r5
 8001ec8:	d0f5      	beq.n	8001eb6 <round+0x5a>
 8001eca:	2101      	movs	r1, #1
 8001ecc:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8001ed0:	fa01 f404 	lsl.w	r4, r1, r4
 8001ed4:	1912      	adds	r2, r2, r4
 8001ed6:	bf28      	it	cs
 8001ed8:	185b      	addcs	r3, r3, r1
 8001eda:	ea22 0105 	bic.w	r1, r2, r5
 8001ede:	4608      	mov	r0, r1
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	e7e8      	b.n	8001eb6 <round+0x5a>
 8001ee4:	000fffff 	.word	0x000fffff

08001ee8 <_init>:
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	bf00      	nop
 8001eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eee:	bc08      	pop	{r3}
 8001ef0:	469e      	mov	lr, r3
 8001ef2:	4770      	bx	lr

08001ef4 <_fini>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	bf00      	nop
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr
