
cmsis_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018ac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001a40  08001a40  00011a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a94  08001a94  00011a9c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a94  08001a94  00011a9c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a94  08001a9c  00011a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a94  08001a94  00011a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a98  08001a98  00011a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08001a9c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08001a9c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011a9c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000048dd  00000000  00000000  00011acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cc9  00000000  00000000  000163a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00017078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00017288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f6ad  00000000  00000000  00017430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e20  00000000  00000000  00026add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055693  00000000  00000000  000298fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007ef90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007f0  00000000  00000000  0007efe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001a28 	.word	0x08001a28

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08001a28 	.word	0x08001a28

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_d2uiz>:
 800054c:	004a      	lsls	r2, r1, #1
 800054e:	d211      	bcs.n	8000574 <__aeabi_d2uiz+0x28>
 8000550:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000554:	d211      	bcs.n	800057a <__aeabi_d2uiz+0x2e>
 8000556:	d50d      	bpl.n	8000574 <__aeabi_d2uiz+0x28>
 8000558:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800055c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000560:	d40e      	bmi.n	8000580 <__aeabi_d2uiz+0x34>
 8000562:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056e:	fa23 f002 	lsr.w	r0, r3, r2
 8000572:	4770      	bx	lr
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	4770      	bx	lr
 800057a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800057e:	d102      	bne.n	8000586 <__aeabi_d2uiz+0x3a>
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	4770      	bx	lr
 8000586:	f04f 0000 	mov.w	r0, #0
 800058a:	4770      	bx	lr

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <main>:
USART_Handle_t p_usart2;

volatile uint8_t SendBuffer1Flag, IdleFlag, ErrorFlag, SendBuffer0Flag;

int main(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b08f      	sub	sp, #60	; 0x3c
 80005cc:	af00      	add	r7, sp, #0
	GPIOConfig();
 80005ce:	f000 f8ad 	bl	800072c <GPIOConfig>
	uint8_t databuffer1[16] =
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
 80005d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
	{ 0 };
	uint8_t databuffer0[16] =
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
	{ 0 };
	uint8_t databuffer2[16] = "print dma \n\r";
 80005f2:	4b41      	ldr	r3, [pc, #260]	; (80006f8 <main+0x130>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f8:	c407      	stmia	r4!, {r0, r1, r2}
 80005fa:	7023      	strb	r3, [r4, #0]
 80005fc:	f107 0311 	add.w	r3, r7, #17
 8000600:	2200      	movs	r2, #0
 8000602:	801a      	strh	r2, [r3, #0]
 8000604:	709a      	strb	r2, [r3, #2]

	memset(&p_dma1, 0, sizeof(p_dma1));
 8000606:	2224      	movs	r2, #36	; 0x24
 8000608:	2100      	movs	r1, #0
 800060a:	483c      	ldr	r0, [pc, #240]	; (80006fc <main+0x134>)
 800060c:	f001 f9be 	bl	800198c <memset>

	USART2Config(&p_usart2);
 8000610:	483b      	ldr	r0, [pc, #236]	; (8000700 <main+0x138>)
 8000612:	f000 f8ad 	bl	8000770 <USART2Config>
	DMA1Config(&p_dma1);
 8000616:	4839      	ldr	r0, [pc, #228]	; (80006fc <main+0x134>)
 8000618:	f000 f8d4 	bl	80007c4 <DMA1Config>


	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800061c:	2011      	movs	r0, #17
 800061e:	f7ff ffb5 	bl	800058c <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000622:	2010      	movs	r0, #16
 8000624:	f7ff ffb2 	bl	800058c <__NVIC_EnableIRQ>
	// Usart_TransmitDMADoubleBuffer(&p_usart2, databuffer0, databuffer1, 16);
	// USART DMA configuration for double buffer - circular mode is enabled
	// automatically when using double buffer data is copied to data buffer0 then
	// to databuffer1
	USART_ConfigureReceiveDMA(&p_usart2, databuffer0, databuffer1);
 8000628:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	4833      	ldr	r0, [pc, #204]	; (8000700 <main+0x138>)
 8000634:	f001 f84a 	bl	80016cc <USART_ConfigureReceiveDMA>
	USART_ReceiveDMAStart(&p_usart2, 16);
 8000638:	2110      	movs	r1, #16
 800063a:	4831      	ldr	r0, [pc, #196]	; (8000700 <main+0x138>)
 800063c:	f001 f87a 	bl	8001734 <USART_ReceiveDMAStart>
	USART_ConfigureTransmitDMA(&p_usart2, databuffer2, NULL);
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	482e      	ldr	r0, [pc, #184]	; (8000700 <main+0x138>)
 8000648:	f001 f906 	bl	8001858 <USART_ConfigureTransmitDMA>
	USART_TransmitDMAStart(&p_usart2, 16);
 800064c:	2110      	movs	r1, #16
 800064e:	482c      	ldr	r0, [pc, #176]	; (8000700 <main+0x138>)
 8000650:	f001 f930 	bl	80018b4 <USART_TransmitDMAStart>
	
	while (1)
	{
		for (uint32_t i = 0; i < 100000; i++)
 8000654:	2300      	movs	r3, #0
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
 8000658:	e002      	b.n	8000660 <main+0x98>
 800065a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800065c:	3301      	adds	r3, #1
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
 8000660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000662:	4a28      	ldr	r2, [pc, #160]	; (8000704 <main+0x13c>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d9f8      	bls.n	800065a <main+0x92>
		{
		}
		GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000668:	2105      	movs	r1, #5
 800066a:	4827      	ldr	r0, [pc, #156]	; (8000708 <main+0x140>)
 800066c:	f000 fd2a 	bl	80010c4 <GPIO_TogglePin>

		if (SendBuffer1Flag == 1)
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <main+0x144>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b01      	cmp	r3, #1
 8000678:	d10e      	bne.n	8000698 <main+0xd0>
		{
			SendBuffer1Flag = 0;
 800067a:	4b24      	ldr	r3, [pc, #144]	; (800070c <main+0x144>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&p_usart2, (uint8_t*) "\n\r printing db1:", 16);
 8000680:	2210      	movs	r2, #16
 8000682:	4923      	ldr	r1, [pc, #140]	; (8000710 <main+0x148>)
 8000684:	481e      	ldr	r0, [pc, #120]	; (8000700 <main+0x138>)
 8000686:	f001 f898 	bl	80017ba <USART_Transmit>
			USART_Transmit(&p_usart2, databuffer1, 16);
 800068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068e:	2210      	movs	r2, #16
 8000690:	4619      	mov	r1, r3
 8000692:	481b      	ldr	r0, [pc, #108]	; (8000700 <main+0x138>)
 8000694:	f001 f891 	bl	80017ba <USART_Transmit>
		}

		if (SendBuffer0Flag == 1)
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <main+0x14c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10e      	bne.n	80006c0 <main+0xf8>
		{
			SendBuffer0Flag = 0;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <main+0x14c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&p_usart2, (uint8_t*) "\n\r printing db0:", 16);
 80006a8:	2210      	movs	r2, #16
 80006aa:	491b      	ldr	r1, [pc, #108]	; (8000718 <main+0x150>)
 80006ac:	4814      	ldr	r0, [pc, #80]	; (8000700 <main+0x138>)
 80006ae:	f001 f884 	bl	80017ba <USART_Transmit>
			USART_Transmit(&p_usart2, databuffer0, 16);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2210      	movs	r2, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	4811      	ldr	r0, [pc, #68]	; (8000700 <main+0x138>)
 80006bc:	f001 f87d 	bl	80017ba <USART_Transmit>
		}

		if (IdleFlag == 1)
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <main+0x154>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d107      	bne.n	80006da <main+0x112>
		{
			IdleFlag = 0;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <main+0x154>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&p_usart2, (uint8_t*) "IDLE LINE\n\r", 11);
 80006d0:	220b      	movs	r2, #11
 80006d2:	4913      	ldr	r1, [pc, #76]	; (8000720 <main+0x158>)
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <main+0x138>)
 80006d6:	f001 f870 	bl	80017ba <USART_Transmit>
		}

		if (ErrorFlag == 1)
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <main+0x15c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d1b7      	bne.n	8000654 <main+0x8c>
		{
			ErrorFlag = 0;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <main+0x15c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&p_usart2, (uint8_t*) "ERROR LINE\n\r", 12);
 80006ea:	220c      	movs	r2, #12
 80006ec:	490e      	ldr	r1, [pc, #56]	; (8000728 <main+0x160>)
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <main+0x138>)
 80006f0:	f001 f863 	bl	80017ba <USART_Transmit>
		for (uint32_t i = 0; i < 100000; i++)
 80006f4:	e7ae      	b.n	8000654 <main+0x8c>
 80006f6:	bf00      	nop
 80006f8:	08001a84 	.word	0x08001a84
 80006fc:	20000034 	.word	0x20000034
 8000700:	20000020 	.word	0x20000020
 8000704:	0001869f 	.word	0x0001869f
 8000708:	40020000 	.word	0x40020000
 800070c:	2000001c 	.word	0x2000001c
 8000710:	08001a40 	.word	0x08001a40
 8000714:	20000058 	.word	0x20000058
 8000718:	08001a54 	.word	0x08001a54
 800071c:	20000030 	.word	0x20000030
 8000720:	08001a68 	.word	0x08001a68
 8000724:	20000059 	.word	0x20000059
 8000728:	08001a74 	.word	0x08001a74

0800072c <GPIOConfig>:
		}
	}
}

void GPIOConfig(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 8000732:	2301      	movs	r3, #1
 8000734:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 8000736:	2305      	movs	r3, #5
 8000738:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 800073a:	2300      	movs	r3, #0
 800073c:	72bb      	strb	r3, [r7, #10]
	GPIOx.pGPIOx = GPIOA;
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <GPIOConfig+0x3c>)
 8000740:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fb2f 	bl	8000da8 <GPIO_InitPin>

	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_EXTI_FT;
 800074a:	2304      	movs	r3, #4
 800074c:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.PinNumber = GPIO_PIN_13;
 800074e:	230d      	movs	r3, #13
 8000750:	723b      	strb	r3, [r7, #8]
	GPIOx.pGPIOx = GPIOC;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <GPIOConfig+0x40>)
 8000754:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fb25 	bl	8000da8 <GPIO_InitPin>

	return;
 800075e:	bf00      	nop
}
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40020000 	.word	0x40020000
 800076c:	40020800 	.word	0x40020800

08000770 <USART2Config>:

// template config function
void USART2Config(USART_Handle_t *p_usart2)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	p_usart2->p_usartx = USART2;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <USART2Config+0x48>)
 800077c:	601a      	str	r2, [r3, #0]
	p_usart2->usart_dma.p_dma_stream_tx = DMA1_Stream6;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <USART2Config+0x4c>)
 8000782:	605a      	str	r2, [r3, #4]
	p_usart2->usart_dma.p_dma_stream_rx = DMA1_Stream5;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <USART2Config+0x50>)
 8000788:	609a      	str	r2, [r3, #8]
	USART_SetBasicParameters(p_usart2, kUsartWordLenght8, kUsartStopBits0,
 800078a:	2302      	movs	r3, #2
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 ff4b 	bl	800162c <USART_SetBasicParameters>
			kUsartNoParity);
	USART_SetBaudRate(p_usart2, 115200, kUsartOversampling16);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 fe83 	bl	80014a8 <USART_SetBaudRate>
	USART_EnableIRQs(p_usart2, USART_CR1_IDLEIE, 0, USART_CR3_EIE);
 80007a2:	2301      	movs	r3, #1
 80007a4:	2200      	movs	r2, #0
 80007a6:	2110      	movs	r1, #16
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 ff0f 	bl	80015cc <USART_EnableIRQs>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40004400 	.word	0x40004400
 80007bc:	400260a0 	.word	0x400260a0
 80007c0:	40026088 	.word	0x40026088

080007c4 <DMA1Config>:

void DMA1Config(DMA_Handle_t *p_dma1)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	// read
	p_dma1->p_dmax = DMA1;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <DMA1Config+0x60>)
 80007d0:	601a      	str	r2, [r3, #0]
	p_dma1->p_dma_streamx = DMA1_Stream5;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a14      	ldr	r2, [pc, #80]	; (8000828 <DMA1Config+0x64>)
 80007d6:	605a      	str	r2, [r3, #4]
	p_dma1->stream_config.channel_number = kChannel4;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2204      	movs	r2, #4
 80007dc:	721a      	strb	r2, [r3, #8]
	p_dma1->stream_config.circular_mode = kCircularDisable;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	73da      	strb	r2, [r3, #15]
	p_dma1->stream_config.direction = kPeriToMem;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	729a      	strb	r2, [r3, #10]
	p_dma1->stream_config.mem_data_size = kByte;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	735a      	strb	r2, [r3, #13]
	p_dma1->stream_config.mem_increment = kIncrementEnable;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2201      	movs	r2, #1
 80007f4:	731a      	strb	r2, [r3, #12]
	p_dma1->stream_config.peri_data_size = kByte;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	739a      	strb	r2, [r3, #14]
	p_dma1->stream_config.peri_increment = kIncrementDisable;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	72da      	strb	r2, [r3, #11]

	DMA_StreamInit(p_dma1);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f9d4 	bl	8000bb0 <DMA_StreamInit>

	// send
	p_dma1->p_dma_streamx = DMA1_Stream6;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <DMA1Config+0x68>)
 800080c:	605a      	str	r2, [r3, #4]
	p_dma1->stream_config.direction = kMemToPeri;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2201      	movs	r2, #1
 8000812:	729a      	strb	r2, [r3, #10]

	DMA_StreamInit(p_dma1);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 f9cb 	bl	8000bb0 <DMA_StreamInit>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40026000 	.word	0x40026000
 8000828:	40026088 	.word	0x40026088
 800082c:	400260a0 	.word	0x400260a0

08000830 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	if (USART2->SR & USART_SR_IDLE)
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <USART2_IRQHandler+0x48>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	2b00      	cmp	r3, #0
 800083e:	d007      	beq.n	8000850 <USART2_IRQHandler+0x20>
	{
		IdleFlag = USART2->DR;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <USART2_IRQHandler+0x48>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <USART2_IRQHandler+0x4c>)
 8000848:	701a      	strb	r2, [r3, #0]
		IdleFlag = 1;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <USART2_IRQHandler+0x4c>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
	}
	
	if (USART2->SR & USART_ERROR_FLAGS)
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <USART2_IRQHandler+0x48>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <USART2_IRQHandler+0x32>
	{
		ErrorFlag = 1;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <USART2_IRQHandler+0x50>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
	}

	USART2->SR &= ~(USART_SR_RXNE);
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <USART2_IRQHandler+0x48>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <USART2_IRQHandler+0x48>)
 8000868:	f023 0320 	bic.w	r3, r3, #32
 800086c:	6013      	str	r3, [r2, #0]

}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	40004400 	.word	0x40004400
 800087c:	20000030 	.word	0x20000030
 8000880:	20000059 	.word	0x20000059

08000884 <DMA1_Stream6_IRQHandler>:
// send
void DMA1_Stream6_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

	USART_DMATransmitDoneCallback(&p_usart2);
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <DMA1_Stream6_IRQHandler+0x1c>)
 800088a:	f001 f846 	bl	800191a <USART_DMATransmitDoneCallback>
	DMA1->HIFCR |= DMA_HIFCR_CTCIF6;
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <DMA1_Stream6_IRQHandler+0x20>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <DMA1_Stream6_IRQHandler+0x20>)
 8000894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000898:	60d3      	str	r3, [r2, #12]
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000020 	.word	0x20000020
 80008a4:	40026000 	.word	0x40026000

080008a8 <DMA1_Stream5_IRQHandler>:
// read
void DMA1_Stream5_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	USART_DMAReceiveDoneCallback(&p_usart2);
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <DMA1_Stream5_IRQHandler+0x38>)
 80008ae:	f000 ff6f 	bl	8001790 <USART_DMAReceiveDoneCallback>
	// this IRQ we will get after receiving amount of character defined in
	if (p_usart2.usart_dma.p_dma_stream_rx->CR & (DMA_SxCR_CT))
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <DMA1_Stream5_IRQHandler+0x38>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d003      	beq.n	80008c8 <DMA1_Stream5_IRQHandler+0x20>
	{
		SendBuffer1Flag = 1;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <DMA1_Stream5_IRQHandler+0x3c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e002      	b.n	80008ce <DMA1_Stream5_IRQHandler+0x26>
	}
	else
	{
		SendBuffer0Flag = 1;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <DMA1_Stream5_IRQHandler+0x40>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
	}
	DMA1->HIFCR |= DMA_HIFCR_CTCIF5;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <DMA1_Stream5_IRQHandler+0x44>)
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	4a06      	ldr	r2, [pc, #24]	; (80008ec <DMA1_Stream5_IRQHandler+0x44>)
 80008d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d8:	60d3      	str	r3, [r2, #12]
	// USART_ReceiveDMAStart(&p_usart2, 1);
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000020 	.word	0x20000020
 80008e4:	2000001c 	.word	0x2000001c
 80008e8:	20000058 	.word	0x20000058
 80008ec:	40026000 	.word	0x40026000

080008f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800094c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800091a:	490e      	ldr	r1, [pc, #56]	; (8000954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000930:	4c0b      	ldr	r4, [pc, #44]	; (8000960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800093e:	f7ff ffd7 	bl	80008f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000942:	f000 ffff 	bl	8001944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000946:	f7ff fe3f 	bl	80005c8 <main>
  bx  lr    
 800094a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800094c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000958:	08001a9c 	.word	0x08001a9c
  ldr r2, =_sbss
 800095c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000960:	2000005c 	.word	0x2000005c

08000964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC_IRQHandler>
	...

08000968 <DMA_ClockEnable>:
#include "stdint.h"
#include "stm32f401xe.h"
#include "stm32f401xe_rcc.h"

void DMA_ClockEnable(DMA_TypeDef *p_dmax)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	if (p_dmax == DMA1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <DMA_ClockEnable+0x40>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d106      	bne.n	8000986 <DMA_ClockEnable+0x1e>
	{
		RCC_CLOCK_DMA1_ENABLE();
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <DMA_ClockEnable+0x44>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <DMA_ClockEnable+0x44>)
 800097e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
	else if (p_dmax == DMA2)
	{
		RCC_CLOCK_DMA2_ENABLE();
	}

	return;
 8000984:	e00a      	b.n	800099c <DMA_ClockEnable+0x34>
	else if (p_dmax == DMA2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <DMA_ClockEnable+0x48>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d106      	bne.n	800099c <DMA_ClockEnable+0x34>
		RCC_CLOCK_DMA2_ENABLE();
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <DMA_ClockEnable+0x44>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a06      	ldr	r2, [pc, #24]	; (80009ac <DMA_ClockEnable+0x44>)
 8000994:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
	return;
 800099a:	bf00      	nop
 800099c:	bf00      	nop
}
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40026000 	.word	0x40026000
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40026400 	.word	0x40026400

080009b4 <DMA_GetStreamNumber>:

static uint8_t DMA_GetStreamNumber(DMA_Handle_t *p_handle_dma)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if (p_handle_dma->p_dma_streamx == DMA1_Stream0
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <DMA_GetStreamNumber+0xe0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d004      	beq.n	80009d0 <DMA_GetStreamNumber+0x1c>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream0)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <DMA_GetStreamNumber+0xe4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d101      	bne.n	80009d4 <DMA_GetStreamNumber+0x20>
	{
		return 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	e058      	b.n	8000a86 <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	4a30      	ldr	r2, [pc, #192]	; (8000a9c <DMA_GetStreamNumber+0xe8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d004      	beq.n	80009e8 <DMA_GetStreamNumber+0x34>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <DMA_GetStreamNumber+0xec>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d101      	bne.n	80009ec <DMA_GetStreamNumber+0x38>
	{
		return 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e04c      	b.n	8000a86 <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream2
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	4a2c      	ldr	r2, [pc, #176]	; (8000aa4 <DMA_GetStreamNumber+0xf0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d004      	beq.n	8000a00 <DMA_GetStreamNumber+0x4c>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream2)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <DMA_GetStreamNumber+0xf4>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d101      	bne.n	8000a04 <DMA_GetStreamNumber+0x50>
	{
		return 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	e040      	b.n	8000a86 <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a28      	ldr	r2, [pc, #160]	; (8000aac <DMA_GetStreamNumber+0xf8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d004      	beq.n	8000a18 <DMA_GetStreamNumber+0x64>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream3)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <DMA_GetStreamNumber+0xfc>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d101      	bne.n	8000a1c <DMA_GetStreamNumber+0x68>
	{
		return 3;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	e034      	b.n	8000a86 <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream4
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	4a24      	ldr	r2, [pc, #144]	; (8000ab4 <DMA_GetStreamNumber+0x100>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d004      	beq.n	8000a30 <DMA_GetStreamNumber+0x7c>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream4)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <DMA_GetStreamNumber+0x104>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d101      	bne.n	8000a34 <DMA_GetStreamNumber+0x80>
	{
		return 4;
 8000a30:	2304      	movs	r3, #4
 8000a32:	e028      	b.n	8000a86 <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream5
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	4a20      	ldr	r2, [pc, #128]	; (8000abc <DMA_GetStreamNumber+0x108>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d004      	beq.n	8000a48 <DMA_GetStreamNumber+0x94>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream5)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <DMA_GetStreamNumber+0x10c>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d101      	bne.n	8000a4c <DMA_GetStreamNumber+0x98>
	{
		return 5;
 8000a48:	2305      	movs	r3, #5
 8000a4a:	e01c      	b.n	8000a86 <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream6
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <DMA_GetStreamNumber+0x110>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d004      	beq.n	8000a60 <DMA_GetStreamNumber+0xac>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream6)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <DMA_GetStreamNumber+0x114>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d101      	bne.n	8000a64 <DMA_GetStreamNumber+0xb0>
	{
		return 6;
 8000a60:	2306      	movs	r3, #6
 8000a62:	e010      	b.n	8000a86 <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream7
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a18      	ldr	r2, [pc, #96]	; (8000acc <DMA_GetStreamNumber+0x118>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d004      	beq.n	8000a78 <DMA_GetStreamNumber+0xc4>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream7)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <DMA_GetStreamNumber+0x11c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d101      	bne.n	8000a7c <DMA_GetStreamNumber+0xc8>
	{
		return 7;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	e004      	b.n	8000a86 <DMA_GetStreamNumber+0xd2>
	}

	p_handle_dma->status_error = kErrWrongStreamNumber;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f883 2020 	strb.w	r2, [r3, #32]
	return 200;
 8000a84:	23c8      	movs	r3, #200	; 0xc8
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40026010 	.word	0x40026010
 8000a98:	40026410 	.word	0x40026410
 8000a9c:	40026028 	.word	0x40026028
 8000aa0:	40026428 	.word	0x40026428
 8000aa4:	40026040 	.word	0x40026040
 8000aa8:	40026440 	.word	0x40026440
 8000aac:	40026058 	.word	0x40026058
 8000ab0:	40026458 	.word	0x40026458
 8000ab4:	40026070 	.word	0x40026070
 8000ab8:	40026470 	.word	0x40026470
 8000abc:	40026088 	.word	0x40026088
 8000ac0:	40026488 	.word	0x40026488
 8000ac4:	400260a0 	.word	0x400260a0
 8000ac8:	400264a0 	.word	0x400264a0
 8000acc:	400260b8 	.word	0x400260b8
 8000ad0:	400264b8 	.word	0x400264b8

08000ad4 <DMA_ClearAllStreamFlags>:

static void DMA_ClearAllStreamFlags(DMA_Handle_t *p_handle_dma,
		uint8_t stream_number)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
	// clear flags
	if (stream_number < 4)
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d813      	bhi.n	8000b0e <DMA_ClearAllStreamFlags+0x3a>
	{
		// clear 5 flags on positions 0,6,16,22 for streams 0-3
		p_handle_dma->p_dmax->LIFCR |= (DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6899      	ldr	r1, [r3, #8]
				| DMA_LIFCR_CTEIF0 |
				DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTCIF0)
				<< (((stream_number / 2) * 16) + (stream_number * 6));
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	085b      	lsrs	r3, r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	0118      	lsls	r0, r3, #4
 8000af4:	78fa      	ldrb	r2, [r7, #3]
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4403      	add	r3, r0
 8000b00:	223d      	movs	r2, #61	; 0x3d
 8000b02:	409a      	lsls	r2, r3
		p_handle_dma->p_dmax->LIFCR |= (DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	e023      	b.n	8000b56 <DMA_ClearAllStreamFlags+0x82>
	}
	else if (stream_number >= 4 || stream_number < 8)
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d802      	bhi.n	8000b1a <DMA_ClearAllStreamFlags+0x46>
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	2b07      	cmp	r3, #7
 8000b18:	d818      	bhi.n	8000b4c <DMA_ClearAllStreamFlags+0x78>
	{
		// clear 5 flags on positions 0,6,16,22 for streams 0-3
		p_handle_dma->p_dmax->HIFCR |= (DMA_HIFCR_CFEIF4 | DMA_HIFCR_CDMEIF4
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68d9      	ldr	r1, [r3, #12]
				| DMA_HIFCR_CTEIF4 |
				DMA_HIFCR_CHTIF4 | DMA_HIFCR_CTCIF4)
				<< (((stream_number / 6) * 16) + ((stream_number % 4) * 6));
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <DMA_ClearAllStreamFlags+0x8c>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	0118      	lsls	r0, r3, #4
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	f003 0203 	and.w	r2, r3, #3
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4403      	add	r3, r0
 8000b3e:	223d      	movs	r2, #61	; 0x3d
 8000b40:	409a      	lsls	r2, r3
		p_handle_dma->p_dmax->HIFCR |= (DMA_HIFCR_CFEIF4 | DMA_HIFCR_CDMEIF4
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	430a      	orrs	r2, r1
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	e004      	b.n	8000b56 <DMA_ClearAllStreamFlags+0x82>
	}
	else
	{
		// error
		p_handle_dma->status_error = kErrWrongStreamNumber;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f883 2020 	strb.w	r2, [r3, #32]
		return;
 8000b54:	bf00      	nop
	}
}
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	aaaaaaab 	.word	0xaaaaaaab

08000b64 <DMA_EnableDoubleBufferMode>:

void DMA_EnableDoubleBufferMode(DMA_Stream_TypeDef *p_dma_streamx)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	p_dma_streamx->CR |= DMA_SxCR_DBM;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
	return;
 8000b78:	bf00      	nop
}
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DMA_WriteAdresses>:

void DMA_WriteAdresses(DMA_Stream_TypeDef *p_dma_streamx, uint32_t *peri_add,
		uint32_t *mem0_add, uint32_t *mem1_add)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
	p_dma_streamx->PAR = (uint32_t) peri_add;
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	609a      	str	r2, [r3, #8]

	p_dma_streamx->M0AR = (uint32_t) mem0_add;
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	60da      	str	r2, [r3, #12]

	// only used for double buffer mode
	p_dma_streamx->M1AR = (uint32_t) mem1_add;
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

	return;
 8000ba4:	bf00      	nop
}
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DMA_StreamInit>:

void DMA_StreamInit(DMA_Handle_t *p_handle_dma)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	// save stream number in uint8
	uint8_t stream_number = DMA_GetStreamNumber(p_handle_dma);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fefb 	bl	80009b4 <DMA_GetStreamNumber>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	73fb      	strb	r3, [r7, #15]
	// enable peripheral clock
	DMA_ClockEnable(p_handle_dma->p_dmax);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fece 	bl	8000968 <DMA_ClockEnable>

	// disable dma to configure new stream
	p_handle_dma->p_dma_streamx->CR &= ~(DMA_SxCR_EN);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f022 0201 	bic.w	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]

	// wait until EN bit is cleared
	while (p_handle_dma->p_dma_streamx->CR & DMA_SxCR_EN)
 8000bdc:	bf00      	nop
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f8      	bne.n	8000bde <DMA_StreamInit+0x2e>
		;

	// clear flags
	DMA_ClearAllStreamFlags(p_handle_dma, stream_number);
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff6f 	bl	8000ad4 <DMA_ClearAllStreamFlags>
	//** OPTION TO CONFIGURE HERE DOUBLE BUFFER **//
	//** OPTION TO CONFIGURE HERE NO DATA ITEMS TO TRANSFER **//
	//** OPTION TO CONFIGURE MEM/PERI ADDRESSES **//

	// select DMA channel
	p_handle_dma->p_dma_streamx->CR |=
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	681a      	ldr	r2, [r3, #0]
			(p_handle_dma->stream_config.channel_number << DMA_SxCR_CHSEL_Pos);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7a1b      	ldrb	r3, [r3, #8]
 8000c00:	065b      	lsls	r3, r3, #25
 8000c02:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]

	// select flow control mode
	p_handle_dma->p_dma_streamx->CR |=
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.flow_control) << DMA_SxCR_PFCTRL_Pos);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7f9b      	ldrb	r3, [r3, #30]
 8000c16:	015b      	lsls	r3, r3, #5
 8000c18:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]

	// configure priority
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.priority)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7a5b      	ldrb	r3, [r3, #9]
			<< DMA_SxCR_PL_Pos);
 8000c2c:	041b      	lsls	r3, r3, #16
 8000c2e:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.priority)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	430a      	orrs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]

	// configure fifo en/dis , thresholds
	p_handle_dma->p_dma_streamx->FCR |=
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	695a      	ldr	r2, [r3, #20]
			((p_handle_dma->stream_config.fifo_threshold) << DMA_SxFCR_FTH_Pos);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7f5b      	ldrb	r3, [r3, #29]
 8000c42:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->FCR |=
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	615a      	str	r2, [r3, #20]
	p_handle_dma->p_dma_streamx->FCR |=
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	695a      	ldr	r2, [r3, #20]
			((p_handle_dma->stream_config.direct_mode) << DMA_SxFCR_DMDIS_Pos);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7f1b      	ldrb	r3, [r3, #28]
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->FCR |=
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	615a      	str	r2, [r3, #20]

	// configure data transfer direction
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.direction)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7a9b      	ldrb	r3, [r3, #10]
			<< DMA_SxCR_DIR_Pos);
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.direction)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	430a      	orrs	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]

	// configure increment/fixed mode
	p_handle_dma->p_dma_streamx->CR |=
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.mem_increment) << DMA_SxCR_MINC_Pos);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7b1b      	ldrb	r3, [r3, #12]
 8000c82:	029b      	lsls	r3, r3, #10
 8000c84:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]
	p_handle_dma->p_dma_streamx->CR |=
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.peri_increment) << DMA_SxCR_PINC_Pos);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7adb      	ldrb	r3, [r3, #11]
 8000c98:	025b      	lsls	r3, r3, #9
 8000c9a:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
	{
		// check if its possible to configure this burst mode
	}

	// configure data widths
	p_handle_dma->p_dma_streamx->CR |=
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.mem_data_size) << DMA_SxCR_MSIZE_Pos);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7b5b      	ldrb	r3, [r3, #13]
 8000cae:	035b      	lsls	r3, r3, #13
 8000cb0:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
	p_handle_dma->p_dma_streamx->CR |=
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.peri_data_size) << DMA_SxCR_PSIZE_Pos);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7b9b      	ldrb	r3, [r3, #14]
 8000cc4:	02db      	lsls	r3, r3, #11
 8000cc6:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]

	// configure circular mode
	p_handle_dma->p_dma_streamx->CR |=
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.circular_mode) << DMA_SxCR_CIRC_Pos);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7bdb      	ldrb	r3, [r3, #15]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]

	// activate the stream by setting the EN bit in the DMA_SxCR register
	// p_handle_dma->p_dma_streamx->CR |= DMA_SxCR_EN;
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
static void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a24      	ldr	r2, [pc, #144]	; (8000d8c <GPIO_ClockEnable+0x9c>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d106      	bne.n	8000d0e <GPIO_ClockEnable+0x1e>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	e035      	b.n	8000d7a <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOB)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <GPIO_ClockEnable+0xa4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d106      	bne.n	8000d24 <GPIO_ClockEnable+0x34>
	{
		RCC_CLOCK_GPIOB_ENABLE();
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	e02a      	b.n	8000d7a <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOC)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <GPIO_ClockEnable+0xa8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d106      	bne.n	8000d3a <GPIO_ClockEnable+0x4a>
	{
		RCC_CLOCK_GPIOC_ENABLE();
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
 8000d38:	e01f      	b.n	8000d7a <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOD)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <GPIO_ClockEnable+0xac>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d106      	bne.n	8000d50 <GPIO_ClockEnable+0x60>
	{
		RCC_CLOCK_GPIOD_ENABLE();
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	e014      	b.n	8000d7a <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <GPIO_ClockEnable+0xb0>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d106      	bne.n	8000d66 <GPIO_ClockEnable+0x76>
	{
		RCC_CLOCK_GPIOE_ENABLE();
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	e009      	b.n	8000d7a <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOH)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <GPIO_ClockEnable+0xb4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d105      	bne.n	8000d7a <GPIO_ClockEnable+0x8a>
	{
		RCC_CLOCK_GPIOH_ENABLE();
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <GPIO_ClockEnable+0xa0>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d7a:	f3bf 8f4f 	dsb	sy
}
 8000d7e:	bf00      	nop
	// this operation is unnecessary here because configuration library is taking
	// more than 2 clock cycles between clock enable and configuring register, i
	// leave it here to remind myself that stmf401x has a limitation that is
	// described in errata point 2.1.6
	__DSB();
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020400 	.word	0x40020400
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020c00 	.word	0x40020c00
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40021c00 	.word	0x40021c00

08000da8 <GPIO_InitPin>:
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base
 * address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	// enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff9b 	bl	8000cf0 <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	795b      	ldrb	r3, [r3, #5]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d81f      	bhi.n	8000e02 <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	791b      	ldrb	r3, [r3, #4]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2103      	movs	r1, #3
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	400a      	ands	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
		hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	795b      	ldrb	r3, [r3, #5]
 8000dea:	4619      	mov	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	791b      	ldrb	r3, [r3, #4]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	4619      	mov	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e0a9      	b.n	8000f56 <GPIO_InitPin+0x1ae>
	else
	{
		// IRQ mode

		// set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2103      	movs	r1, #3
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
		// interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000e20:	4b9e      	ldr	r3, [pc, #632]	; (800109c <GPIO_InitPin+0x2f4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	7912      	ldrb	r2, [r2, #4]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	408a      	lsls	r2, r1
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4a9a      	ldr	r2, [pc, #616]	; (800109c <GPIO_InitPin+0x2f4>)
 8000e32:	430b      	orrs	r3, r1
 8000e34:	6013      	str	r3, [r2, #0]

		// rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	795b      	ldrb	r3, [r3, #5]
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	d003      	beq.n	8000e46 <GPIO_InitPin+0x9e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	795b      	ldrb	r3, [r3, #5]
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d10a      	bne.n	8000e5c <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000e46:	4b95      	ldr	r3, [pc, #596]	; (800109c <GPIO_InitPin+0x2f4>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	7912      	ldrb	r2, [r2, #4]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	2201      	movs	r2, #1
 8000e52:	408a      	lsls	r2, r1
 8000e54:	4611      	mov	r1, r2
 8000e56:	4a91      	ldr	r2, [pc, #580]	; (800109c <GPIO_InitPin+0x2f4>)
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	795b      	ldrb	r3, [r3, #5]
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	d003      	beq.n	8000e6c <GPIO_InitPin+0xc4>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	795b      	ldrb	r3, [r3, #5]
 8000e68:	2b06      	cmp	r3, #6
 8000e6a:	d10a      	bne.n	8000e82 <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000e6c:	4b8b      	ldr	r3, [pc, #556]	; (800109c <GPIO_InitPin+0x2f4>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	7912      	ldrb	r2, [r2, #4]
 8000e74:	4611      	mov	r1, r2
 8000e76:	2201      	movs	r2, #1
 8000e78:	408a      	lsls	r2, r1
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4a87      	ldr	r2, [pc, #540]	; (800109c <GPIO_InitPin+0x2f4>)
 8000e7e:	430b      	orrs	r3, r1
 8000e80:	6093      	str	r3, [r2, #8]
		}

		// enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	791b      	ldrb	r3, [r3, #4]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d80c      	bhi.n	8000ea4 <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 8000e8a:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <GPIO_InitPin+0x2f8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	7912      	ldrb	r2, [r2, #4]
 8000e92:	3206      	adds	r2, #6
 8000e94:	2101      	movs	r1, #1
 8000e96:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4a80      	ldr	r2, [pc, #512]	; (80010a0 <GPIO_InitPin+0x2f8>)
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e010      	b.n	8000ec6 <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	791b      	ldrb	r3, [r3, #4]
 8000ea8:	2b09      	cmp	r3, #9
 8000eaa:	d806      	bhi.n	8000eba <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 8000eac:	4b7c      	ldr	r3, [pc, #496]	; (80010a0 <GPIO_InitPin+0x2f8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a7b      	ldr	r2, [pc, #492]	; (80010a0 <GPIO_InitPin+0x2f8>)
 8000eb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	e005      	b.n	8000ec6 <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 8000eba:	4b79      	ldr	r3, [pc, #484]	; (80010a0 <GPIO_InitPin+0x2f8>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4a78      	ldr	r2, [pc, #480]	; (80010a0 <GPIO_InitPin+0x2f8>)
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec4:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000ec6:	4b77      	ldr	r3, [pc, #476]	; (80010a4 <GPIO_InitPin+0x2fc>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a76      	ldr	r2, [pc, #472]	; (80010a4 <GPIO_InitPin+0x2fc>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a74      	ldr	r2, [pc, #464]	; (80010a8 <GPIO_InitPin+0x300>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d024      	beq.n	8000f26 <GPIO_InitPin+0x17e>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a72      	ldr	r2, [pc, #456]	; (80010ac <GPIO_InitPin+0x304>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d01d      	beq.n	8000f22 <GPIO_InitPin+0x17a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a71      	ldr	r2, [pc, #452]	; (80010b0 <GPIO_InitPin+0x308>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d016      	beq.n	8000f1e <GPIO_InitPin+0x176>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a6f      	ldr	r2, [pc, #444]	; (80010b4 <GPIO_InitPin+0x30c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d00f      	beq.n	8000f1a <GPIO_InitPin+0x172>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a6e      	ldr	r2, [pc, #440]	; (80010b8 <GPIO_InitPin+0x310>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d008      	beq.n	8000f16 <GPIO_InitPin+0x16e>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a6c      	ldr	r2, [pc, #432]	; (80010bc <GPIO_InitPin+0x314>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <GPIO_InitPin+0x16a>
 8000f0e:	2307      	movs	r3, #7
 8000f10:	e00a      	b.n	8000f28 <GPIO_InitPin+0x180>
 8000f12:	2300      	movs	r3, #0
 8000f14:	e008      	b.n	8000f28 <GPIO_InitPin+0x180>
 8000f16:	2304      	movs	r3, #4
 8000f18:	e006      	b.n	8000f28 <GPIO_InitPin+0x180>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <GPIO_InitPin+0x180>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <GPIO_InitPin+0x180>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <GPIO_InitPin+0x180>
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 8000f2a:	4a65      	ldr	r2, [pc, #404]	; (80010c0 <GPIO_InitPin+0x318>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	791b      	ldrb	r3, [r3, #4]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	b2d8      	uxtb	r0, r3
 8000f34:	4603      	mov	r3, r0
 8000f36:	3302      	adds	r3, #2
 8000f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3c:	7bf9      	ldrb	r1, [r7, #15]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	7912      	ldrb	r2, [r2, #4]
 8000f42:	f002 0203 	and.w	r2, r2, #3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	495c      	ldr	r1, [pc, #368]	; (80010c0 <GPIO_InitPin+0x318>)
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	1c83      	adds	r3, r0, #2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	795b      	ldrb	r3, [r3, #5]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d003      	beq.n	8000f66 <GPIO_InitPin+0x1be>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	795b      	ldrb	r3, [r3, #5]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d13b      	bne.n	8000fde <GPIO_InitPin+0x236>
	{
		// speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	791b      	ldrb	r3, [r3, #4]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2103      	movs	r1, #3
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	400a      	ands	r2, r1
 8000f82:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	79db      	ldrb	r3, [r3, #7]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	609a      	str	r2, [r3, #8]

		// output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	791b      	ldrb	r3, [r3, #4]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	408b      	lsls	r3, r1
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	799b      	ldrb	r3, [r3, #6]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	791b      	ldrb	r3, [r3, #4]
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	605a      	str	r2, [r3, #4]
	}

	// set alternate function bits
	if (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	795b      	ldrb	r3, [r3, #5]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d137      	bne.n	8001056 <GPIO_InitPin+0x2ae>
	{
		// clear 4 AF bits and set new value
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] &= ~(15UL << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	7912      	ldrb	r2, [r2, #4]
 8000fee:	08d2      	lsrs	r2, r2, #3
 8000ff0:	b2d0      	uxtb	r0, r2
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	791b      	ldrb	r3, [r3, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4011      	ands	r1, r2
 8001012:	f100 0208 	add.w	r2, r0, #8
 8001016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] |= (hGPIO->PinConfig.AF << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	7912      	ldrb	r2, [r2, #4]
 8001022:	08d2      	lsrs	r2, r2, #3
 8001024:	b2d1      	uxtb	r1, r2
 8001026:	460a      	mov	r2, r1
 8001028:	3208      	adds	r2, #8
 800102a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7a5b      	ldrb	r3, [r3, #9]
 8001032:	4618      	mov	r0, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	fa00 f303 	lsl.w	r3, r0, r3
 8001042:	461c      	mov	r4, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4608      	mov	r0, r1
 800104a:	ea42 0104 	orr.w	r1, r2, r4
 800104e:	f100 0208 	add.w	r2, r0, #8
 8001052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2103      	movs	r1, #3
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	4619      	mov	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	400a      	ands	r2, r1
 8001072:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a1b      	ldrb	r3, [r3, #8]
 800107e:	4619      	mov	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	791b      	ldrb	r3, [r3, #4]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	4619      	mov	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	60da      	str	r2, [r3, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bd90      	pop	{r4, r7, pc}
 800109c:	40013c00 	.word	0x40013c00
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021c00 	.word	0x40021c00
 80010c0:	40013800 	.word	0x40013800

080010c4 <GPIO_TogglePin>:
 * @param[*GPIO] - base address of gpiox peripheral
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *GPIO, uint8_t PinNumber)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
	GPIO->ODR ^= 0b1 << PinNumber;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	78fa      	ldrb	r2, [r7, #3]
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	405a      	eors	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	615a      	str	r2, [r3, #20]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <RCC_CalculatePllclk>:

	return 0;
}

static uint32_t RCC_CalculatePllclk(uint32_t source)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <RCC_CalculatePllclk+0x5c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001102:	81fb      	strh	r3, [r7, #14]
	;
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <RCC_CalculatePllclk+0x5c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	099b      	lsrs	r3, r3, #6
 800110a:	b29b      	uxth	r3, r3
 800110c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001110:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <RCC_CalculatePllclk+0x5c>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	0c1b      	lsrs	r3, r3, #16
 8001118:	b29b      	uxth	r3, r3
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	817b      	strh	r3, [r7, #10]
	;

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 8001120:	897b      	ldrh	r3, [r7, #10]
 8001122:	3301      	adds	r3, #1
 8001124:	b29b      	uxth	r3, r3
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 800112a:	89fb      	ldrh	r3, [r7, #14]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	89ba      	ldrh	r2, [r7, #12]
 8001134:	fb02 f203 	mul.w	r2, r2, r3
 8001138:	897b      	ldrh	r3, [r7, #10]
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b07      	cmp	r3, #7
 800115e:	d822      	bhi.n	80011a6 <RCC_GetApbPrescaler+0x56>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <RCC_GetApbPrescaler+0x18>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001189 	.word	0x08001189
 800116c:	080011a7 	.word	0x080011a7
 8001170:	080011a7 	.word	0x080011a7
 8001174:	080011a7 	.word	0x080011a7
 8001178:	0800118f 	.word	0x0800118f
 800117c:	08001195 	.word	0x08001195
 8001180:	0800119b 	.word	0x0800119b
 8001184:	080011a1 	.word	0x080011a1
	{
	case (RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
		break;
 800118c:	e00b      	b.n	80011a6 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 800118e:	2302      	movs	r3, #2
 8001190:	60fb      	str	r3, [r7, #12]
		break;
 8001192:	e008      	b.n	80011a6 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 8001194:	2304      	movs	r3, #4
 8001196:	60fb      	str	r3, [r7, #12]
		break;
 8001198:	e005      	b.n	80011a6 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 800119a:	2308      	movs	r3, #8
 800119c:	60fb      	str	r3, [r7, #12]
		break;
 800119e:	e002      	b.n	80011a6 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 80011a0:	2310      	movs	r3, #16
 80011a2:	60fb      	str	r3, [r7, #12]
		break;
 80011a4:	bf00      	nop
	}

	return apb_prescaler;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	b29b      	uxth	r3, r3
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d840      	bhi.n	800124a <RCC_GetAhbPrescaler+0x92>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <RCC_GetAhbPrescaler+0x18>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	08001211 	.word	0x08001211
 80011d4:	0800124b 	.word	0x0800124b
 80011d8:	0800124b 	.word	0x0800124b
 80011dc:	0800124b 	.word	0x0800124b
 80011e0:	0800124b 	.word	0x0800124b
 80011e4:	0800124b 	.word	0x0800124b
 80011e8:	0800124b 	.word	0x0800124b
 80011ec:	0800124b 	.word	0x0800124b
 80011f0:	08001217 	.word	0x08001217
 80011f4:	0800121d 	.word	0x0800121d
 80011f8:	08001223 	.word	0x08001223
 80011fc:	08001229 	.word	0x08001229
 8001200:	0800122f 	.word	0x0800122f
 8001204:	08001235 	.word	0x08001235
 8001208:	0800123b 	.word	0x0800123b
 800120c:	08001243 	.word	0x08001243
	{
	case (RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
		break;
 8001214:	e019      	b.n	800124a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 8001216:	2302      	movs	r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
		break;
 800121a:	e016      	b.n	800124a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 800121c:	2304      	movs	r3, #4
 800121e:	60fb      	str	r3, [r7, #12]
		break;
 8001220:	e013      	b.n	800124a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 8001222:	2308      	movs	r3, #8
 8001224:	60fb      	str	r3, [r7, #12]
		break;
 8001226:	e010      	b.n	800124a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 8001228:	2310      	movs	r3, #16
 800122a:	60fb      	str	r3, [r7, #12]
		break;
 800122c:	e00d      	b.n	800124a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	60fb      	str	r3, [r7, #12]
		break;
 8001232:	e00a      	b.n	800124a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	60fb      	str	r3, [r7, #12]
		break;
 8001238:	e007      	b.n	800124a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	60fb      	str	r3, [r7, #12]
		break;
 8001240:	e003      	b.n	800124a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 8001242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001246:	60fb      	str	r3, [r7, #12]
		break;
 8001248:	bf00      	nop
	}

	return ahb_prescaler;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	b29b      	uxth	r3, r3
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop

0800125c <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <RCC_GetSysclk+0x54>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d00a      	beq.n	8001282 <RCC_GetSysclk+0x26>
 800126c:	2b08      	cmp	r3, #8
 800126e:	d81c      	bhi.n	80012aa <RCC_GetSysclk+0x4e>
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <RCC_GetSysclk+0x1e>
 8001274:	2b04      	cmp	r3, #4
 8001276:	d002      	beq.n	800127e <RCC_GetSysclk+0x22>
 8001278:	e017      	b.n	80012aa <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <RCC_GetSysclk+0x58>)
 800127c:	e016      	b.n	80012ac <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 800127e:	2300      	movs	r3, #0
 8001280:	e014      	b.n	80012ac <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <RCC_GetSysclk+0x54>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <RCC_GetSysclk+0x3a>
 800128e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001292:	d005      	beq.n	80012a0 <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 8001294:	e009      	b.n	80012aa <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <RCC_GetSysclk+0x58>)
 8001298:	f7ff ff2a 	bl	80010f0 <RCC_CalculatePllclk>
 800129c:	4603      	mov	r3, r0
 800129e:	e005      	b.n	80012ac <RCC_GetSysclk+0x50>
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff ff25 	bl	80010f0 <RCC_CalculatePllclk>
 80012a6:	4603      	mov	r3, r0
 80012a8:	e000      	b.n	80012ac <RCC_GetSysclk+0x50>
	}

	return 0;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	00f42400 	.word	0x00f42400

080012b8 <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 80012be:	f7ff ffcd 	bl	800125c <RCC_GetSysclk>
 80012c2:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <RCC_GetHclk+0x34>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff70 	bl	80011b8 <RCC_GetAhbPrescaler>
 80012d8:	4603      	mov	r3, r0
 80012da:	807b      	strh	r3, [r7, #2]
	return sysclk / ahb_prescaler;
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800

080012f0 <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 80012fa:	f7ff ffdd 	bl	80012b8 <RCC_GetHclk>
 80012fe:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch (plck_x)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d002      	beq.n	800130c <RCC_GetPclk+0x1c>
 8001306:	2b02      	cmp	r3, #2
 8001308:	d00d      	beq.n	8001326 <RCC_GetPclk+0x36>
 800130a:	e019      	b.n	8001340 <RCC_GetPclk+0x50>
	{
	case (1):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >>
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <RCC_GetPclk+0x60>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	0a9b      	lsrs	r3, r3, #10
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff18 	bl	8001150 <RCC_GetApbPrescaler>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE1_Pos);
		break;
 8001324:	e00c      	b.n	8001340 <RCC_GetPclk+0x50>

	case (2):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >>
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <RCC_GetPclk+0x60>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	0b5b      	lsrs	r3, r3, #13
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff0b 	bl	8001150 <RCC_GetApbPrescaler>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE2_Pos);
		break;
 800133e:	bf00      	nop
	}

	return hclk / apb_prescaler;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800

08001354 <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs *freqs)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	freqs->sysclk = RCC_GetSysclk();
 800135c:	f7ff ff7e 	bl	800125c <RCC_GetSysclk>
 8001360:	4602      	mov	r2, r0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 8001366:	f7ff ffa7 	bl	80012b8 <RCC_GetHclk>
 800136a:	4602      	mov	r2, r0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ffbd 	bl	80012f0 <RCC_GetPclk>
 8001376:	4602      	mov	r2, r0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 800137c:	2002      	movs	r0, #2
 800137e:	f7ff ffb7 	bl	80012f0 <RCC_GetPclk>
 8001382:	4602      	mov	r2, r0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	60da      	str	r2, [r3, #12]

	return;
 8001388:	bf00      	nop
}
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <__NVIC_EnableIRQ>:
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <__NVIC_EnableIRQ+0x38>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <USART_ClockEnable>:
// ******** INIT FUNCTIONS ******** //
/*
 * enable RCC Clock
 */
static void USART_ClockEnable(USART_Handle_t *p_handle_usart)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	if (p_handle_usart->p_usartx == USART1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <USART_ClockEnable+0x5c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d106      	bne.n	80013ec <USART_ClockEnable+0x20>
	{
		RCC_CLOCK_USART1_ENABLE();
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <USART_ClockEnable+0x60>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <USART_ClockEnable+0x60>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else if (p_handle_usart->p_usartx == USART6)
	{
		RCC_CLOCK_USART6_ENABLE();
	}
}
 80013ea:	e016      	b.n	800141a <USART_ClockEnable+0x4e>
	else if (p_handle_usart->p_usartx == USART2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <USART_ClockEnable+0x64>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d106      	bne.n	8001404 <USART_ClockEnable+0x38>
		RCC_CLOCK_USART2_ENABLE();
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <USART_ClockEnable+0x60>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a0c      	ldr	r2, [pc, #48]	; (800142c <USART_ClockEnable+0x60>)
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001402:	e00a      	b.n	800141a <USART_ClockEnable+0x4e>
	else if (p_handle_usart->p_usartx == USART6)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <USART_ClockEnable+0x68>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d105      	bne.n	800141a <USART_ClockEnable+0x4e>
		RCC_CLOCK_USART6_ENABLE();
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <USART_ClockEnable+0x60>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a06      	ldr	r2, [pc, #24]	; (800142c <USART_ClockEnable+0x60>)
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40011000 	.word	0x40011000
 800142c:	40023800 	.word	0x40023800
 8001430:	40004400 	.word	0x40004400
 8001434:	40011400 	.word	0x40011400

08001438 <USART_InitGpioPins>:

/*
 * init gpio pins
 */
static void USART_InitGpioPins(USART_Handle_t *p_handle_usart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	GPIO_Handle_t gpio_rx, gpio_tx;

	if (p_handle_usart->p_usartx == USART2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <USART_InitGpioPins+0x68>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10b      	bne.n	8001462 <USART_InitGpioPins+0x2a>
	{
		// PB6 RX
		gpio_rx.pGPIOx = GPIOA;
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <USART_InitGpioPins+0x6c>)
 800144c:	617b      	str	r3, [r7, #20]
		gpio_rx.PinConfig.PinNumber = GPIO_PIN_3;
 800144e:	2303      	movs	r3, #3
 8001450:	763b      	strb	r3, [r7, #24]

		// PB7 TX
		gpio_tx.pGPIOx = GPIOA;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <USART_InitGpioPins+0x6c>)
 8001454:	60bb      	str	r3, [r7, #8]
		gpio_tx.PinConfig.PinNumber = GPIO_PIN_2;
 8001456:	2302      	movs	r3, #2
 8001458:	733b      	strb	r3, [r7, #12]

		// Alternate Function
		gpio_rx.PinConfig.AF = GPIO_PIN_AF_AF7;
 800145a:	2307      	movs	r3, #7
 800145c:	777b      	strb	r3, [r7, #29]
		gpio_tx.PinConfig.AF = GPIO_PIN_AF_AF7;
 800145e:	2307      	movs	r3, #7
 8001460:	747b      	strb	r3, [r7, #17]
	}

	// Mode AF
	gpio_rx.PinConfig.Mode = GPIO_PIN_MODE_AF;
 8001462:	2302      	movs	r3, #2
 8001464:	767b      	strb	r3, [r7, #25]
	gpio_tx.PinConfig.Mode = GPIO_PIN_MODE_AF;
 8001466:	2302      	movs	r3, #2
 8001468:	737b      	strb	r3, [r7, #13]

	// Output type open drain
	gpio_rx.PinConfig.OutputType = GPIO_PIN_OT_OD;
 800146a:	2301      	movs	r3, #1
 800146c:	76bb      	strb	r3, [r7, #26]
	gpio_tx.PinConfig.OutputType = GPIO_PIN_OT_OD;
 800146e:	2301      	movs	r3, #1
 8001470:	73bb      	strb	r3, [r7, #14]

	// Output speed very high
	gpio_rx.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	76fb      	strb	r3, [r7, #27]
	gpio_tx.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	73fb      	strb	r3, [r7, #15]

	// Pull ups
	gpio_rx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	773b      	strb	r3, [r7, #28]
	gpio_tx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	743b      	strb	r3, [r7, #16]

	GPIO_InitPin(&gpio_rx);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fc8e 	bl	8000da8 <GPIO_InitPin>
	GPIO_InitPin(&gpio_tx);
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fc89 	bl	8000da8 <GPIO_InitPin>
}
 8001496:	bf00      	nop
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40004400 	.word	0x40004400
 80014a4:	40020000 	.word	0x40020000

080014a8 <USART_SetBaudRate>:
/*
 * calculate and write in baud rate divider
 */
void USART_SetBaudRate(USART_Handle_t *p_handle_usart, uint32_t baud_rate,
		UsartOversampling_t oversampling)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	4613      	mov	r3, r2
 80014b4:	71fb      	strb	r3, [r7, #7]
	uint16_t baud_div_mantissa;
	uint8_t baud_div_fraction;

	// set oversampling

	p_handle_usart->p_usartx->CR1 |= (oversampling << USART_CR1_OVER8_Pos);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	03db      	lsls	r3, r3, #15
 80014c0:	4619      	mov	r1, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
	// in equation we have 8 * (2 - OVER8)
	uint8_t usart_divmulti =
			8
					* (2
							- (1U
									& (p_handle_usart->p_usartx->CR1
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
											>> USART_CR1_OVER8_Pos)));
 80014d0:	0bdb      	lsrs	r3, r3, #15
									& (p_handle_usart->p_usartx->CR1
 80014d2:	f003 0301 	and.w	r3, r3, #1
							- (1U
 80014d6:	f1c3 0302 	rsb	r3, r3, #2
	uint8_t usart_divmulti =
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	// read clock values from rcc registers
	RCC_GetClockFrequencies(&clock_freqs);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff34 	bl	8001354 <RCC_GetClockFrequencies>

	if (p_handle_usart->p_usartx == USART2)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <USART_SetBaudRate+0x120>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d102      	bne.n	80014fc <USART_SetBaudRate+0x54>
	{
		pclk_freq = clock_freqs.pclk1;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fa:	e001      	b.n	8001500 <USART_SetBaudRate+0x58>
	}
	else
	{
		// usart1 and usart6 are on apb2
		pclk_freq = clock_freqs.pclk2;
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	baud_div = ((float) pclk_freq / (baud_rate * usart_divmulti));
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800150a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800151c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001520:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	baud_div_mantissa = baud_div;
 8001524:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800152c:	ee17 3a90 	vmov	r3, s15
 8001530:	857b      	strh	r3, [r7, #42]	; 0x2a
	// rounding number to get correct fraction
	baud_div_fraction = round((baud_div - baud_div_mantissa) * usart_divmulti);
 8001532:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001540:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	ee17 0a90 	vmov	r0, s15
 8001558:	f7fe ffa0 	bl	800049c <__aeabi_f2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	ec43 2b10 	vmov	d0, r2, r3
 8001564:	f000 fa1a 	bl	800199c <round>
 8001568:	ec53 2b10 	vmov	r2, r3, d0
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7fe ffec 	bl	800054c <__aeabi_d2uiz>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	// if after rounding we have value bigger or equal to oversampling then we
	// need to carry +1 to mantissa and set fraction to 0. like 50,99 -> 51;
	if (baud_div_fraction >= usart_divmulti)
 800157a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800157e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001582:	429a      	cmp	r2, r3
 8001584:	d305      	bcc.n	8001592 <USART_SetBaudRate+0xea>
	{
		baud_div_fraction = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		baud_div_mantissa++;
 800158c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800158e:	3301      	adds	r3, #1
 8001590:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	// insert values to brr register
	p_handle_usart->p_usartx->BRR = 0;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
			<< USART_BRR_DIV_Mantissa_Pos);
 80015a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4619      	mov	r1, r3
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6899      	ldr	r1, [r3, #8]
			<< USART_BRR_DIV_Fraction_Pos);
 80015b4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]
}
 80015c0:	bf00      	nop
 80015c2:	3730      	adds	r7, #48	; 0x30
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40004400 	.word	0x40004400

080015cc <USART_EnableIRQs>:
 * use CRx_IRQ_FLAGS to enable all the interrupts in register, otherwise use
 * like : (USART_CR1_PEIE | USART_CR1_TXEIE)
 */
void USART_EnableIRQs(USART_Handle_t *p_handle_usart, uint32_t CR1_flags,
		uint32_t CR2_flags, uint32_t CR3_flags)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 80015da:	2026      	movs	r0, #38	; 0x26
 80015dc:	f7ff fed8 	bl	8001390 <__NVIC_EnableIRQ>
	// CR1 - PEIE,TXEIE,TCIE,RXNEIE,IDLEIE
	if (CR1_flags)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d007      	beq.n	80015f6 <USART_EnableIRQs+0x2a>
	{
		p_handle_usart->p_usartx->CR1 |= CR1_flags;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68d9      	ldr	r1, [r3, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	60da      	str	r2, [r3, #12]
	}

	// CR2 - LBDIE
	if (CR2_flags)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <USART_EnableIRQs+0x40>
	{
		p_handle_usart->p_usartx->CR2 |= CR2_flags;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6919      	ldr	r1, [r3, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	430a      	orrs	r2, r1
 800160a:	611a      	str	r2, [r3, #16]
	}

	// CR3 - CTSIE, EIE
	if (CR3_flags)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <USART_EnableIRQs+0x58>
	{
		p_handle_usart->p_usartx->CR1 |= CR3_flags;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68d9      	ldr	r1, [r3, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	60da      	str	r2, [r3, #12]
	}

	return;
 8001622:	bf00      	nop
 8001624:	bf00      	nop
}
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <USART_SetBasicParameters>:
 * basic init function
 */
void USART_SetBasicParameters(USART_Handle_t *p_handle_usart,
		UsartWordLenght_t word_lenght, UsartStopBits_t stop_bits,
		UsartParity_t parity)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	4608      	mov	r0, r1
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	4603      	mov	r3, r0
 800163c:	70fb      	strb	r3, [r7, #3]
 800163e:	460b      	mov	r3, r1
 8001640:	70bb      	strb	r3, [r7, #2]
 8001642:	4613      	mov	r3, r2
 8001644:	707b      	strb	r3, [r7, #1]
	USART_InitGpioPins(p_handle_usart);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fef6 	bl	8001438 <USART_InitGpioPins>
	USART_ClockEnable(p_handle_usart);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff febd 	bl	80013cc <USART_ClockEnable>

	//	enable the USART by writing the UE bit in USART_CR1 register to 1.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_UE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001660:	60da      	str	r2, [r3, #12]
	//	program the M bit in USART_CR1 to define the word length.
	p_handle_usart->p_usartx->CR1 |= (word_lenght << USART_CR1_M_Pos);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	031b      	lsls	r3, r3, #12
 800166c:	4619      	mov	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	60da      	str	r2, [r3, #12]
	//	program the number of stop bits in USART_CR2.
	p_handle_usart->p_usartx->CR1 |= (stop_bits << USART_CR2_STOP_Pos);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	78bb      	ldrb	r3, [r7, #2]
 800167e:	031b      	lsls	r3, r3, #12
 8001680:	4619      	mov	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	60da      	str	r2, [r3, #12]
	// program parity control
	if (parity != kUsartNoParity)
 800168a:	787b      	ldrb	r3, [r7, #1]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d011      	beq.n	80016b4 <USART_SetBasicParameters+0x88>
	{
		p_handle_usart->p_usartx->CR1 |= USART_CR1_PCE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800169e:	60da      	str	r2, [r3, #12]
		p_handle_usart->p_usartx->CR1 |= (parity << USART_CR1_PS_Pos);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	787b      	ldrb	r3, [r7, #1]
 80016a8:	025b      	lsls	r3, r3, #9
 80016aa:	4619      	mov	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	60da      	str	r2, [r3, #12]
	}

	//clear TC flag
	p_handle_usart->p_usartx->SR &= ~(USART_SR_TC);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016c2:	601a      	str	r2, [r3, #0]
	return;
 80016c4:	bf00      	nop
}
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <USART_ConfigureReceiveDMA>:
 * then you only have to call Start function, configure data_buffer1 to NULL,
 * in case of using double buffer then configure it with pointer
 */
void USART_ConfigureReceiveDMA(USART_Handle_t *p_handle_usart,
		uint8_t *p_data_buffer0, uint8_t *p_data_buffer1)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
	// enable receive mode
	p_handle_usart->p_usartx->CR1 |= USART_CR1_RE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0204 	orr.w	r2, r2, #4
 80016e6:	60da      	str	r2, [r3, #12]

	// configure double buffer if neccesary
	if (p_data_buffer1 != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d007      	beq.n	80016fe <USART_ConfigureReceiveDMA+0x32>
	{
		DMA_EnableDoubleBufferMode(p_handle_usart->usart_dma.p_dma_stream_rx);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fa36 	bl	8000b64 <DMA_EnableDoubleBufferMode>
		p_handle_usart->rx_status = kUsartRxDma;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2202      	movs	r2, #2
 80016fc:	735a      	strb	r2, [r3, #13]
	}
	// write source and destinations
	DMA_WriteAdresses(p_handle_usart->usart_dma.p_dma_stream_rx,
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6898      	ldr	r0, [r3, #8]
			(uint32_t*) &(p_handle_usart->p_usartx->DR),
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	1d19      	adds	r1, r3, #4
	DMA_WriteAdresses(p_handle_usart->usart_dma.p_dma_stream_rx,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f7ff fa3a 	bl	8000b84 <DMA_WriteAdresses>
			(uint32_t*) p_data_buffer0, (uint32_t*) p_data_buffer1);

	// configure irq flags
	p_handle_usart->usart_dma.p_dma_stream_rx->CR |= DMA_SxCR_TCIE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f042 0210 	orr.w	r2, r2, #16
 800171e:	601a      	str	r2, [r3, #0]
	USART_EnableIRQs(p_handle_usart, USART_CR1_RXNEIE, 0, 0);
 8001720:	2300      	movs	r3, #0
 8001722:	2200      	movs	r2, #0
 8001724:	2120      	movs	r1, #32
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff ff50 	bl	80015cc <USART_EnableIRQs>
	return;
 800172c:	bf00      	nop
}
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <USART_ReceiveDMAStart>:
/*
 * start DMA channel that wait to transfer from UART DR register to
 * destination
 */
void USART_ReceiveDMAStart(USART_Handle_t *p_handle_usart, uint32_t data_lenght)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	// check if line is not receiving right now in other mode
	if (p_handle_usart->rx_status != kUsartRxIdle
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7b5b      	ldrb	r3, [r3, #13]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <USART_ReceiveDMAStart+0x22>
			&& p_handle_usart->rx_status != kUsartRxDma)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7b5b      	ldrb	r3, [r3, #13]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d003      	beq.n	8001756 <USART_ReceiveDMAStart+0x22>
	{
		p_handle_usart->error = kUsartErrorRxBusy;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2202      	movs	r2, #2
 8001752:	731a      	strb	r2, [r3, #12]
		return;
 8001754:	e017      	b.n	8001786 <USART_ReceiveDMAStart+0x52>
	}
	// enable dma receive
	p_handle_usart->p_usartx->CR3 |= USART_CR3_DMAR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001764:	615a      	str	r2, [r3, #20]

	// configure the total number of bytes to be transferred to the DMA
	p_handle_usart->usart_dma.p_dma_stream_rx->NDTR = data_lenght;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	605a      	str	r2, [r3, #4]

	// activate DMA channel transfer
	p_handle_usart->rx_status = kUsartRxDma;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2202      	movs	r2, #2
 8001772:	735a      	strb	r2, [r3, #13]
	p_handle_usart->usart_dma.p_dma_stream_rx->CR |= DMA_SxCR_EN;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f042 0201 	orr.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]

	return;
 8001784:	bf00      	nop
}
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <USART_DMAReceiveDoneCallback>:
 * clear dma rx status to idle after finished dma transmission
 * if you would like to send data on uart sometimes by dma
 * and sometimes by polling - put this in DMAx_Irq handler
 */
void USART_DMAReceiveDoneCallback(USART_Handle_t *p_handle_usart)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	if (!(p_handle_usart->usart_dma.p_dma_stream_rx->CR & DMA_SxCR_CIRC))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d103      	bne.n	80017ae <USART_DMAReceiveDoneCallback+0x1e>
	{
		p_handle_usart->rx_status = kUsartRxIdle;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	735a      	strb	r2, [r3, #13]
	}
	return;
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
}
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <USART_Transmit>:
/*
 * Blocking transmit UART function
 */
void USART_Transmit(USART_Handle_t *p_handle_usart, uint8_t *p_data_buffer,
		uint32_t data_lenght)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b087      	sub	sp, #28
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
	// check if dma transfer is not ongoing
	if (p_handle_usart->tx_status != kUsartTxIdle)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	7b9b      	ldrb	r3, [r3, #14]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <USART_Transmit+0x1c>
	{
		p_handle_usart->error = kUsartErrorTxBusy;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2203      	movs	r2, #3
 80017d2:	731a      	strb	r2, [r3, #12]
		return;
 80017d4:	e03b      	b.n	800184e <USART_Transmit+0x94>
	}

	// disable dma and put the status
	p_handle_usart->p_usartx->CR3 &= ~(USART_CR3_DMAT);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017e4:	615a      	str	r2, [r3, #20]
	p_handle_usart->tx_status = kUsartTxPolling;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	739a      	strb	r2, [r3, #14]

	uint32_t tx_data_to_send = data_lenght;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	617b      	str	r3, [r7, #20]

	//	6. Set the TE bit in USART_CR1 to send an idle frame as first
	// transmission.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_TE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0208 	orr.w	r2, r2, #8
 80017fe:	60da      	str	r2, [r3, #12]
	//	7. Write the data to send in the USART_DR register (this clears the TXE
	// bit). Repeat this 	for each data to be transmitted in case of single
	// buffer.
	while (tx_data_to_send > 0)
 8001800:	e022      	b.n	8001848 <USART_Transmit+0x8e>
	{
		// wait until data register is empty
		while (!(p_handle_usart->p_usartx->SR & USART_SR_TXE))
 8001802:	bf00      	nop
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f8      	beq.n	8001804 <USART_Transmit+0x4a>
			;

		// put data in data register
		p_handle_usart->p_usartx->DR = p_data_buffer[data_lenght
				- tx_data_to_send];
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	1ad3      	subs	r3, r2, r3
		p_handle_usart->p_usartx->DR = p_data_buffer[data_lenght
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	4413      	add	r3, r2
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]

		// change counter
		tx_data_to_send--;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3b01      	subs	r3, #1
 8001828:	617b      	str	r3, [r7, #20]

		//	8. After writing the last data into the USART_DR register, wait until
		// TC=1. This indicates 	that the transmission of the last frame is
		// complete. This is required for instance when 	the USART is disabled or
		// enters the Halt mode to avoid corrupting the last 	transmission
		if (tx_data_to_send == 0)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10b      	bne.n	8001848 <USART_Transmit+0x8e>
		{
			// check if data transfer is finished
			while (!(p_handle_usart->p_usartx->SR & USART_SR_TC))
 8001830:	bf00      	nop
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f8      	beq.n	8001832 <USART_Transmit+0x78>
				;
			p_handle_usart->tx_status = kUsartTxIdle;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	739a      	strb	r2, [r3, #14]
			return;
 8001846:	e002      	b.n	800184e <USART_Transmit+0x94>
	while (tx_data_to_send > 0)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1d9      	bne.n	8001802 <USART_Transmit+0x48>
		}
	}
}
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <USART_ConfigureTransmitDMA>:
 * similar to configure ReceiveDMA, put NULL as p_data_buffer1 in
 * case of not using double buffer
 */
void USART_ConfigureTransmitDMA(USART_Handle_t *p_handle_usart,
		uint8_t *p_data_buffer0, uint8_t *p_data_buffer1)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	// enable transmit mode
	p_handle_usart->p_usartx->CR1 |= USART_CR1_TE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0208 	orr.w	r2, r2, #8
 8001872:	60da      	str	r2, [r3, #12]

	// configure double buffer if neccesary
	if (p_data_buffer1 != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <USART_ConfigureTransmitDMA+0x32>
	{
		DMA_EnableDoubleBufferMode(p_handle_usart->usart_dma.p_dma_stream_tx);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f970 	bl	8000b64 <DMA_EnableDoubleBufferMode>
		p_handle_usart->tx_status = kUsartTxDma;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2202      	movs	r2, #2
 8001888:	739a      	strb	r2, [r3, #14]
	}

	// assign peripheral address and mem address to dma registers
	DMA_WriteAdresses(p_handle_usart->usart_dma.p_dma_stream_tx,
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6858      	ldr	r0, [r3, #4]
			(uint32_t*) &(p_handle_usart->p_usartx->DR),
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1d19      	adds	r1, r3, #4
	DMA_WriteAdresses(p_handle_usart->usart_dma.p_dma_stream_tx,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f7ff f974 	bl	8000b84 <DMA_WriteAdresses>
			(uint32_t*) p_data_buffer0, (uint32_t*) p_data_buffer1);

	// configure irq flags
	//USART_EnableIRQs(p_handle_usart, USART_CR1_TCIE, 0, 0);
	p_handle_usart->usart_dma.p_dma_stream_tx->CR |= DMA_SxCR_TCIE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f042 0210 	orr.w	r2, r2, #16
 80018aa:	601a      	str	r2, [r3, #0]

	return;
 80018ac:	bf00      	nop
}
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <USART_TransmitDMAStart>:
/*
 * start DMA channel that transfers from memory to UART DR
 */
void USART_TransmitDMAStart(USART_Handle_t *p_handle_usart,
		uint32_t data_lenght)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
	// should be idle to start new dma
	if (p_handle_usart->tx_status != kUsartTxIdle
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7b9b      	ldrb	r3, [r3, #14]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <USART_TransmitDMAStart+0x22>
			&& p_handle_usart->tx_status != kUsartTxDma)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7b9b      	ldrb	r3, [r3, #14]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d003      	beq.n	80018d6 <USART_TransmitDMAStart+0x22>
	{
		p_handle_usart->error = kUsartErrorTxBusy;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2203      	movs	r2, #3
 80018d2:	731a      	strb	r2, [r3, #12]
		return;
 80018d4:	e01c      	b.n	8001910 <USART_TransmitDMAStart+0x5c>
	}
	// enable dma transfer
	p_handle_usart->p_usartx->CR3 |= USART_CR3_DMAT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e4:	615a      	str	r2, [r3, #20]
	// configure the total number of bytes to be transferred to the DMA
	p_handle_usart->usart_dma.p_dma_stream_tx->NDTR = data_lenght;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	605a      	str	r2, [r3, #4]
	// clear tc bit
	p_handle_usart->p_usartx->SR &= ~(USART_SR_TC);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018fc:	601a      	str	r2, [r3, #0]
	// activate DMA channel transfer
	p_handle_usart->usart_dma.p_dma_stream_tx->CR |= DMA_SxCR_EN;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f042 0201 	orr.w	r2, r2, #1
 800190c:	601a      	str	r2, [r3, #0]

	return;
 800190e:	bf00      	nop
}
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <USART_DMATransmitDoneCallback>:
 * clear dma tx status to idle after finished dma transmission
 * if you would like to send data on uart sometimes by dma
 * and sometimes by polling - put this in DMAx_Irq handler
 */
void USART_DMATransmitDoneCallback(USART_Handle_t *p_handle_usart)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	if (!(p_handle_usart->usart_dma.p_dma_stream_tx->CR & DMA_SxCR_CIRC))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <USART_DMATransmitDoneCallback+0x1e>
	{
		p_handle_usart->tx_status = kUsartTxIdle;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	739a      	strb	r2, [r3, #14]
	}
	return;
 8001936:	bf00      	nop
 8001938:	bf00      	nop
}
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <__libc_init_array>:
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	4d0d      	ldr	r5, [pc, #52]	; (800197c <__libc_init_array+0x38>)
 8001948:	4c0d      	ldr	r4, [pc, #52]	; (8001980 <__libc_init_array+0x3c>)
 800194a:	1b64      	subs	r4, r4, r5
 800194c:	10a4      	asrs	r4, r4, #2
 800194e:	2600      	movs	r6, #0
 8001950:	42a6      	cmp	r6, r4
 8001952:	d109      	bne.n	8001968 <__libc_init_array+0x24>
 8001954:	4d0b      	ldr	r5, [pc, #44]	; (8001984 <__libc_init_array+0x40>)
 8001956:	4c0c      	ldr	r4, [pc, #48]	; (8001988 <__libc_init_array+0x44>)
 8001958:	f000 f866 	bl	8001a28 <_init>
 800195c:	1b64      	subs	r4, r4, r5
 800195e:	10a4      	asrs	r4, r4, #2
 8001960:	2600      	movs	r6, #0
 8001962:	42a6      	cmp	r6, r4
 8001964:	d105      	bne.n	8001972 <__libc_init_array+0x2e>
 8001966:	bd70      	pop	{r4, r5, r6, pc}
 8001968:	f855 3b04 	ldr.w	r3, [r5], #4
 800196c:	4798      	blx	r3
 800196e:	3601      	adds	r6, #1
 8001970:	e7ee      	b.n	8001950 <__libc_init_array+0xc>
 8001972:	f855 3b04 	ldr.w	r3, [r5], #4
 8001976:	4798      	blx	r3
 8001978:	3601      	adds	r6, #1
 800197a:	e7f2      	b.n	8001962 <__libc_init_array+0x1e>
 800197c:	08001a94 	.word	0x08001a94
 8001980:	08001a94 	.word	0x08001a94
 8001984:	08001a94 	.word	0x08001a94
 8001988:	08001a98 	.word	0x08001a98

0800198c <memset>:
 800198c:	4402      	add	r2, r0
 800198e:	4603      	mov	r3, r0
 8001990:	4293      	cmp	r3, r2
 8001992:	d100      	bne.n	8001996 <memset+0xa>
 8001994:	4770      	bx	lr
 8001996:	f803 1b01 	strb.w	r1, [r3], #1
 800199a:	e7f9      	b.n	8001990 <memset+0x4>

0800199c <round>:
 800199c:	ec51 0b10 	vmov	r0, r1, d0
 80019a0:	b570      	push	{r4, r5, r6, lr}
 80019a2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80019a6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80019aa:	2c13      	cmp	r4, #19
 80019ac:	ee10 2a10 	vmov	r2, s0
 80019b0:	460b      	mov	r3, r1
 80019b2:	dc19      	bgt.n	80019e8 <round+0x4c>
 80019b4:	2c00      	cmp	r4, #0
 80019b6:	da09      	bge.n	80019cc <round+0x30>
 80019b8:	3401      	adds	r4, #1
 80019ba:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80019be:	d103      	bne.n	80019c8 <round+0x2c>
 80019c0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80019c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80019c8:	2100      	movs	r1, #0
 80019ca:	e028      	b.n	8001a1e <round+0x82>
 80019cc:	4d15      	ldr	r5, [pc, #84]	; (8001a24 <round+0x88>)
 80019ce:	4125      	asrs	r5, r4
 80019d0:	ea01 0605 	and.w	r6, r1, r5
 80019d4:	4332      	orrs	r2, r6
 80019d6:	d00e      	beq.n	80019f6 <round+0x5a>
 80019d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019dc:	fa42 f404 	asr.w	r4, r2, r4
 80019e0:	4423      	add	r3, r4
 80019e2:	ea23 0305 	bic.w	r3, r3, r5
 80019e6:	e7ef      	b.n	80019c8 <round+0x2c>
 80019e8:	2c33      	cmp	r4, #51	; 0x33
 80019ea:	dd07      	ble.n	80019fc <round+0x60>
 80019ec:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80019f0:	d101      	bne.n	80019f6 <round+0x5a>
 80019f2:	f7fe fbf5 	bl	80001e0 <__adddf3>
 80019f6:	ec41 0b10 	vmov	d0, r0, r1
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
 80019fc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8001a00:	f04f 35ff 	mov.w	r5, #4294967295
 8001a04:	40f5      	lsrs	r5, r6
 8001a06:	4228      	tst	r0, r5
 8001a08:	d0f5      	beq.n	80019f6 <round+0x5a>
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8001a10:	fa01 f404 	lsl.w	r4, r1, r4
 8001a14:	1912      	adds	r2, r2, r4
 8001a16:	bf28      	it	cs
 8001a18:	185b      	addcs	r3, r3, r1
 8001a1a:	ea22 0105 	bic.w	r1, r2, r5
 8001a1e:	4608      	mov	r0, r1
 8001a20:	4619      	mov	r1, r3
 8001a22:	e7e8      	b.n	80019f6 <round+0x5a>
 8001a24:	000fffff 	.word	0x000fffff

08001a28 <_init>:
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	bf00      	nop
 8001a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a2e:	bc08      	pop	{r3}
 8001a30:	469e      	mov	lr, r3
 8001a32:	4770      	bx	lr

08001a34 <_fini>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	bf00      	nop
 8001a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3a:	bc08      	pop	{r3}
 8001a3c:	469e      	mov	lr, r3
 8001a3e:	4770      	bx	lr
