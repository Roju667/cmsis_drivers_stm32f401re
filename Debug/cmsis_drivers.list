
cmsis_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019ec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001b80  08001b88  00011b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001b80  08001b80  00011b88  2**0
                  CONTENTS
  4 .ARM          00000000  08001b80  08001b80  00011b88  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b80  08001b88  00011b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b80  08001b80  00011b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b84  08001b84  00011b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000000  08001b88  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001b88  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011b88  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000569a  00000000  00000000  00011bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000faf  00000000  00000000  00017252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000290  00000000  00000000  00018208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000208  00000000  00000000  00018498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ecef  00000000  00000000  000186a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003a3a  00000000  00000000  0002738f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056741  00000000  00000000  0002adc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008150a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000098c  00000000  00000000  00081560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001b68 	.word	0x08001b68

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08001b68 	.word	0x08001b68

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_d2uiz>:
 800054c:	004a      	lsls	r2, r1, #1
 800054e:	d211      	bcs.n	8000574 <__aeabi_d2uiz+0x28>
 8000550:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000554:	d211      	bcs.n	800057a <__aeabi_d2uiz+0x2e>
 8000556:	d50d      	bpl.n	8000574 <__aeabi_d2uiz+0x28>
 8000558:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800055c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000560:	d40e      	bmi.n	8000580 <__aeabi_d2uiz+0x34>
 8000562:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056e:	fa23 f002 	lsr.w	r0, r3, r2
 8000572:	4770      	bx	lr
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	4770      	bx	lr
 800057a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800057e:	d102      	bne.n	8000586 <__aeabi_d2uiz+0x3a>
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	4770      	bx	lr
 8000586:	f04f 0000 	mov.w	r0, #0
 800058a:	4770      	bx	lr

0800058c <main>:
 ******************************************************************************
 */
// #include "wwdg_example.h"
#include "i2c_bmp180_example.h"
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	i2c_bmp180_example();
 8000590:	f000 fa06 	bl	80009a0 <i2c_bmp180_example>
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <SystemInit+0x20>)
 80005a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <SystemInit+0x20>)
 80005a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005dc:	4c0b      	ldr	r4, [pc, #44]	; (800060c <LoopFillZerobss+0x26>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ea:	f7ff ffd7 	bl	800059c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f001 fa49 	bl	8001a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f2:	f7ff ffcb 	bl	800058c <main>
  bx  lr    
 80005f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000604:	08001b88 	.word	0x08001b88
  ldr r2, =_sbss
 8000608:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800060c:	20000074 	.word	0x20000074

08000610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>

08000612 <bmp180_i2c_read>:



static void bmp180_i2c_read(I2c_Handle_t *p_i2c_handle, uint8_t slave_address,
		uint8_t mem_address, uint8_t *p_rx_data_buffer, uint32_t data_size)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b086      	sub	sp, #24
 8000616:	af02      	add	r7, sp, #8
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	72fb      	strb	r3, [r7, #11]
 8000620:	4613      	mov	r3, r2
 8000622:	72bb      	strb	r3, [r7, #10]
	// transmit address and register
	I2C_Transmit(p_i2c_handle, slave_address, mem_address, 0, 0);
 8000624:	7aba      	ldrb	r2, [r7, #10]
 8000626:	7af9      	ldrb	r1, [r7, #11]
 8000628:	2300      	movs	r3, #0
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	68f8      	ldr	r0, [r7, #12]
 8000630:	f000 fe21 	bl	8001276 <I2C_Transmit>
	// receive
	I2C_Receive(p_i2c_handle, slave_address, p_rx_data_buffer, data_size);
 8000634:	7af9      	ldrb	r1, [r7, #11]
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f000 fe78 	bl	8001330 <I2C_Receive>

	return;
 8000640:	bf00      	nop
}
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <bmp180_i2c_write>:

static void bmp180_i2c_write(I2c_Handle_t *p_i2c_handle, uint8_t slave_address,
		uint8_t mem_address, uint8_t *p_tx_data_buffer, uint32_t data_size)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af02      	add	r7, sp, #8
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	460b      	mov	r3, r1
 8000654:	72fb      	strb	r3, [r7, #11]
 8000656:	4613      	mov	r3, r2
 8000658:	72bb      	strb	r3, [r7, #10]
	// transmit address, register and data
	I2C_Transmit(p_i2c_handle, slave_address, mem_address, p_tx_data_buffer,
 800065a:	7aba      	ldrb	r2, [r7, #10]
 800065c:	7af9      	ldrb	r1, [r7, #11]
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f000 fe06 	bl	8001276 <I2C_Transmit>
			data_size);

	return;
 800066a:	bf00      	nop
}
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <bmp180_delay>:

static void bmp180_delay(uint32_t ms)
{
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < ms; i++)
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e002      	b.n	8000686 <bmp180_delay+0x14>
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d3f8      	bcc.n	8000680 <bmp180_delay+0xe>
	{

	}
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <bmp180_read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t bmp180_read_chip_id(bmp180_t *p_bmp)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	6078      	str	r0, [r7, #4]
	uint8_t out_buff = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73bb      	strb	r3, [r7, #14]
	uint8_t ret_val = NO_ERR;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]

	bmp180_i2c_read(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_CHIP_ID_REG,
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006b0:	f107 030e 	add.w	r3, r7, #14
 80006b4:	2201      	movs	r2, #1
 80006b6:	9200      	str	r2, [sp, #0]
 80006b8:	22d0      	movs	r2, #208	; 0xd0
 80006ba:	21ef      	movs	r1, #239	; 0xef
 80006bc:	f7ff ffa9 	bl	8000612 <bmp180_i2c_read>
			&out_buff,
			1);
			
	if (BMP_CHIP_ID_VAL != out_buff)
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	2b55      	cmp	r3, #85	; 0x55
 80006c4:	d001      	beq.n	80006ca <bmp180_read_chip_id+0x2e>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <bmp180_set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void bmp180_set_oss(bmp180_t *p_bmp, oss_ratio_t ratio)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af02      	add	r7, sp, #8
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80006e0:	2300      	movs	r3, #0
 80006e2:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d81e      	bhi.n	8000728 <bmp180_set_oss+0x54>
 80006ea:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <bmp180_set_oss+0x1c>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	08000715 	.word	0x08000715
 80006fc:	0800071f 	.word	0x0800071f
	{
		case ULTRA_LOW_PWR_MODE:
		{
		p_bmp->oss.wait_time = BMP_OSS0_CONV_TIME;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2205      	movs	r2, #5
 8000704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 8000708:	e013      	b.n	8000732 <bmp180_set_oss+0x5e>
		}
		case STANDARD_MODE:
		{
		p_bmp->oss.wait_time = BMP_OSS1_CONV_TIME;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2208      	movs	r2, #8
 800070e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 8000712:	e00e      	b.n	8000732 <bmp180_set_oss+0x5e>
		}
		case HIGH:
		{
		p_bmp->oss.wait_time = BMP_OSS2_CONV_TIME;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	220e      	movs	r2, #14
 8000718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 800071c:	e009      	b.n	8000732 <bmp180_set_oss+0x5e>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
		p_bmp->oss.wait_time = BMP_OSS3_CONV_TIME;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	221a      	movs	r2, #26
 8000722:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 8000726:	e004      	b.n	8000732 <bmp180_set_oss+0x5e>
		}
		default:
		{
		p_bmp->oss.wait_time = BMP_OSS1_CONV_TIME;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2208      	movs	r2, #8
 800072c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 8000730:	bf00      	nop
		}
	}

	p_bmp->oss.ratio = ratio;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	78fa      	ldrb	r2, [r7, #3]
 8000736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	019b      	lsls	r3, r3, #6
 800073e:	70fb      	strb	r3, [r7, #3]
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	737b      	strb	r3, [r7, #13]
	bmp180_i2c_write(p_bmp->p_i2c_handle, BMP_WRITE_ADDR, BMP_CTRL_REG, in_buff,
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2202      	movs	r2, #2
 800074e:	9200      	str	r2, [sp, #0]
 8000750:	22f4      	movs	r2, #244	; 0xf4
 8000752:	21ee      	movs	r1, #238	; 0xee
 8000754:	f7ff ff78 	bl	8000648 <bmp180_i2c_write>
			2);
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <bmp180_read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t bmp180_read_calib_data(bmp180_t *p_bmp)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af02      	add	r7, sp, #8
 8000766:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8000768:	2300      	movs	r3, #0
 800076a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int16_t *calib_data = (int16_t*) &p_bmp->calib;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	623b      	str	r3, [r7, #32]

	bmp180_i2c_read(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_CALIB_ADDR,
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2216      	movs	r2, #22
 800079c:	9200      	str	r2, [sp, #0]
 800079e:	22aa      	movs	r2, #170	; 0xaa
 80007a0:	21ef      	movs	r1, #239	; 0xef
 80007a2:	f7ff ff36 	bl	8000612 <bmp180_i2c_read>
			out_buff,
			BMP_CALIB_DATA_SIZE);
	
	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80007ac:	e03e      	b.n	800082c <bmp180_read_calib_data+0xcc>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 80007ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007b8:	4413      	add	r3, r2
 80007ba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	b219      	sxth	r1, r3
 80007c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007ca:	4413      	add	r3, r2
 80007cc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	6a38      	ldr	r0, [r7, #32]
 80007da:	4403      	add	r3, r0
 80007dc:	430a      	orrs	r2, r1
 80007de:	b212      	sxth	r2, r2
 80007e0:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80007e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	6a3a      	ldr	r2, [r7, #32]
 80007ea:	4413      	add	r3, r2
 80007ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	6a39      	ldr	r1, [r7, #32]
 8000802:	440b      	add	r3, r1
 8000804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800080c:	bf0c      	ite	eq
 800080e:	2301      	moveq	r3, #1
 8000810:	2300      	movne	r3, #0
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4313      	orrs	r3, r2
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <bmp180_read_calib_data+0xc2>
		{
			ret_val = GET_CALIB_ERR;
 800081c:	2302      	movs	r3, #2
 800081e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8000822:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000826:	3301      	adds	r3, #1
 8000828:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800082c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000830:	2b0b      	cmp	r3, #11
 8000832:	d9bc      	bls.n	80007ae <bmp180_read_calib_data+0x4e>
		}
	}

	return ret_val;
 8000834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000838:	4618      	mov	r0, r3
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <bmp180_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp180_init(bmp180_t *p_bmp, I2c_Handle_t *p_i2c_handle)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]

	memset(p_bmp, 0x00, sizeof(&p_bmp)); // clear bmp strut;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2204      	movs	r2, #4
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f001 f93b 	bl	8001acc <memset>
	p_bmp->p_i2c_handle = p_i2c_handle;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	683a      	ldr	r2, [r7, #0]
 800085a:	63da      	str	r2, [r3, #60]	; 0x3c
	p_bmp->err = bmp180_read_chip_id(p_bmp); // check chip validity and I2C communication.
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	687c      	ldr	r4, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff1b 	bl	800069c <bmp180_read_chip_id>
 8000866:	4603      	mov	r3, r0
 8000868:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	p_bmp->err = bmp180_read_calib_data(p_bmp);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	687c      	ldr	r4, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff75 	bl	8000760 <bmp180_read_calib_data>
 8000876:	4603      	mov	r3, r0
 8000878:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp180_set_oss(p_bmp, HIGH);       // set oversampling settings
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2102      	movs	r1, #2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff27 	bl	80006d4 <bmp180_set_oss>
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}

0800088e <bmp180_get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t bmp180_get_ut(bmp180_t *p_bmp)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af02      	add	r7, sp, #8
 8000894:	6078      	str	r0, [r7, #4]
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8000896:	232e      	movs	r3, #46	; 0x2e
 8000898:	733b      	strb	r3, [r7, #12]
	bmp180_i2c_write(p_bmp->p_i2c_handle, BMP_WRITE_ADDR, BMP_CTRL_REG,
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2201      	movs	r2, #1
 80008a4:	9200      	str	r2, [sp, #0]
 80008a6:	22f4      	movs	r2, #244	; 0xf4
 80008a8:	21ee      	movs	r1, #238	; 0xee
 80008aa:	f7ff fecd 	bl	8000648 <bmp180_i2c_write>
			out_buff,
			1);
	bmp180_delay(BMP_TEMP_CONV_TIME * 10000);
 80008ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80008b2:	f7ff fede 	bl	8000672 <bmp180_delay>
	bmp180_i2c_read(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_DATA_MSB_ADDR,
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2202      	movs	r2, #2
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	22f6      	movs	r2, #246	; 0xf6
 80008c4:	21ef      	movs	r1, #239	; 0xef
 80008c6:	f7ff fea4 	bl	8000612 <bmp180_i2c_read>
			out_buff,
			2);

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80008ca:	7b3b      	ldrb	r3, [r7, #12]
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	7b7a      	ldrb	r2, [r7, #13]
 80008d0:	4313      	orrs	r3, r2
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <bmp180_get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float bmp180_get_temp(bmp180_t *p_bmp)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80008ec:	f04f 0300 	mov.w	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t) p_bmp->uncomp.temp - p_bmp->calib.AC6) * p_bmp->calib.AC5)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80008f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fc:	ee17 2a90 	vmov	r2, s15
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	895b      	ldrh	r3, [r3, #10]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	8912      	ldrh	r2, [r2, #8]
 800090a:	fb02 f303 	mul.w	r3, r2, r3
 800090e:	13db      	asrs	r3, r3, #15
 8000910:	617b      	str	r3, [r7, #20]
			>> 15;
	X2 = (p_bmp->calib.MC << 11) / (X1 + p_bmp->calib.MD);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000918:	02da      	lsls	r2, r3, #11
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000920:	4619      	mov	r1, r3
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	440b      	add	r3, r1
 8000926:	fb92 f3f3 	sdiv	r3, r2, r3
 800092a:	613b      	str	r3, [r7, #16]
	p_bmp->data.B5 = X1 + X2;
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	441a      	add	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((p_bmp->data.B5 + 8) >> 4) * 0.1f;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	3308      	adds	r3, #8
 800093c:	111b      	asrs	r3, r3, #4
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000946:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000994 <bmp180_get_temp+0xb8>
 800094a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800094e:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8000952:	edd7 7a03 	vldr	s15, [r7, #12]
 8000956:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000998 <bmp180_get_temp+0xbc>
 800095a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000962:	d908      	bls.n	8000976 <bmp180_get_temp+0x9a>
 8000964:	edd7 7a03 	vldr	s15, [r7, #12]
 8000968:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800099c <bmp180_get_temp+0xc0>
 800096c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000974:	db03      	blt.n	800097e <bmp180_get_temp+0xa2>
	{
		p_bmp->err = GET_TEMP_ERR;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2203      	movs	r2, #3
 800097a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	ee07 3a90 	vmov	s15, r3
}
 8000984:	eeb0 0a67 	vmov.f32	s0, s15
 8000988:	371c      	adds	r7, #28
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	3dcccccd 	.word	0x3dcccccd
 8000998:	c2200000 	.word	0xc2200000
 800099c:	42aa0000 	.word	0x42aa0000

080009a0 <i2c_bmp180_example>:
USART_Handle_t p_usart2;
I2c_Handle_t p_i2c1;
bmp180_t p_bmp180;

void i2c_bmp180_example(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

	// config peripherals
	GPIOConfig();
 80009a6:	f000 f829 	bl	80009fc <GPIOConfig>
	USART2Config(&p_usart2);
 80009aa:	480f      	ldr	r0, [pc, #60]	; (80009e8 <i2c_bmp180_example+0x48>)
 80009ac:	f000 f83c 	bl	8000a28 <USART2Config>
	I2C1Config(&p_i2c1);
 80009b0:	480e      	ldr	r0, [pc, #56]	; (80009ec <i2c_bmp180_example+0x4c>)
 80009b2:	f000 f863 	bl	8000a7c <I2C1Config>

	bmp180_init(&p_bmp180, &p_i2c1);
 80009b6:	490d      	ldr	r1, [pc, #52]	; (80009ec <i2c_bmp180_example+0x4c>)
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <i2c_bmp180_example+0x50>)
 80009ba:	f7ff ff41 	bl	8000840 <bmp180_init>
	bmp180_get_ut(&p_bmp180);
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <i2c_bmp180_example+0x50>)
 80009c0:	f7ff ff65 	bl	800088e <bmp180_get_ut>
	bmp180_get_temp(&p_bmp180);
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <i2c_bmp180_example+0x50>)
 80009c6:	f7ff ff89 	bl	80008dc <bmp180_get_temp>

	while (1)
	{
		for (uint32_t i = 0; i < 100000; i++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	e002      	b.n	80009d6 <i2c_bmp180_example+0x36>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3301      	adds	r3, #1
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <i2c_bmp180_example+0x54>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d9f8      	bls.n	80009d0 <i2c_bmp180_example+0x30>
		{
		}
		GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009de:	2105      	movs	r1, #5
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <i2c_bmp180_example+0x58>)
 80009e2:	f000 fa47 	bl	8000e74 <GPIO_TogglePin>
		for (uint32_t i = 0; i < 100000; i++)
 80009e6:	e7f0      	b.n	80009ca <i2c_bmp180_example+0x2a>
 80009e8:	2000001c 	.word	0x2000001c
 80009ec:	2000006c 	.word	0x2000006c
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	0001869f 	.word	0x0001869f
 80009f8:	40020000 	.word	0x40020000

080009fc <GPIOConfig>:

/*
 * configure LED on the board
 */
void GPIOConfig(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 8000a02:	2301      	movs	r3, #1
 8000a04:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 8000a06:	2305      	movs	r3, #5
 8000a08:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	72bb      	strb	r3, [r7, #10]
	GPIOx.pGPIOx = GPIOA;
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <GPIOConfig+0x28>)
 8000a10:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f89f 	bl	8000b58 <GPIO_InitPin>

	return;
 8000a1a:	bf00      	nop
}
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40020000 	.word	0x40020000

08000a28 <USART2Config>:
 * - set basic parameters
 * - set baud rate
 * - enable usart irqs
 */
void USART2Config(USART_Handle_t *p_usart2)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	p_usart2->p_usartx = USART2;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <USART2Config+0x48>)
 8000a34:	601a      	str	r2, [r3, #0]
	p_usart2->usart_dma.p_dma_stream_tx = DMA1_Stream6;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <USART2Config+0x4c>)
 8000a3a:	605a      	str	r2, [r3, #4]
	p_usart2->usart_dma.p_dma_stream_rx = DMA1_Stream5;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <USART2Config+0x50>)
 8000a40:	609a      	str	r2, [r3, #8]
	USART_SetBasicParameters(p_usart2, kUsartWordLenght8, kUsartStopBits0,
 8000a42:	2302      	movs	r3, #2
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 ffcb 	bl	80019e4 <USART_SetBasicParameters>
			kUsartNoParity);
	USART_SetBaudRate(p_usart2, 115200, kUsartOversampling16);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f000 ff03 	bl	8001860 <USART_SetBaudRate>
	USART_EnableIRQs(p_usart2, USART_CR1_IDLEIE, 0, USART_CR3_EIE);
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2110      	movs	r1, #16
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 ff8f 	bl	8001984 <USART_EnableIRQs>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004400 	.word	0x40004400
 8000a74:	400260a0 	.word	0x400260a0
 8000a78:	40026088 	.word	0x40026088

08000a7c <I2C1Config>:

void I2C1Config(I2c_Handle_t *p_i2c1)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	p_i2c1->p_i2cx = I2C1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <I2C1Config+0x20>)
 8000a88:	601a      	str	r2, [r3, #0]
	I2C_SetBasicParameters(p_i2c1, kI2cSpeedFastDuty0);
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 fb59 	bl	8001144 <I2C_SetBasicParameters>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40005400 	.word	0x40005400

08000aa0 <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
static void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a24      	ldr	r2, [pc, #144]	; (8000b3c <GPIO_ClockEnable+0x9c>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d106      	bne.n	8000abe <GPIO_ClockEnable+0x1e>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	e035      	b.n	8000b2a <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOB)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a20      	ldr	r2, [pc, #128]	; (8000b44 <GPIO_ClockEnable+0xa4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d106      	bne.n	8000ad4 <GPIO_ClockEnable+0x34>
	{
		RCC_CLOCK_GPIOB_ENABLE();
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	e02a      	b.n	8000b2a <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOC)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <GPIO_ClockEnable+0xa8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d106      	bne.n	8000aea <GPIO_ClockEnable+0x4a>
	{
		RCC_CLOCK_GPIOC_ENABLE();
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	e01f      	b.n	8000b2a <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOD)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <GPIO_ClockEnable+0xac>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d106      	bne.n	8000b00 <GPIO_ClockEnable+0x60>
	{
		RCC_CLOCK_GPIOD_ENABLE();
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	e014      	b.n	8000b2a <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <GPIO_ClockEnable+0xb0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <GPIO_ClockEnable+0x76>
	{
		RCC_CLOCK_GPIOE_ENABLE();
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6313      	str	r3, [r2, #48]	; 0x30
 8000b14:	e009      	b.n	8000b2a <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOH)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <GPIO_ClockEnable+0xb4>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d105      	bne.n	8000b2a <GPIO_ClockEnable+0x8a>
	{
		RCC_CLOCK_GPIOH_ENABLE();
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <GPIO_ClockEnable+0xa0>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2a:	f3bf 8f4f 	dsb	sy
}
 8000b2e:	bf00      	nop
	// this operation is unnecessary here because configuration library is taking
	// more than 2 clock cycles between clock enable and configuring register, i
	// leave it here to remind myself that stmf401x has a limitation that is
	// described in errata point 2.1.6
	__DSB();
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40021c00 	.word	0x40021c00

08000b58 <GPIO_InitPin>:
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base
 * address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	// enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff9b 	bl	8000aa0 <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	795b      	ldrb	r3, [r3, #5]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d81f      	bhi.n	8000bb2 <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	791b      	ldrb	r3, [r3, #4]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	2103      	movs	r1, #3
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4619      	mov	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	400a      	ands	r2, r1
 8000b8e:	601a      	str	r2, [r3, #0]
		hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	795b      	ldrb	r3, [r3, #5]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	791b      	ldrb	r3, [r3, #4]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	e0a9      	b.n	8000d06 <GPIO_InitPin+0x1ae>
	else
	{
		// IRQ mode

		// set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	791b      	ldrb	r3, [r3, #4]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2103      	movs	r1, #3
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	400a      	ands	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
		// interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000bd0:	4b9e      	ldr	r3, [pc, #632]	; (8000e4c <GPIO_InitPin+0x2f4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	7912      	ldrb	r2, [r2, #4]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	2201      	movs	r2, #1
 8000bdc:	408a      	lsls	r2, r1
 8000bde:	4611      	mov	r1, r2
 8000be0:	4a9a      	ldr	r2, [pc, #616]	; (8000e4c <GPIO_InitPin+0x2f4>)
 8000be2:	430b      	orrs	r3, r1
 8000be4:	6013      	str	r3, [r2, #0]

		// rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	795b      	ldrb	r3, [r3, #5]
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d003      	beq.n	8000bf6 <GPIO_InitPin+0x9e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	795b      	ldrb	r3, [r3, #5]
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d10a      	bne.n	8000c0c <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000bf6:	4b95      	ldr	r3, [pc, #596]	; (8000e4c <GPIO_InitPin+0x2f4>)
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	7912      	ldrb	r2, [r2, #4]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	2201      	movs	r2, #1
 8000c02:	408a      	lsls	r2, r1
 8000c04:	4611      	mov	r1, r2
 8000c06:	4a91      	ldr	r2, [pc, #580]	; (8000e4c <GPIO_InitPin+0x2f4>)
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	2b05      	cmp	r3, #5
 8000c12:	d003      	beq.n	8000c1c <GPIO_InitPin+0xc4>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	795b      	ldrb	r3, [r3, #5]
 8000c18:	2b06      	cmp	r3, #6
 8000c1a:	d10a      	bne.n	8000c32 <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000c1c:	4b8b      	ldr	r3, [pc, #556]	; (8000e4c <GPIO_InitPin+0x2f4>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	7912      	ldrb	r2, [r2, #4]
 8000c24:	4611      	mov	r1, r2
 8000c26:	2201      	movs	r2, #1
 8000c28:	408a      	lsls	r2, r1
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4a87      	ldr	r2, [pc, #540]	; (8000e4c <GPIO_InitPin+0x2f4>)
 8000c2e:	430b      	orrs	r3, r1
 8000c30:	6093      	str	r3, [r2, #8]
		}

		// enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	791b      	ldrb	r3, [r3, #4]
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d80c      	bhi.n	8000c54 <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 8000c3a:	4b85      	ldr	r3, [pc, #532]	; (8000e50 <GPIO_InitPin+0x2f8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	7912      	ldrb	r2, [r2, #4]
 8000c42:	3206      	adds	r2, #6
 8000c44:	2101      	movs	r1, #1
 8000c46:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4a80      	ldr	r2, [pc, #512]	; (8000e50 <GPIO_InitPin+0x2f8>)
 8000c4e:	430b      	orrs	r3, r1
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e010      	b.n	8000c76 <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	2b09      	cmp	r3, #9
 8000c5a:	d806      	bhi.n	8000c6a <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 8000c5c:	4b7c      	ldr	r3, [pc, #496]	; (8000e50 <GPIO_InitPin+0x2f8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a7b      	ldr	r2, [pc, #492]	; (8000e50 <GPIO_InitPin+0x2f8>)
 8000c62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	e005      	b.n	8000c76 <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 8000c6a:	4b79      	ldr	r3, [pc, #484]	; (8000e50 <GPIO_InitPin+0x2f8>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	4a78      	ldr	r2, [pc, #480]	; (8000e50 <GPIO_InitPin+0x2f8>)
 8000c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c74:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000c76:	4b77      	ldr	r3, [pc, #476]	; (8000e54 <GPIO_InitPin+0x2fc>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a76      	ldr	r2, [pc, #472]	; (8000e54 <GPIO_InitPin+0x2fc>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a74      	ldr	r2, [pc, #464]	; (8000e58 <GPIO_InitPin+0x300>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d024      	beq.n	8000cd6 <GPIO_InitPin+0x17e>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a72      	ldr	r2, [pc, #456]	; (8000e5c <GPIO_InitPin+0x304>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d01d      	beq.n	8000cd2 <GPIO_InitPin+0x17a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a71      	ldr	r2, [pc, #452]	; (8000e60 <GPIO_InitPin+0x308>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d016      	beq.n	8000cce <GPIO_InitPin+0x176>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a6f      	ldr	r2, [pc, #444]	; (8000e64 <GPIO_InitPin+0x30c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d00f      	beq.n	8000cca <GPIO_InitPin+0x172>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a6e      	ldr	r2, [pc, #440]	; (8000e68 <GPIO_InitPin+0x310>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d008      	beq.n	8000cc6 <GPIO_InitPin+0x16e>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a6c      	ldr	r2, [pc, #432]	; (8000e6c <GPIO_InitPin+0x314>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d101      	bne.n	8000cc2 <GPIO_InitPin+0x16a>
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	e00a      	b.n	8000cd8 <GPIO_InitPin+0x180>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e008      	b.n	8000cd8 <GPIO_InitPin+0x180>
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	e006      	b.n	8000cd8 <GPIO_InitPin+0x180>
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e004      	b.n	8000cd8 <GPIO_InitPin+0x180>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e002      	b.n	8000cd8 <GPIO_InitPin+0x180>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <GPIO_InitPin+0x180>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 8000cda:	4a65      	ldr	r2, [pc, #404]	; (8000e70 <GPIO_InitPin+0x318>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	791b      	ldrb	r3, [r3, #4]
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	b2d8      	uxtb	r0, r3
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	7bf9      	ldrb	r1, [r7, #15]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	7912      	ldrb	r2, [r2, #4]
 8000cf2:	f002 0203 	and.w	r2, r2, #3
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	495c      	ldr	r1, [pc, #368]	; (8000e70 <GPIO_InitPin+0x318>)
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	1c83      	adds	r3, r0, #2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	795b      	ldrb	r3, [r3, #5]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d003      	beq.n	8000d16 <GPIO_InitPin+0x1be>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	795b      	ldrb	r3, [r3, #5]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d13b      	bne.n	8000d8e <GPIO_InitPin+0x236>
	{
		// speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	791b      	ldrb	r3, [r3, #4]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2103      	movs	r1, #3
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	400a      	ands	r2, r1
 8000d32:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	79db      	ldrb	r3, [r3, #7]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	609a      	str	r2, [r3, #8]

		// output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	2301      	movs	r3, #1
 8000d62:	408b      	lsls	r3, r1
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	799b      	ldrb	r3, [r3, #6]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	791b      	ldrb	r3, [r3, #4]
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	605a      	str	r2, [r3, #4]
	}

	// set alternate function bits
	if (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	795b      	ldrb	r3, [r3, #5]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d137      	bne.n	8000e06 <GPIO_InitPin+0x2ae>
	{
		// clear 4 AF bits and set new value
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] &= ~(15UL << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	7912      	ldrb	r2, [r2, #4]
 8000d9e:	08d2      	lsrs	r2, r2, #3
 8000da0:	b2d0      	uxtb	r0, r2
 8000da2:	4602      	mov	r2, r0
 8000da4:	3208      	adds	r2, #8
 8000da6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	791b      	ldrb	r3, [r3, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4011      	ands	r1, r2
 8000dc2:	f100 0208 	add.w	r2, r0, #8
 8000dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] |= (hGPIO->PinConfig.AF << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	7912      	ldrb	r2, [r2, #4]
 8000dd2:	08d2      	lsrs	r2, r2, #3
 8000dd4:	b2d1      	uxtb	r1, r2
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	3208      	adds	r2, #8
 8000dda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7a5b      	ldrb	r3, [r3, #9]
 8000de2:	4618      	mov	r0, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fa00 f303 	lsl.w	r3, r0, r3
 8000df2:	461c      	mov	r4, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4608      	mov	r0, r1
 8000dfa:	ea42 0104 	orr.w	r1, r2, r4
 8000dfe:	f100 0208 	add.w	r2, r0, #8
 8000e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	791b      	ldrb	r3, [r3, #4]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2103      	movs	r1, #3
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	400a      	ands	r2, r1
 8000e22:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7a1b      	ldrb	r3, [r3, #8]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	60da      	str	r2, [r3, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}
 8000e4c:	40013c00 	.word	0x40013c00
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40021c00 	.word	0x40021c00
 8000e70:	40013800 	.word	0x40013800

08000e74 <GPIO_TogglePin>:
 * @param[*GPIO] - base address of gpiox peripheral
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *GPIO, uint8_t PinNumber)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
	GPIO->ODR ^= 0b1 << PinNumber;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	78fa      	ldrb	r2, [r7, #3]
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	405a      	eors	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	615a      	str	r2, [r3, #20]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <I2C_ClockEnable>:
 *
 * @param[*p_i2cx] - base address of i2c peripheral
 * @return - void
 */
static void I2C_ClockEnable(I2C_TypeDef *p_i2cx)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	if (p_i2cx == I2C1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <I2C_ClockEnable+0x54>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d106      	bne.n	8000ebe <I2C_ClockEnable+0x1e>
	{
		RCC_CLOCK_I2C1_ENABLE();
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <I2C_ClockEnable+0x58>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <I2C_ClockEnable+0x58>)
 8000eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (p_i2cx == I2C3)
	{
		RCC_CLOCK_I2C3_ENABLE();
	}
}
 8000ebc:	e014      	b.n	8000ee8 <I2C_ClockEnable+0x48>
	else if (p_i2cx == I2C2)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <I2C_ClockEnable+0x5c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d106      	bne.n	8000ed4 <I2C_ClockEnable+0x34>
		RCC_CLOCK_I2C2_ENABLE();
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <I2C_ClockEnable+0x58>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <I2C_ClockEnable+0x58>)
 8000ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ed2:	e009      	b.n	8000ee8 <I2C_ClockEnable+0x48>
	else if (p_i2cx == I2C3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <I2C_ClockEnable+0x60>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d105      	bne.n	8000ee8 <I2C_ClockEnable+0x48>
		RCC_CLOCK_I2C3_ENABLE();
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <I2C_ClockEnable+0x58>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <I2C_ClockEnable+0x58>)
 8000ee2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40005800 	.word	0x40005800
 8000f00:	40005c00 	.word	0x40005c00

08000f04 <I2C_InitGpioPins>:
 * @param[*p_i2cx] - i2c address
 * @param[alternate_pos] - pins alternative positions select
 * @return - void
 */
static void I2C_InitGpioPins(I2C_TypeDef *p_i2cx, uint8_t alternate_pos)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t gpio_sda, gpio_scl;

	if (p_i2cx == I2C1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a35      	ldr	r2, [pc, #212]	; (8000fe8 <I2C_InitGpioPins+0xe4>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d112      	bne.n	8000f3e <I2C_InitGpioPins+0x3a>
	{
		// PB6 SCL
		gpio_scl.pGPIOx = GPIOB;
 8000f18:	4b34      	ldr	r3, [pc, #208]	; (8000fec <I2C_InitGpioPins+0xe8>)
 8000f1a:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_6;
 8000f1c:	2306      	movs	r3, #6
 8000f1e:	733b      	strb	r3, [r7, #12]

		// PB7 SDA
		gpio_sda.pGPIOx = GPIOB;
 8000f20:	4b32      	ldr	r3, [pc, #200]	; (8000fec <I2C_InitGpioPins+0xe8>)
 8000f22:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_7;
 8000f24:	2307      	movs	r3, #7
 8000f26:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d103      	bne.n	8000f3e <I2C_InitGpioPins+0x3a>
		{
			// PB8 SCL
			gpio_scl.PinConfig.PinNumber = GPIO_PIN_8;
 8000f36:	2308      	movs	r3, #8
 8000f38:	733b      	strb	r3, [r7, #12]
			// PB9 SDA
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_9;
 8000f3a:	2309      	movs	r3, #9
 8000f3c:	763b      	strb	r3, [r7, #24]
		}
	}

	if (p_i2cx == I2C2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <I2C_InitGpioPins+0xec>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d112      	bne.n	8000f6c <I2C_InitGpioPins+0x68>
	{
		// PB10 SCL
		gpio_scl.pGPIOx = GPIOB;
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <I2C_InitGpioPins+0xe8>)
 8000f48:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_10;
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	733b      	strb	r3, [r7, #12]

		// PB11 SDA
		gpio_sda.pGPIOx = GPIOB;
 8000f4e:	4b27      	ldr	r3, [pc, #156]	; (8000fec <I2C_InitGpioPins+0xe8>)
 8000f50:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_11;
 8000f52:	230b      	movs	r3, #11
 8000f54:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 8000f56:	2304      	movs	r3, #4
 8000f58:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d103      	bne.n	8000f6c <I2C_InitGpioPins+0x68>
		{
			// PB3 SDA
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_3;
 8000f64:	2303      	movs	r3, #3
 8000f66:	763b      	strb	r3, [r7, #24]
			gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF9;
 8000f68:	2309      	movs	r3, #9
 8000f6a:	777b      	strb	r3, [r7, #29]
		}
	}

	if (p_i2cx == I2C3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <I2C_InitGpioPins+0xf0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d11a      	bne.n	8000faa <I2C_InitGpioPins+0xa6>
	{
		// PA8 SCL
		gpio_scl.pGPIOx = GPIOA;
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <I2C_InitGpioPins+0xf4>)
 8000f76:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_8;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	733b      	strb	r3, [r7, #12]

		// PB9 SDA
		gpio_sda.pGPIOx = GPIOB;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <I2C_InitGpioPins+0xe8>)
 8000f7e:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_4;
 8000f80:	2304      	movs	r3, #4
 8000f82:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 8000f84:	2304      	movs	r3, #4
 8000f86:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10b      	bne.n	8000faa <I2C_InitGpioPins+0xa6>
		{
			RCC_CLOCK_GPIOC_ENABLE();
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <I2C_InitGpioPins+0xf8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <I2C_InitGpioPins+0xf8>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
			// PC9 SDA
			gpio_sda.pGPIOx = GPIOC;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <I2C_InitGpioPins+0xfc>)
 8000fa0:	617b      	str	r3, [r7, #20]
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_9;
 8000fa2:	2309      	movs	r3, #9
 8000fa4:	763b      	strb	r3, [r7, #24]

			// Alternate Function
			gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF9;
 8000fa6:	2309      	movs	r3, #9
 8000fa8:	777b      	strb	r3, [r7, #29]
		}
	}

	// Mode AF
	gpio_scl.PinConfig.Mode = GPIO_PIN_MODE_AF;
 8000faa:	2302      	movs	r3, #2
 8000fac:	737b      	strb	r3, [r7, #13]
	gpio_sda.PinConfig.Mode = GPIO_PIN_MODE_AF;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	767b      	strb	r3, [r7, #25]

	// Output type open drain
	gpio_scl.PinConfig.OutputType = GPIO_PIN_OT_OD;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
	gpio_sda.PinConfig.OutputType = GPIO_PIN_OT_OD;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	76bb      	strb	r3, [r7, #26]

	// Output speed very high
	gpio_scl.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	73fb      	strb	r3, [r7, #15]
	gpio_sda.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	76fb      	strb	r3, [r7, #27]

	// Pull ups
	gpio_scl.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	743b      	strb	r3, [r7, #16]
	gpio_sda.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	773b      	strb	r3, [r7, #28]

	GPIO_InitPin(&gpio_sda);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fdc2 	bl	8000b58 <GPIO_InitPin>
	GPIO_InitPin(&gpio_scl);
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fdbd 	bl	8000b58 <GPIO_InitPin>
}
 8000fde:	bf00      	nop
 8000fe0:	3720      	adds	r7, #32
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	40005800 	.word	0x40005800
 8000ff4:	40005c00 	.word	0x40005c00
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020800 	.word	0x40020800

08001004 <I2C_CalculateCCRandTRISE>:
 * @param[speed] - i2c desired speed
 * @return - void
 */
static void I2C_CalculateCCRandTRISE(I2c_Handle_t *p_handle_i2c,
		I2cSpeed_t speed)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
	// set speed
	uint16_t temp_ccr, temp_trise;
	uint8_t pclk_freq_Mhz = RCC_GetPclk(1) / 1000000;
 8001010:	2001      	movs	r0, #1
 8001012:	f000 fb49 	bl	80016a8 <RCC_GetPclk>
 8001016:	4603      	mov	r3, r0
 8001018:	4a48      	ldr	r2, [pc, #288]	; (800113c <I2C_CalculateCCRandTRISE+0x138>)
 800101a:	fba2 2303 	umull	r2, r3, r2, r3
 800101e:	0c9b      	lsrs	r3, r3, #18
 8001020:	72fb      	strb	r3, [r7, #11]

	// set slow mode, reset DUTY
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_FS);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	69da      	ldr	r2, [r3, #28]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001030:	61da      	str	r2, [r3, #28]
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_DUTY);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	69da      	ldr	r2, [r3, #28]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001040:	61da      	str	r2, [r3, #28]

	// CCR calculation for slow mode -> values are coming from RM CCR register and
	// result is in [ns] (Thigh + Tlow) / (CEOFF * PCLK)
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW)
			/ (I2C_CCR_SM_COEFF * (1000 / pclk_freq_Mhz));
 8001042:	7afb      	ldrb	r3, [r7, #11]
 8001044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001048:	fb92 f3f3 	sdiv	r3, r2, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW)
 8001056:	81fb      	strh	r3, [r7, #14]

	// TRISE calculation for slow mode -> equation is from RM
	temp_trise = ((I2C_CCR_SM_TR_SCL * pclk_freq_Mhz) / 1000) + 1;
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	4a37      	ldr	r2, [pc, #220]	; (8001140 <I2C_CalculateCCRandTRISE+0x13c>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	099b      	lsrs	r3, r3, #6
 800106a:	b29b      	uxth	r3, r3
 800106c:	3301      	adds	r3, #1
 800106e:	81bb      	strh	r3, [r7, #12]

	// fast mode
	if (speed != kI2cSpeedSlow)
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d03c      	beq.n	80010f0 <I2C_CalculateCCRandTRISE+0xec>
	{
		// set fast mode
		p_handle_i2c->p_i2cx->CCR |= I2C_CCR_FS;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	69da      	ldr	r2, [r3, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001084:	61da      	str	r2, [r3, #28]
		// calculate CCR for fast mode with DUTY 0
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
				/ (I2C_CCR_FM_COEFF_DUTY0 * (1000 / pclk_freq_Mhz));
 8001086:	7afb      	ldrb	r3, [r7, #11]
 8001088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800108c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001090:	461a      	mov	r2, r3
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800109c:	fbb2 f3f3 	udiv	r3, r2, r3
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
 80010a0:	81fb      	strh	r3, [r7, #14]
		// calculate TRISE for fast mode
		temp_trise = ((I2C_CCR_FM_TR_SCL * pclk_freq_Mhz) / 1000) + 1;
 80010a2:	7afb      	ldrb	r3, [r7, #11]
 80010a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	4a24      	ldr	r2, [pc, #144]	; (8001140 <I2C_CalculateCCRandTRISE+0x13c>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	099b      	lsrs	r3, r3, #6
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	3301      	adds	r3, #1
 80010b8:	81bb      	strh	r3, [r7, #12]
		if (speed == kI2cSpeedFastDuty1)
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d117      	bne.n	80010f0 <I2C_CalculateCCRandTRISE+0xec>
		{
			// set DUTY flag
			p_handle_i2c->p_i2cx->CCR |= I2C_CCR_DUTY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	69da      	ldr	r2, [r3, #28]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010ce:	61da      	str	r2, [r3, #28]
			// calculate CCR with fast mode DUTY1
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
					/ (I2C_CCR_FM_COEFF_DUTY1 * (1000 / pclk_freq_Mhz));
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	009a      	lsls	r2, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
 80010ee:	81fb      	strh	r3, [r7, #14]
		}
	}
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_CCR);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80010fe:	f023 030f 	bic.w	r3, r3, #15
 8001102:	61d3      	str	r3, [r2, #28]
	p_handle_i2c->p_i2cx->CCR |= (temp_ccr << I2C_CCR_CCR_Pos);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69d9      	ldr	r1, [r3, #28]
 800110a:	89fa      	ldrh	r2, [r7, #14]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	61da      	str	r2, [r3, #28]

	// write correct TRISE to the register
	p_handle_i2c->p_i2cx->TRISE &= ~(I2C_TRISE_TRISE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a1a      	ldr	r2, [r3, #32]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001122:	621a      	str	r2, [r3, #32]
	p_handle_i2c->p_i2cx->TRISE |= (temp_trise << I2C_TRISE_TRISE_Pos);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a19      	ldr	r1, [r3, #32]
 800112a:	89ba      	ldrh	r2, [r7, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	621a      	str	r2, [r3, #32]

	return;
 8001134:	bf00      	nop
}
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	431bde83 	.word	0x431bde83
 8001140:	10624dd3 	.word	0x10624dd3

08001144 <I2C_SetBasicParameters>:
 * @param[*p_handle_i2c] - handler to i2c structure
 * @param[speed] - i2c desired speed
 * @return - void
 */
void I2C_SetBasicParameters(I2c_Handle_t *p_handle_i2c, I2cSpeed_t speed)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
	// enable peripheral clock
	I2C_ClockEnable(p_handle_i2c->p_i2cx);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fea3 	bl	8000ea0 <I2C_ClockEnable>

	// init GPIO pins
	I2C_InitGpioPins(p_handle_i2c->p_i2cx, 1);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2101      	movs	r1, #1
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fecf 	bl	8000f04 <I2C_InitGpioPins>

	// reset I2C
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_SWRST;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001174:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_SWRST);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001184:	601a      	str	r2, [r3, #0]

	// check frequency limits
	if (RCC_GetPclk(1) < I2C_FREQUENCY_MINIMUM
 8001186:	2001      	movs	r0, #1
 8001188:	f000 fa8e 	bl	80016a8 <RCC_GetPclk>
 800118c:	4603      	mov	r3, r0
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <I2C_SetBasicParameters+0xbc>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d906      	bls.n	80011a2 <I2C_SetBasicParameters+0x5e>
			|| RCC_GetPclk(1) > I2C_FREQUENCY_MAXIMUM)
 8001194:	2001      	movs	r0, #1
 8001196:	f000 fa87 	bl	80016a8 <RCC_GetPclk>
 800119a:	4603      	mov	r3, r0
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <I2C_SetBasicParameters+0xc0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d903      	bls.n	80011aa <I2C_SetBasicParameters+0x66>
	{
		p_handle_i2c->error = kI2cErrWrongPclkFreq;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	711a      	strb	r2, [r3, #4]
		return;
 80011a8:	e027      	b.n	80011fa <I2C_SetBasicParameters+0xb6>
	}

	// set frequency (same as ABP1 frequency)
	p_handle_i2c->p_i2cx->CR2 &= ~(I2C_CR2_FREQ);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80011b8:	605a      	str	r2, [r3, #4]
	p_handle_i2c->p_i2cx->CR2 |=
			((RCC_GetPclk(1) / 1000000) << I2C_CR2_FREQ_Pos);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 fa74 	bl	80016a8 <RCC_GetPclk>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <I2C_SetBasicParameters+0xc4>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	0c99      	lsrs	r1, r3, #18
	p_handle_i2c->p_i2cx->CR2 |=
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	605a      	str	r2, [r3, #4]

	I2C_CalculateCCRandTRISE(p_handle_i2c, speed);
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	4619      	mov	r1, r3
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff11 	bl	8001004 <I2C_CalculateCCRandTRISE>

	// enable I2c
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_PE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0201 	orr.w	r2, r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

	p_handle_i2c->error = kI2cErrNoError;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	711a      	strb	r2, [r3, #4]
	return;
 80011f8:	bf00      	nop
}
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	001e847f 	.word	0x001e847f
 8001204:	02faf080 	.word	0x02faf080
 8001208:	431bde83 	.word	0x431bde83

0800120c <I2C_SendAddress>:
 * @Mode
 * @return - void
 */
static void I2C_SendAddress(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t mode)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
 8001218:	4613      	mov	r3, r2
 800121a:	70bb      	strb	r3, [r7, #2]
	uint8_t temp_byte;
	// 1.0 Set START BIT
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800122a:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_START;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800123a:	601a      	str	r2, [r3, #0]

	// 1.1 Wait until SB flag is set
	while (!(I2C_SR1_SB & p_handle_i2c->p_i2cx->SR1))
 800123c:	bf00      	nop
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
			break;;
	// 1.2 Clear SB by reading SR1
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	73fb      	strb	r3, [r7, #15]
	// If transmitting set slave addres LSB to 0, receiver 1
	slave_address &= (~1U);
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	70fb      	strb	r3, [r7, #3]
	slave_address |= mode;
 800125a:	78fa      	ldrb	r2, [r7, #3]
 800125c:	78bb      	ldrb	r3, [r7, #2]
 800125e:	4313      	orrs	r3, r2
 8001260:	70fb      	strb	r3, [r7, #3]
	// 2. Put slave address in DR register -
	p_handle_i2c->p_i2cx->DR = slave_address;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	78fa      	ldrb	r2, [r7, #3]
 8001268:	611a      	str	r2, [r3, #16]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <I2C_Transmit>:
 * @param[data_size] - amount of data to be send [in bytes]
 * @return - uint8_t - to return error
 */
uint8_t I2C_Transmit(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t mem_address, uint8_t *p_tx_data_buffer, uint32_t data_size)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	72fb      	strb	r3, [r7, #11]
 8001284:	4613      	mov	r3, r2
 8001286:	72bb      	strb	r3, [r7, #10]
	uint32_t tx_data_to_send = data_size;
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	617b      	str	r3, [r7, #20]
	uint8_t temp_byte;

	I2C_SendAddress(p_handle_i2c, slave_address, I2C_MODE_TRANSMITTER);
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff ffba 	bl	800120c <I2C_SendAddress>

	// wait until ADDR is set
	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 8001298:	bf00      	nop
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f8      	beq.n	800129a <I2C_Transmit+0x24>
		;
	// 4. ADDR is cleared by reading SR1 , Read SR2
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	74fb      	strb	r3, [r7, #19]
	temp_byte = p_handle_i2c->p_i2cx->SR2;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	74fb      	strb	r3, [r7, #19]

	// 5. TxE bit is set when acknowledge bit is sent
	while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 80012b8:	bf00      	nop
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f8      	beq.n	80012ba <I2C_Transmit+0x44>
		;
	// 6. Write memory address to DR to clear TxE
	p_handle_i2c->p_i2cx->DR = mem_address;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	7aba      	ldrb	r2, [r7, #10]
 80012ce:	611a      	str	r2, [r3, #16]

	// 7. Data transfer
	while (tx_data_to_send > 0)
 80012d0:	e026      	b.n	8001320 <I2C_Transmit+0xaa>
	{
		// wait until data register is empty
		while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 80012d2:	bf00      	nop
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f8      	beq.n	80012d4 <I2C_Transmit+0x5e>
			;

		// put data in data register
		p_handle_i2c->p_i2cx->DR =
				p_tx_data_buffer[data_size - tx_data_to_send];
 80012e2:	6a3a      	ldr	r2, [r7, #32]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	781a      	ldrb	r2, [r3, #0]
		p_handle_i2c->p_i2cx->DR =
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	611a      	str	r2, [r3, #16]

		// change counters
		tx_data_to_send--;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]

		// 8. After last bit is written to DR register , Set STOP bit  and interface
		// is going back to slave mode
		if (tx_data_to_send == 0)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10f      	bne.n	8001320 <I2C_Transmit+0xaa>
		{
			// check if data transfer is finsihed
			while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_BTF))
 8001300:	bf00      	nop
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f8      	beq.n	8001302 <I2C_Transmit+0x8c>
				;
			// stop transfer
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800131e:	601a      	str	r2, [r3, #0]
	while (tx_data_to_send > 0)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1d5      	bne.n	80012d2 <I2C_Transmit+0x5c>
		}
	}

	return 0;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <I2C_Receive>:

uint8_t I2C_Receive(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t *p_rx_data_buffer, uint32_t data_size)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	460b      	mov	r3, r1
 800133e:	72fb      	strb	r3, [r7, #11]
	uint32_t rx_data_to_get = data_size;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	617b      	str	r3, [r7, #20]
	uint8_t temp_byte;
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001352:	601a      	str	r2, [r3, #0]
	I2C_SendAddress(p_handle_i2c, slave_address, I2C_MODE_RECEIVER);
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f7ff ff56 	bl	800120c <I2C_SendAddress>

	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 8001360:	bf00      	nop
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f8      	beq.n	8001362 <I2C_Receive+0x32>
		;

	// single byte receive
	if (data_size == 1)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	f040 808f 	bne.w	8001496 <I2C_Receive+0x166>
	{
		// Disable acknowledge
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001386:	601a      	str	r2, [r3, #0]
		// 4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	74fb      	strb	r3, [r7, #19]

		// stop comm
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a6:	601a      	str	r2, [r3, #0]

		// wait for a byte received
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 80013a8:	bf00      	nop
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f8      	beq.n	80013aa <I2C_Receive+0x7a>
			;

		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6919      	ldr	r1, [r3, #16]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	b2ca      	uxtb	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]

		return 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e066      	b.n	800149e <I2C_Receive+0x16e>

	// multiple bytes receive
	while (rx_data_to_get > 2)
	{
		// 4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	74fb      	strb	r3, [r7, #19]

		// read all the bytes until second last
		while (rx_data_to_get > 2)
 80013e0:	e01c      	b.n	800141c <I2C_Receive+0xec>
		{
			while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 80013e2:	bf00      	nop
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f8      	beq.n	80013e4 <I2C_Receive+0xb4>
				;
			p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6919      	ldr	r1, [r3, #16]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	b2ca      	uxtb	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]
			rx_data_to_get--;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3b01      	subs	r3, #1
 800140a:	617b      	str	r3, [r7, #20]

			// ack receive
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800141a:	601a      	str	r2, [r3, #0]
		while (rx_data_to_get > 2)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d8df      	bhi.n	80013e2 <I2C_Receive+0xb2>
		}

		// read second last byte
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 8001422:	bf00      	nop
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f8      	beq.n	8001424 <I2C_Receive+0xf4>
			;
		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6919      	ldr	r1, [r3, #16]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3b01      	subs	r3, #1
 800144a:	617b      	str	r3, [r7, #20]

		// after second last byte clear ACK and set stop
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800145a:	601a      	str	r2, [r3, #0]
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800146a:	601a      	str	r2, [r3, #0]

		// receive last byte
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 800146c:	bf00      	nop
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f8      	beq.n	800146e <I2C_Receive+0x13e>
			;
		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6919      	ldr	r1, [r3, #16]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	b2ca      	uxtb	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3b01      	subs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
	while (rx_data_to_get > 2)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d899      	bhi.n	80013d0 <I2C_Receive+0xa0>
	}
	return 0;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <RCC_CalculatePllclk>:

	return 0;
}

static uint32_t RCC_CalculatePllclk(uint32_t source)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <RCC_CalculatePllclk+0x5c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ba:	81fb      	strh	r3, [r7, #14]
	;
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <RCC_CalculatePllclk+0x5c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014c8:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <RCC_CalculatePllclk+0x5c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	0c1b      	lsrs	r3, r3, #16
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	817b      	strh	r3, [r7, #10]
	;

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 80014d8:	897b      	ldrh	r3, [r7, #10]
 80014da:	3301      	adds	r3, #1
 80014dc:	b29b      	uxth	r3, r3
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 80014e2:	89fb      	ldrh	r3, [r7, #14]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	89ba      	ldrh	r2, [r7, #12]
 80014ec:	fb02 f203 	mul.w	r2, r2, r3
 80014f0:	897b      	ldrh	r3, [r7, #10]
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b07      	cmp	r3, #7
 8001516:	d822      	bhi.n	800155e <RCC_GetApbPrescaler+0x56>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <RCC_GetApbPrescaler+0x18>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001541 	.word	0x08001541
 8001524:	0800155f 	.word	0x0800155f
 8001528:	0800155f 	.word	0x0800155f
 800152c:	0800155f 	.word	0x0800155f
 8001530:	08001547 	.word	0x08001547
 8001534:	0800154d 	.word	0x0800154d
 8001538:	08001553 	.word	0x08001553
 800153c:	08001559 	.word	0x08001559
	{
	case (RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
		break;
 8001544:	e00b      	b.n	800155e <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 8001546:	2302      	movs	r3, #2
 8001548:	60fb      	str	r3, [r7, #12]
		break;
 800154a:	e008      	b.n	800155e <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 800154c:	2304      	movs	r3, #4
 800154e:	60fb      	str	r3, [r7, #12]
		break;
 8001550:	e005      	b.n	800155e <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 8001552:	2308      	movs	r3, #8
 8001554:	60fb      	str	r3, [r7, #12]
		break;
 8001556:	e002      	b.n	800155e <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 8001558:	2310      	movs	r3, #16
 800155a:	60fb      	str	r3, [r7, #12]
		break;
 800155c:	bf00      	nop
	}

	return apb_prescaler;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	b29b      	uxth	r3, r3
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop

08001570 <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d840      	bhi.n	8001602 <RCC_GetAhbPrescaler+0x92>
 8001580:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <RCC_GetAhbPrescaler+0x18>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	080015c9 	.word	0x080015c9
 800158c:	08001603 	.word	0x08001603
 8001590:	08001603 	.word	0x08001603
 8001594:	08001603 	.word	0x08001603
 8001598:	08001603 	.word	0x08001603
 800159c:	08001603 	.word	0x08001603
 80015a0:	08001603 	.word	0x08001603
 80015a4:	08001603 	.word	0x08001603
 80015a8:	080015cf 	.word	0x080015cf
 80015ac:	080015d5 	.word	0x080015d5
 80015b0:	080015db 	.word	0x080015db
 80015b4:	080015e1 	.word	0x080015e1
 80015b8:	080015e7 	.word	0x080015e7
 80015bc:	080015ed 	.word	0x080015ed
 80015c0:	080015f3 	.word	0x080015f3
 80015c4:	080015fb 	.word	0x080015fb
	{
	case (RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
		break;
 80015cc:	e019      	b.n	8001602 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	60fb      	str	r3, [r7, #12]
		break;
 80015d2:	e016      	b.n	8001602 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 80015d4:	2304      	movs	r3, #4
 80015d6:	60fb      	str	r3, [r7, #12]
		break;
 80015d8:	e013      	b.n	8001602 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 80015da:	2308      	movs	r3, #8
 80015dc:	60fb      	str	r3, [r7, #12]
		break;
 80015de:	e010      	b.n	8001602 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 80015e0:	2310      	movs	r3, #16
 80015e2:	60fb      	str	r3, [r7, #12]
		break;
 80015e4:	e00d      	b.n	8001602 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 80015e6:	2340      	movs	r3, #64	; 0x40
 80015e8:	60fb      	str	r3, [r7, #12]
		break;
 80015ea:	e00a      	b.n	8001602 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	60fb      	str	r3, [r7, #12]
		break;
 80015f0:	e007      	b.n	8001602 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 80015f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f6:	60fb      	str	r3, [r7, #12]
		break;
 80015f8:	e003      	b.n	8001602 <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 80015fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015fe:	60fb      	str	r3, [r7, #12]
		break;
 8001600:	bf00      	nop
	}

	return ahb_prescaler;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	b29b      	uxth	r3, r3
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop

08001614 <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <RCC_GetSysclk+0x54>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b08      	cmp	r3, #8
 8001622:	d00a      	beq.n	800163a <RCC_GetSysclk+0x26>
 8001624:	2b08      	cmp	r3, #8
 8001626:	d81c      	bhi.n	8001662 <RCC_GetSysclk+0x4e>
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <RCC_GetSysclk+0x1e>
 800162c:	2b04      	cmp	r3, #4
 800162e:	d002      	beq.n	8001636 <RCC_GetSysclk+0x22>
 8001630:	e017      	b.n	8001662 <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <RCC_GetSysclk+0x58>)
 8001634:	e016      	b.n	8001664 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 8001636:	2300      	movs	r3, #0
 8001638:	e014      	b.n	8001664 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <RCC_GetSysclk+0x54>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <RCC_GetSysclk+0x3a>
 8001646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800164a:	d005      	beq.n	8001658 <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 800164c:	e009      	b.n	8001662 <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 800164e:	4807      	ldr	r0, [pc, #28]	; (800166c <RCC_GetSysclk+0x58>)
 8001650:	f7ff ff2a 	bl	80014a8 <RCC_CalculatePllclk>
 8001654:	4603      	mov	r3, r0
 8001656:	e005      	b.n	8001664 <RCC_GetSysclk+0x50>
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff ff25 	bl	80014a8 <RCC_CalculatePllclk>
 800165e:	4603      	mov	r3, r0
 8001660:	e000      	b.n	8001664 <RCC_GetSysclk+0x50>
	}

	return 0;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800
 800166c:	00f42400 	.word	0x00f42400

08001670 <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 8001676:	f7ff ffcd 	bl	8001614 <RCC_GetSysclk>
 800167a:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <RCC_GetHclk+0x34>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	b2db      	uxtb	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff70 	bl	8001570 <RCC_GetAhbPrescaler>
 8001690:	4603      	mov	r3, r0
 8001692:	807b      	strh	r3, [r7, #2]
	return sysclk / ahb_prescaler;
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800

080016a8 <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 80016b2:	f7ff ffdd 	bl	8001670 <RCC_GetHclk>
 80016b6:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch (plck_x)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d002      	beq.n	80016c4 <RCC_GetPclk+0x1c>
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d00d      	beq.n	80016de <RCC_GetPclk+0x36>
 80016c2:	e019      	b.n	80016f8 <RCC_GetPclk+0x50>
	{
	case (1):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >>
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <RCC_GetPclk+0x60>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	0a9b      	lsrs	r3, r3, #10
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff18 	bl	8001508 <RCC_GetApbPrescaler>
 80016d8:	4603      	mov	r3, r0
 80016da:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE1_Pos);
		break;
 80016dc:	e00c      	b.n	80016f8 <RCC_GetPclk+0x50>

	case (2):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >>
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <RCC_GetPclk+0x60>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	0b5b      	lsrs	r3, r3, #13
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff0b 	bl	8001508 <RCC_GetApbPrescaler>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE2_Pos);
		break;
 80016f6:	bf00      	nop
	}

	return hclk / apb_prescaler;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800

0800170c <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs *freqs)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	freqs->sysclk = RCC_GetSysclk();
 8001714:	f7ff ff7e 	bl	8001614 <RCC_GetSysclk>
 8001718:	4602      	mov	r2, r0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 800171e:	f7ff ffa7 	bl	8001670 <RCC_GetHclk>
 8001722:	4602      	mov	r2, r0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff ffbd 	bl	80016a8 <RCC_GetPclk>
 800172e:	4602      	mov	r2, r0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 8001734:	2002      	movs	r0, #2
 8001736:	f7ff ffb7 	bl	80016a8 <RCC_GetPclk>
 800173a:	4602      	mov	r2, r0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60da      	str	r2, [r3, #12]

	return;
 8001740:	bf00      	nop
}
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <USART_ClockEnable>:
// ******** INIT FUNCTIONS ******** //
/*
 * enable RCC Clock
 */
static void USART_ClockEnable(USART_Handle_t *p_handle_usart)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	if (p_handle_usart->p_usartx == USART1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <USART_ClockEnable+0x5c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d106      	bne.n	80017a4 <USART_ClockEnable+0x20>
	{
		RCC_CLOCK_USART1_ENABLE();
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <USART_ClockEnable+0x60>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <USART_ClockEnable+0x60>)
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else if (p_handle_usart->p_usartx == USART6)
	{
		RCC_CLOCK_USART6_ENABLE();
	}
}
 80017a2:	e016      	b.n	80017d2 <USART_ClockEnable+0x4e>
	else if (p_handle_usart->p_usartx == USART2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <USART_ClockEnable+0x64>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d106      	bne.n	80017bc <USART_ClockEnable+0x38>
		RCC_CLOCK_USART2_ENABLE();
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <USART_ClockEnable+0x60>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <USART_ClockEnable+0x60>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80017ba:	e00a      	b.n	80017d2 <USART_ClockEnable+0x4e>
	else if (p_handle_usart->p_usartx == USART6)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <USART_ClockEnable+0x68>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d105      	bne.n	80017d2 <USART_ClockEnable+0x4e>
		RCC_CLOCK_USART6_ENABLE();
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <USART_ClockEnable+0x60>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <USART_ClockEnable+0x60>)
 80017cc:	f043 0320 	orr.w	r3, r3, #32
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40011000 	.word	0x40011000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40004400 	.word	0x40004400
 80017ec:	40011400 	.word	0x40011400

080017f0 <USART_InitGpioPins>:

/*
 * init gpio pins
 */
static void USART_InitGpioPins(USART_Handle_t *p_handle_usart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	GPIO_Handle_t gpio_rx, gpio_tx;

	if (p_handle_usart->p_usartx == USART2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <USART_InitGpioPins+0x68>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d10b      	bne.n	800181a <USART_InitGpioPins+0x2a>
	{
		// PB6 RX
		gpio_rx.pGPIOx = GPIOA;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <USART_InitGpioPins+0x6c>)
 8001804:	617b      	str	r3, [r7, #20]
		gpio_rx.PinConfig.PinNumber = GPIO_PIN_3;
 8001806:	2303      	movs	r3, #3
 8001808:	763b      	strb	r3, [r7, #24]

		// PB7 TX
		gpio_tx.pGPIOx = GPIOA;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <USART_InitGpioPins+0x6c>)
 800180c:	60bb      	str	r3, [r7, #8]
		gpio_tx.PinConfig.PinNumber = GPIO_PIN_2;
 800180e:	2302      	movs	r3, #2
 8001810:	733b      	strb	r3, [r7, #12]

		// Alternate Function
		gpio_rx.PinConfig.AF = GPIO_PIN_AF_AF7;
 8001812:	2307      	movs	r3, #7
 8001814:	777b      	strb	r3, [r7, #29]
		gpio_tx.PinConfig.AF = GPIO_PIN_AF_AF7;
 8001816:	2307      	movs	r3, #7
 8001818:	747b      	strb	r3, [r7, #17]
	}

	// Mode AF
	gpio_rx.PinConfig.Mode = GPIO_PIN_MODE_AF;
 800181a:	2302      	movs	r3, #2
 800181c:	767b      	strb	r3, [r7, #25]
	gpio_tx.PinConfig.Mode = GPIO_PIN_MODE_AF;
 800181e:	2302      	movs	r3, #2
 8001820:	737b      	strb	r3, [r7, #13]

	// Output type open drain
	gpio_rx.PinConfig.OutputType = GPIO_PIN_OT_OD;
 8001822:	2301      	movs	r3, #1
 8001824:	76bb      	strb	r3, [r7, #26]
	gpio_tx.PinConfig.OutputType = GPIO_PIN_OT_OD;
 8001826:	2301      	movs	r3, #1
 8001828:	73bb      	strb	r3, [r7, #14]

	// Output speed very high
	gpio_rx.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	76fb      	strb	r3, [r7, #27]
	gpio_tx.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	73fb      	strb	r3, [r7, #15]

	// Pull ups
	gpio_rx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	773b      	strb	r3, [r7, #28]
	gpio_tx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	743b      	strb	r3, [r7, #16]

	GPIO_InitPin(&gpio_rx);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f98a 	bl	8000b58 <GPIO_InitPin>
	GPIO_InitPin(&gpio_tx);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff f985 	bl	8000b58 <GPIO_InitPin>
}
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40004400 	.word	0x40004400
 800185c:	40020000 	.word	0x40020000

08001860 <USART_SetBaudRate>:
/*
 * calculate and write in baud rate divider
 */
void USART_SetBaudRate(USART_Handle_t *p_handle_usart, uint32_t baud_rate,
		UsartOversampling_t oversampling)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	4613      	mov	r3, r2
 800186c:	71fb      	strb	r3, [r7, #7]
	uint16_t baud_div_mantissa;
	uint8_t baud_div_fraction;

	// set oversampling

	p_handle_usart->p_usartx->CR1 |= (oversampling << USART_CR1_OVER8_Pos);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	03db      	lsls	r3, r3, #15
 8001878:	4619      	mov	r1, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	60da      	str	r2, [r3, #12]
	// in equation we have 8 * (2 - OVER8)
	uint8_t usart_divmulti =
			8
					* (2
							- (1U
									& (p_handle_usart->p_usartx->CR1
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
											>> USART_CR1_OVER8_Pos)));
 8001888:	0bdb      	lsrs	r3, r3, #15
									& (p_handle_usart->p_usartx->CR1
 800188a:	f003 0301 	and.w	r3, r3, #1
							- (1U
 800188e:	f1c3 0302 	rsb	r3, r3, #2
	uint8_t usart_divmulti =
 8001892:	b2db      	uxtb	r3, r3
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	// read clock values from rcc registers
	RCC_GetClockFrequencies(&clock_freqs);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff34 	bl	800170c <RCC_GetClockFrequencies>

	if (p_handle_usart->p_usartx == USART2)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a35      	ldr	r2, [pc, #212]	; (8001980 <USART_SetBaudRate+0x120>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d102      	bne.n	80018b4 <USART_SetBaudRate+0x54>
	{
		pclk_freq = clock_freqs.pclk1;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b2:	e001      	b.n	80018b8 <USART_SetBaudRate+0x58>
	}
	else
	{
		// usart1 and usart6 are on apb2
		pclk_freq = clock_freqs.pclk2;
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	baud_div = ((float) pclk_freq / (baud_rate * usart_divmulti));
 80018b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	baud_div_mantissa = baud_div;
 80018dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e4:	ee17 3a90 	vmov	r3, s15
 80018e8:	857b      	strh	r3, [r7, #42]	; 0x2a
	// rounding number to get correct fraction
	baud_div_fraction = round((baud_div - baud_div_mantissa) * usart_divmulti);
 80018ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190c:	ee17 0a90 	vmov	r0, s15
 8001910:	f7fe fdc4 	bl	800049c <__aeabi_f2d>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	ec43 2b10 	vmov	d0, r2, r3
 800191c:	f000 f8de 	bl	8001adc <round>
 8001920:	ec53 2b10 	vmov	r2, r3, d0
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7fe fe10 	bl	800054c <__aeabi_d2uiz>
 800192c:	4603      	mov	r3, r0
 800192e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	// if after rounding we have value bigger or equal to oversampling then we
	// need to carry +1 to mantissa and set fraction to 0. like 50,99 -> 51;
	if (baud_div_fraction >= usart_divmulti)
 8001932:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001936:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800193a:	429a      	cmp	r2, r3
 800193c:	d305      	bcc.n	800194a <USART_SetBaudRate+0xea>
	{
		baud_div_fraction = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		baud_div_mantissa++;
 8001944:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001946:	3301      	adds	r3, #1
 8001948:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	// insert values to brr register
	p_handle_usart->p_usartx->BRR = 0;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
			<< USART_BRR_DIV_Mantissa_Pos);
 8001958:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4619      	mov	r1, r3
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6899      	ldr	r1, [r3, #8]
			<< USART_BRR_DIV_Fraction_Pos);
 800196c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	609a      	str	r2, [r3, #8]
}
 8001978:	bf00      	nop
 800197a:	3730      	adds	r7, #48	; 0x30
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40004400 	.word	0x40004400

08001984 <USART_EnableIRQs>:
 * use CRx_IRQ_FLAGS to enable all the interrupts in register, otherwise use
 * like : (USART_CR1_PEIE | USART_CR1_TXEIE)
 */
void USART_EnableIRQs(USART_Handle_t *p_handle_usart, uint32_t CR1_flags,
		uint32_t CR2_flags, uint32_t CR3_flags)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 8001992:	2026      	movs	r0, #38	; 0x26
 8001994:	f7ff fed8 	bl	8001748 <__NVIC_EnableIRQ>
	// CR1 - PEIE,TXEIE,TCIE,RXNEIE,IDLEIE
	if (CR1_flags)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <USART_EnableIRQs+0x2a>
	{
		p_handle_usart->p_usartx->CR1 |= CR1_flags;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68d9      	ldr	r1, [r3, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	60da      	str	r2, [r3, #12]
	}

	// CR2 - LBDIE
	if (CR2_flags)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d007      	beq.n	80019c4 <USART_EnableIRQs+0x40>
	{
		p_handle_usart->p_usartx->CR2 |= CR2_flags;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6919      	ldr	r1, [r3, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	611a      	str	r2, [r3, #16]
	}

	// CR3 - CTSIE, EIE
	if (CR3_flags)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <USART_EnableIRQs+0x58>
	{
		p_handle_usart->p_usartx->CR1 |= CR3_flags;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68d9      	ldr	r1, [r3, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	60da      	str	r2, [r3, #12]
	}

	return;
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
}
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <USART_SetBasicParameters>:
 * basic init function
 */
void USART_SetBasicParameters(USART_Handle_t *p_handle_usart,
		UsartWordLenght_t word_lenght, UsartStopBits_t stop_bits,
		UsartParity_t parity)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	4608      	mov	r0, r1
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	70fb      	strb	r3, [r7, #3]
 80019f6:	460b      	mov	r3, r1
 80019f8:	70bb      	strb	r3, [r7, #2]
 80019fa:	4613      	mov	r3, r2
 80019fc:	707b      	strb	r3, [r7, #1]
	USART_InitGpioPins(p_handle_usart);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fef6 	bl	80017f0 <USART_InitGpioPins>
	USART_ClockEnable(p_handle_usart);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff febd 	bl	8001784 <USART_ClockEnable>

	//	enable the USART by writing the UE bit in USART_CR1 register to 1.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_UE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a18:	60da      	str	r2, [r3, #12]
	//	program the M bit in USART_CR1 to define the word length.
	p_handle_usart->p_usartx->CR1 |= (word_lenght << USART_CR1_M_Pos);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	031b      	lsls	r3, r3, #12
 8001a24:	4619      	mov	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	60da      	str	r2, [r3, #12]
	//	program the number of stop bits in USART_CR2.
	p_handle_usart->p_usartx->CR1 |= (stop_bits << USART_CR2_STOP_Pos);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	78bb      	ldrb	r3, [r7, #2]
 8001a36:	031b      	lsls	r3, r3, #12
 8001a38:	4619      	mov	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	60da      	str	r2, [r3, #12]
	// program parity control
	if (parity != kUsartNoParity)
 8001a42:	787b      	ldrb	r3, [r7, #1]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d011      	beq.n	8001a6c <USART_SetBasicParameters+0x88>
	{
		p_handle_usart->p_usartx->CR1 |= USART_CR1_PCE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a56:	60da      	str	r2, [r3, #12]
		p_handle_usart->p_usartx->CR1 |= (parity << USART_CR1_PS_Pos);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	787b      	ldrb	r3, [r7, #1]
 8001a60:	025b      	lsls	r3, r3, #9
 8001a62:	4619      	mov	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]
	}

	//clear TC flag
	p_handle_usart->p_usartx->SR &= ~(USART_SR_TC);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a7a:	601a      	str	r2, [r3, #0]
	return;
 8001a7c:	bf00      	nop
}
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <__libc_init_array>:
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	4d0d      	ldr	r5, [pc, #52]	; (8001abc <__libc_init_array+0x38>)
 8001a88:	4c0d      	ldr	r4, [pc, #52]	; (8001ac0 <__libc_init_array+0x3c>)
 8001a8a:	1b64      	subs	r4, r4, r5
 8001a8c:	10a4      	asrs	r4, r4, #2
 8001a8e:	2600      	movs	r6, #0
 8001a90:	42a6      	cmp	r6, r4
 8001a92:	d109      	bne.n	8001aa8 <__libc_init_array+0x24>
 8001a94:	4d0b      	ldr	r5, [pc, #44]	; (8001ac4 <__libc_init_array+0x40>)
 8001a96:	4c0c      	ldr	r4, [pc, #48]	; (8001ac8 <__libc_init_array+0x44>)
 8001a98:	f000 f866 	bl	8001b68 <_init>
 8001a9c:	1b64      	subs	r4, r4, r5
 8001a9e:	10a4      	asrs	r4, r4, #2
 8001aa0:	2600      	movs	r6, #0
 8001aa2:	42a6      	cmp	r6, r4
 8001aa4:	d105      	bne.n	8001ab2 <__libc_init_array+0x2e>
 8001aa6:	bd70      	pop	{r4, r5, r6, pc}
 8001aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aac:	4798      	blx	r3
 8001aae:	3601      	adds	r6, #1
 8001ab0:	e7ee      	b.n	8001a90 <__libc_init_array+0xc>
 8001ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ab6:	4798      	blx	r3
 8001ab8:	3601      	adds	r6, #1
 8001aba:	e7f2      	b.n	8001aa2 <__libc_init_array+0x1e>
 8001abc:	08001b80 	.word	0x08001b80
 8001ac0:	08001b80 	.word	0x08001b80
 8001ac4:	08001b80 	.word	0x08001b80
 8001ac8:	08001b84 	.word	0x08001b84

08001acc <memset>:
 8001acc:	4402      	add	r2, r0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <memset+0xa>
 8001ad4:	4770      	bx	lr
 8001ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8001ada:	e7f9      	b.n	8001ad0 <memset+0x4>

08001adc <round>:
 8001adc:	ec51 0b10 	vmov	r0, r1, d0
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8001ae6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8001aea:	2c13      	cmp	r4, #19
 8001aec:	ee10 2a10 	vmov	r2, s0
 8001af0:	460b      	mov	r3, r1
 8001af2:	dc19      	bgt.n	8001b28 <round+0x4c>
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	da09      	bge.n	8001b0c <round+0x30>
 8001af8:	3401      	adds	r4, #1
 8001afa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8001afe:	d103      	bne.n	8001b08 <round+0x2c>
 8001b00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8001b04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001b08:	2100      	movs	r1, #0
 8001b0a:	e028      	b.n	8001b5e <round+0x82>
 8001b0c:	4d15      	ldr	r5, [pc, #84]	; (8001b64 <round+0x88>)
 8001b0e:	4125      	asrs	r5, r4
 8001b10:	ea01 0605 	and.w	r6, r1, r5
 8001b14:	4332      	orrs	r2, r6
 8001b16:	d00e      	beq.n	8001b36 <round+0x5a>
 8001b18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b1c:	fa42 f404 	asr.w	r4, r2, r4
 8001b20:	4423      	add	r3, r4
 8001b22:	ea23 0305 	bic.w	r3, r3, r5
 8001b26:	e7ef      	b.n	8001b08 <round+0x2c>
 8001b28:	2c33      	cmp	r4, #51	; 0x33
 8001b2a:	dd07      	ble.n	8001b3c <round+0x60>
 8001b2c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001b30:	d101      	bne.n	8001b36 <round+0x5a>
 8001b32:	f7fe fb55 	bl	80001e0 <__adddf3>
 8001b36:	ec41 0b10 	vmov	d0, r0, r1
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}
 8001b3c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8001b40:	f04f 35ff 	mov.w	r5, #4294967295
 8001b44:	40f5      	lsrs	r5, r6
 8001b46:	4228      	tst	r0, r5
 8001b48:	d0f5      	beq.n	8001b36 <round+0x5a>
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8001b50:	fa01 f404 	lsl.w	r4, r1, r4
 8001b54:	1912      	adds	r2, r2, r4
 8001b56:	bf28      	it	cs
 8001b58:	185b      	addcs	r3, r3, r1
 8001b5a:	ea22 0105 	bic.w	r1, r2, r5
 8001b5e:	4608      	mov	r0, r1
 8001b60:	4619      	mov	r1, r3
 8001b62:	e7e8      	b.n	8001b36 <round+0x5a>
 8001b64:	000fffff 	.word	0x000fffff

08001b68 <_init>:
 8001b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6a:	bf00      	nop
 8001b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b6e:	bc08      	pop	{r3}
 8001b70:	469e      	mov	lr, r3
 8001b72:	4770      	bx	lr

08001b74 <_fini>:
 8001b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b76:	bf00      	nop
 8001b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7a:	bc08      	pop	{r3}
 8001b7c:	469e      	mov	lr, r3
 8001b7e:	4770      	bx	lr
