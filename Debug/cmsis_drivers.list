
cmsis_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001870  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001a04  08001a04  00011a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a58  08001a58  00011a60  2**0
                  CONTENTS
  4 .ARM          00000000  08001a58  08001a58  00011a60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a58  08001a60  00011a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a58  08001a58  00011a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a5c  08001a5c  00011a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08001a60  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001a60  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011a60  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055e3  00000000  00000000  00011a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f14  00000000  00000000  00017073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00017f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000228  00000000  00000000  00018238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e2e4  00000000  00000000  00018460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003450  00000000  00000000  00026744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055ac1  00000000  00000000  00029b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007f655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a10  00000000  00000000  0007f6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080019ec 	.word	0x080019ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080019ec 	.word	0x080019ec

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_d2uiz>:
 800054c:	004a      	lsls	r2, r1, #1
 800054e:	d211      	bcs.n	8000574 <__aeabi_d2uiz+0x28>
 8000550:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000554:	d211      	bcs.n	800057a <__aeabi_d2uiz+0x2e>
 8000556:	d50d      	bpl.n	8000574 <__aeabi_d2uiz+0x28>
 8000558:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800055c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000560:	d40e      	bmi.n	8000580 <__aeabi_d2uiz+0x34>
 8000562:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056e:	fa23 f002 	lsr.w	r0, r3, r2
 8000572:	4770      	bx	lr
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	4770      	bx	lr
 800057a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800057e:	d102      	bne.n	8000586 <__aeabi_d2uiz+0x3a>
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	4770      	bx	lr
 8000586:	f04f 0000 	mov.w	r0, #0
 800058a:	4770      	bx	lr

0800058c <main>:
// #include "gpio_exti_example.h"
// #include "gpio_example.h"
#include "usart_dma_example.h"
 //#include "i2c_bmp180_example.h"
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
//	wwdg_example();
//	gpio_exti_example();
//	gpio_example();
	usart_dma_example();
 8000590:	f000 f85e 	bl	8000650 <usart_dma_example>
 8000594:	2300      	movs	r3, #0
	//i2c_bmp180_example();
}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <SystemInit+0x20>)
 80005a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <SystemInit+0x20>)
 80005a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005dc:	4c0b      	ldr	r4, [pc, #44]	; (800060c <LoopFillZerobss+0x26>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ea:	f7ff ffd7 	bl	800059c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f001 f98b 	bl	8001908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f2:	f7ff ffcb 	bl	800058c <main>
  bx  lr    
 80005f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000604:	08001a60 	.word	0x08001a60
  ldr r2, =_sbss
 8000608:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800060c:	20000060 	.word	0x20000060

08000610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>
	...

08000614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db0b      	blt.n	800063e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 021f 	and.w	r2, r3, #31
 800062c:	4907      	ldr	r1, [pc, #28]	; (800064c <__NVIC_EnableIRQ+0x38>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	095b      	lsrs	r3, r3, #5
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e100 	.word	0xe000e100

08000650 <usart_dma_example>:
USART_Handle_t p_usart2;

volatile uint8_t SendBuffer1Flag, IdleFlag, ErrorFlag, SendBuffer0Flag;

void usart_dma_example(void)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b08f      	sub	sp, #60	; 0x3c
 8000654:	af00      	add	r7, sp, #0

	// variables
	uint8_t databuffer1[16] =
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
 800065a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
	{ 0 };
	uint8_t databuffer0[16] =
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
	{ 0 };
	uint8_t databuffer2[16] = "print dma \n\r";
 8000676:	4b42      	ldr	r3, [pc, #264]	; (8000780 <usart_dma_example+0x130>)
 8000678:	1d3c      	adds	r4, r7, #4
 800067a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800067c:	c407      	stmia	r4!, {r0, r1, r2}
 800067e:	7023      	strb	r3, [r4, #0]
 8000680:	f107 0311 	add.w	r3, r7, #17
 8000684:	2200      	movs	r2, #0
 8000686:	801a      	strh	r2, [r3, #0]
 8000688:	709a      	strb	r2, [r3, #2]
	memset(&p_dma1, 0, sizeof(p_dma1));
 800068a:	2224      	movs	r2, #36	; 0x24
 800068c:	2100      	movs	r1, #0
 800068e:	483d      	ldr	r0, [pc, #244]	; (8000784 <usart_dma_example+0x134>)
 8000690:	f001 f95e 	bl	8001950 <memset>

	// config peripherals
	GPIOConfig();
 8000694:	f000 f88e 	bl	80007b4 <GPIOConfig>
	USART2Config(&p_usart2);
 8000698:	483b      	ldr	r0, [pc, #236]	; (8000788 <usart_dma_example+0x138>)
 800069a:	f000 f8a1 	bl	80007e0 <USART2Config>
	DMA1Config(&p_dma1);
 800069e:	4839      	ldr	r0, [pc, #228]	; (8000784 <usart_dma_example+0x134>)
 80006a0:	f000 f8ce 	bl	8000840 <DMA1Config>

	// enable DMA interrupts for read/send
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006a4:	2011      	movs	r0, #17
 80006a6:	f7ff ffb5 	bl	8000614 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006aa:	2010      	movs	r0, #16
 80006ac:	f7ff ffb2 	bl	8000614 <__NVIC_EnableIRQ>

	// send message in dma mode
	USART_ConfigureTransmitDMA(&p_usart2, databuffer2, NULL);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	4834      	ldr	r0, [pc, #208]	; (8000788 <usart_dma_example+0x138>)
 80006b8:	f001 f8a8 	bl	800180c <USART_ConfigureTransmitDMA>
	USART_TransmitDMAStart(&p_usart2, 16);
 80006bc:	2110      	movs	r1, #16
 80006be:	4832      	ldr	r0, [pc, #200]	; (8000788 <usart_dma_example+0x138>)
 80006c0:	f001 f8d9 	bl	8001876 <USART_TransmitDMAStart>
	// start receiving in dma mode
	USART_ConfigureReceiveDMA(&p_usart2, databuffer0, databuffer1);
 80006c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	482e      	ldr	r0, [pc, #184]	; (8000788 <usart_dma_example+0x138>)
 80006d0:	f000 ffca 	bl	8001668 <USART_ConfigureReceiveDMA>
	USART_ReceiveDMAStart(&p_usart2, 16);
 80006d4:	2110      	movs	r1, #16
 80006d6:	482c      	ldr	r0, [pc, #176]	; (8000788 <usart_dma_example+0x138>)
 80006d8:	f001 f806 	bl	80016e8 <USART_ReceiveDMAStart>


	while (1)
	{
		for (uint32_t i = 0; i < 100000; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
 80006e0:	e002      	b.n	80006e8 <usart_dma_example+0x98>
 80006e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e4:	3301      	adds	r3, #1
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
 80006e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ea:	4a28      	ldr	r2, [pc, #160]	; (800078c <usart_dma_example+0x13c>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d9f8      	bls.n	80006e2 <usart_dma_example+0x92>
		{
		}
		GPIO_TogglePin(GPIOA, kGpioPin5);
 80006f0:	2105      	movs	r1, #5
 80006f2:	4827      	ldr	r0, [pc, #156]	; (8000790 <usart_dma_example+0x140>)
 80006f4:	f000 fc60 	bl	8000fb8 <GPIO_TogglePin>

		if (SendBuffer1Flag == 1)
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <usart_dma_example+0x144>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d10e      	bne.n	8000720 <usart_dma_example+0xd0>
		{
			SendBuffer1Flag = 0;
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <usart_dma_example+0x144>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&p_usart2, (uint8_t*) "\n\r printing db1:", 16);
 8000708:	2210      	movs	r2, #16
 800070a:	4923      	ldr	r1, [pc, #140]	; (8000798 <usart_dma_example+0x148>)
 800070c:	481e      	ldr	r0, [pc, #120]	; (8000788 <usart_dma_example+0x138>)
 800070e:	f001 f82e 	bl	800176e <USART_Transmit>
			USART_Transmit(&p_usart2, databuffer1, 16);
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	2210      	movs	r2, #16
 8000718:	4619      	mov	r1, r3
 800071a:	481b      	ldr	r0, [pc, #108]	; (8000788 <usart_dma_example+0x138>)
 800071c:	f001 f827 	bl	800176e <USART_Transmit>
		}

		if (SendBuffer0Flag == 1)
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <usart_dma_example+0x14c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b01      	cmp	r3, #1
 8000728:	d10e      	bne.n	8000748 <usart_dma_example+0xf8>
		{
			SendBuffer0Flag = 0;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <usart_dma_example+0x14c>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&p_usart2, (uint8_t*) "\n\r printing db0:", 16);
 8000730:	2210      	movs	r2, #16
 8000732:	491b      	ldr	r1, [pc, #108]	; (80007a0 <usart_dma_example+0x150>)
 8000734:	4814      	ldr	r0, [pc, #80]	; (8000788 <usart_dma_example+0x138>)
 8000736:	f001 f81a 	bl	800176e <USART_Transmit>
			USART_Transmit(&p_usart2, databuffer0, 16);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2210      	movs	r2, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4811      	ldr	r0, [pc, #68]	; (8000788 <usart_dma_example+0x138>)
 8000744:	f001 f813 	bl	800176e <USART_Transmit>
		}

		if (IdleFlag == 1)
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <usart_dma_example+0x154>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b01      	cmp	r3, #1
 8000750:	d107      	bne.n	8000762 <usart_dma_example+0x112>
		{
			IdleFlag = 0;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <usart_dma_example+0x154>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&p_usart2, (uint8_t*) "\n\rIDLE LINE", 11);
 8000758:	220b      	movs	r2, #11
 800075a:	4913      	ldr	r1, [pc, #76]	; (80007a8 <usart_dma_example+0x158>)
 800075c:	480a      	ldr	r0, [pc, #40]	; (8000788 <usart_dma_example+0x138>)
 800075e:	f001 f806 	bl	800176e <USART_Transmit>
		}

		if (ErrorFlag == 1)
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <usart_dma_example+0x15c>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b01      	cmp	r3, #1
 800076a:	d1b7      	bne.n	80006dc <usart_dma_example+0x8c>
		{
			ErrorFlag = 0;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <usart_dma_example+0x15c>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&p_usart2, (uint8_t*) "\n\rERROR LINE", 12);
 8000772:	220c      	movs	r2, #12
 8000774:	490e      	ldr	r1, [pc, #56]	; (80007b0 <usart_dma_example+0x160>)
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <usart_dma_example+0x138>)
 8000778:	f000 fff9 	bl	800176e <USART_Transmit>
		for (uint32_t i = 0; i < 100000; i++)
 800077c:	e7ae      	b.n	80006dc <usart_dma_example+0x8c>
 800077e:	bf00      	nop
 8000780:	08001a48 	.word	0x08001a48
 8000784:	20000038 	.word	0x20000038
 8000788:	20000024 	.word	0x20000024
 800078c:	0001869f 	.word	0x0001869f
 8000790:	40020000 	.word	0x40020000
 8000794:	20000020 	.word	0x20000020
 8000798:	08001a04 	.word	0x08001a04
 800079c:	2000005c 	.word	0x2000005c
 80007a0:	08001a18 	.word	0x08001a18
 80007a4:	20000034 	.word	0x20000034
 80007a8:	08001a2c 	.word	0x08001a2c
 80007ac:	2000005d 	.word	0x2000005d
 80007b0:	08001a38 	.word	0x08001a38

080007b4 <GPIOConfig>:

/*
 * configure LED on the board
 */
void GPIOConfig(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	// PA5 Led
	GPIO_InitClock(GPIOA);
 80007b8:	4808      	ldr	r0, [pc, #32]	; (80007dc <GPIOConfig+0x28>)
 80007ba:	f000 fa75 	bl	8000ca8 <GPIO_InitClock>
	GPIO_ConfigBasic(GPIOA, GPIO_FLAG_PIN_5, kGpioModeOutput, kGpioPUPDNoPull);
 80007be:	2300      	movs	r3, #0
 80007c0:	2201      	movs	r2, #1
 80007c2:	2120      	movs	r1, #32
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <GPIOConfig+0x28>)
 80007c6:	f000 fb13 	bl	8000df0 <GPIO_ConfigBasic>
	GPIO_ConfigOutput(GPIOA, GPIO_FLAG_PIN_5, kGpioOTPushPull, kGpioSpeedHigh);
 80007ca:	2302      	movs	r3, #2
 80007cc:	2200      	movs	r2, #0
 80007ce:	2120      	movs	r1, #32
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <GPIOConfig+0x28>)
 80007d2:	f000 fb5b 	bl	8000e8c <GPIO_ConfigOutput>
	return;
 80007d6:	bf00      	nop
}
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40020000 	.word	0x40020000

080007e0 <USART2Config>:
 * - set basic parameters
 * - set baud rate
 * - enable usart irqs
 */
void USART2Config(USART_Handle_t *p_usart2)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	p_usart2->p_usartx = USART2;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <USART2Config+0x54>)
 80007ec:	601a      	str	r2, [r3, #0]
	p_usart2->usart_dma.p_dma_stream_tx = DMA1_Stream6;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a11      	ldr	r2, [pc, #68]	; (8000838 <USART2Config+0x58>)
 80007f2:	605a      	str	r2, [r3, #4]
	p_usart2->usart_dma.p_dma_stream_rx = DMA1_Stream5;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <USART2Config+0x5c>)
 80007f8:	609a      	str	r2, [r3, #8]
	USART_InitClock(p_usart2);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f000 fda8 	bl	8001350 <USART_InitClock>
	USART_InitGpioPins(p_usart2);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 fdff 	bl	8001404 <USART_InitGpioPins>
	USART_SetBasicParameters(p_usart2, kUsartWordLenght8, kUsartStopBits0,
 8000806:	2302      	movs	r3, #2
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 fedf 	bl	80015d0 <USART_SetBasicParameters>
			kUsartNoParity);
	USART_SetBaudRate(p_usart2, 115200, kUsartOversampling16);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 fe17 	bl	800144c <USART_SetBaudRate>
	USART_EnableIRQs(p_usart2, USART_CR1_IDLEIE, 0, USART_CR3_EIE);
 800081e:	2301      	movs	r3, #1
 8000820:	2200      	movs	r2, #0
 8000822:	2110      	movs	r1, #16
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 fea3 	bl	8001570 <USART_EnableIRQs>
	return;
 800082a:	bf00      	nop
}
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40004400 	.word	0x40004400
 8000838:	400260a0 	.word	0x400260a0
 800083c:	40026088 	.word	0x40026088

08000840 <DMA1Config>:
/*
 * configure dma peripheral :
 * - to redo
 */
void DMA1Config(DMA_Handle_t *p_dma1)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	// read
	p_dma1->p_dmax = DMA1;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <DMA1Config+0x60>)
 800084c:	601a      	str	r2, [r3, #0]
	p_dma1->p_dma_streamx = DMA1_Stream5;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <DMA1Config+0x64>)
 8000852:	605a      	str	r2, [r3, #4]
	p_dma1->stream_config.channel_number = kChannel4;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2204      	movs	r2, #4
 8000858:	721a      	strb	r2, [r3, #8]
	p_dma1->stream_config.circular_mode = kCircularDisable;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	73da      	strb	r2, [r3, #15]
	p_dma1->stream_config.direction = kPeriToMem;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	729a      	strb	r2, [r3, #10]
	p_dma1->stream_config.mem_data_size = kByte;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	735a      	strb	r2, [r3, #13]
	p_dma1->stream_config.mem_increment = kIncrementEnable;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2201      	movs	r2, #1
 8000870:	731a      	strb	r2, [r3, #12]
	p_dma1->stream_config.peri_data_size = kByte;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	739a      	strb	r2, [r3, #14]
	p_dma1->stream_config.peri_increment = kIncrementDisable;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	72da      	strb	r2, [r3, #11]

	DMA_InitBasicParameters(p_dma1);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f972 	bl	8000b68 <DMA_InitBasicParameters>

	// send
	p_dma1->p_dma_streamx = DMA1_Stream6;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <DMA1Config+0x68>)
 8000888:	605a      	str	r2, [r3, #4]
	p_dma1->stream_config.direction = kMemToPeri;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2201      	movs	r2, #1
 800088e:	729a      	strb	r2, [r3, #10]

	DMA_InitBasicParameters(p_dma1);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 f969 	bl	8000b68 <DMA_InitBasicParameters>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40026000 	.word	0x40026000
 80008a4:	40026088 	.word	0x40026088
 80008a8:	400260a0 	.word	0x400260a0

080008ac <USART2_IRQHandler>:
 * idle line detection
 * error detection
 * receive finished detection
 */
void USART2_IRQHandler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
	if (USART2->SR & USART_SR_IDLE)
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <USART2_IRQHandler+0x48>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d007      	beq.n	80008cc <USART2_IRQHandler+0x20>
	{
		IdleFlag = USART2->DR;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <USART2_IRQHandler+0x48>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <USART2_IRQHandler+0x4c>)
 80008c4:	701a      	strb	r2, [r3, #0]
		IdleFlag = 1;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <USART2_IRQHandler+0x4c>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
	}

	if (USART2->SR & USART_ERROR_FLAGS)
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <USART2_IRQHandler+0x48>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <USART2_IRQHandler+0x32>
	{
		ErrorFlag = 1;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <USART2_IRQHandler+0x50>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
	}

	USART2->SR &= ~(USART_SR_RXNE);
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <USART2_IRQHandler+0x48>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <USART2_IRQHandler+0x48>)
 80008e4:	f023 0320 	bic.w	r3, r3, #32
 80008e8:	6013      	str	r3, [r2, #0]

}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	40004400 	.word	0x40004400
 80008f8:	20000034 	.word	0x20000034
 80008fc:	2000005d 	.word	0x2000005d

08000900 <DMA1_Stream6_IRQHandler>:
/*
 * 16 bytes transfered from data buffer to
 * uart data register irq
 */
void DMA1_Stream6_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

	// this has to be used to clear tx line status
	USART_DMATransmitDoneCallback(&p_usart2);
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <DMA1_Stream6_IRQHandler+0x1c>)
 8000906:	f000 ffe9 	bl	80018dc <USART_DMATransmitDoneCallback>

	// clear dma5 transfer complete flag
	DMA1->HIFCR |= DMA_HIFCR_CTCIF6;
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <DMA1_Stream6_IRQHandler+0x20>)
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <DMA1_Stream6_IRQHandler+0x20>)
 8000910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000914:	60d3      	str	r3, [r2, #12]
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000024 	.word	0x20000024
 8000920:	40026000 	.word	0x40026000

08000924 <DMA1_Stream5_IRQHandler>:
/*
 * 16 bytes transfered from uart to
 * one of the data buffers irq
 */
void DMA1_Stream5_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	// this has to be used to clear rx line status
	USART_DMAReceiveDoneCallback(&p_usart2);
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <DMA1_Stream5_IRQHandler+0x38>)
 800092a:	f000 ff0b 	bl	8001744 <USART_DMAReceiveDoneCallback>

	// check which data buffer is pointed to and send buffer
	if (p_usart2.usart_dma.p_dma_stream_rx->CR & (DMA_SxCR_CT))
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <DMA1_Stream5_IRQHandler+0x38>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <DMA1_Stream5_IRQHandler+0x20>
	{
		SendBuffer1Flag = 1;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <DMA1_Stream5_IRQHandler+0x3c>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	e002      	b.n	800094a <DMA1_Stream5_IRQHandler+0x26>
	}
	else
	{
		SendBuffer0Flag = 1;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <DMA1_Stream5_IRQHandler+0x40>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
	}

	// clear dma5 transfer complete flag
	DMA1->HIFCR |= DMA_HIFCR_CTCIF5;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <DMA1_Stream5_IRQHandler+0x44>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <DMA1_Stream5_IRQHandler+0x44>)
 8000950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000954:	60d3      	str	r3, [r2, #12]
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000024 	.word	0x20000024
 8000960:	20000020 	.word	0x20000020
 8000964:	2000005c 	.word	0x2000005c
 8000968:	40026000 	.word	0x40026000

0800096c <DMA_ClockEnable>:
#include "stdint.h"
#include "stm32f401xe.h"
#include "stm32f401xe_rcc.h"

void DMA_ClockEnable(DMA_TypeDef *p_dmax)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if (p_dmax == DMA1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <DMA_ClockEnable+0x40>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d106      	bne.n	800098a <DMA_ClockEnable+0x1e>
	{
		RCC_CLOCK_DMA1_ENABLE();
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <DMA_ClockEnable+0x44>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <DMA_ClockEnable+0x44>)
 8000982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
	else if (p_dmax == DMA2)
	{
		RCC_CLOCK_DMA2_ENABLE();
	}

	return;
 8000988:	e00a      	b.n	80009a0 <DMA_ClockEnable+0x34>
	else if (p_dmax == DMA2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <DMA_ClockEnable+0x48>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d106      	bne.n	80009a0 <DMA_ClockEnable+0x34>
		RCC_CLOCK_DMA2_ENABLE();
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <DMA_ClockEnable+0x44>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <DMA_ClockEnable+0x44>)
 8000998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
	return;
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
}
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	40026000 	.word	0x40026000
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40026400 	.word	0x40026400

080009b8 <DMA_GetStreamNumber>:

static uint8_t DMA_GetStreamNumber(DMA_Handle_t *p_handle_dma)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if (p_handle_dma->p_dma_streamx == DMA1_Stream0
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	4a34      	ldr	r2, [pc, #208]	; (8000a98 <DMA_GetStreamNumber+0xe0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d004      	beq.n	80009d4 <DMA_GetStreamNumber+0x1c>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream0)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4a33      	ldr	r2, [pc, #204]	; (8000a9c <DMA_GetStreamNumber+0xe4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d101      	bne.n	80009d8 <DMA_GetStreamNumber+0x20>
	{
		return 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	e058      	b.n	8000a8a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	4a30      	ldr	r2, [pc, #192]	; (8000aa0 <DMA_GetStreamNumber+0xe8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d004      	beq.n	80009ec <DMA_GetStreamNumber+0x34>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	4a2f      	ldr	r2, [pc, #188]	; (8000aa4 <DMA_GetStreamNumber+0xec>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d101      	bne.n	80009f0 <DMA_GetStreamNumber+0x38>
	{
		return 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e04c      	b.n	8000a8a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream2
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a2c      	ldr	r2, [pc, #176]	; (8000aa8 <DMA_GetStreamNumber+0xf0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d004      	beq.n	8000a04 <DMA_GetStreamNumber+0x4c>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	4a2b      	ldr	r2, [pc, #172]	; (8000aac <DMA_GetStreamNumber+0xf4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d101      	bne.n	8000a08 <DMA_GetStreamNumber+0x50>
	{
		return 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	e040      	b.n	8000a8a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <DMA_GetStreamNumber+0xf8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d004      	beq.n	8000a1c <DMA_GetStreamNumber+0x64>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream3)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <DMA_GetStreamNumber+0xfc>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d101      	bne.n	8000a20 <DMA_GetStreamNumber+0x68>
	{
		return 3;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	e034      	b.n	8000a8a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream4
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <DMA_GetStreamNumber+0x100>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d004      	beq.n	8000a34 <DMA_GetStreamNumber+0x7c>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream4)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <DMA_GetStreamNumber+0x104>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d101      	bne.n	8000a38 <DMA_GetStreamNumber+0x80>
	{
		return 4;
 8000a34:	2304      	movs	r3, #4
 8000a36:	e028      	b.n	8000a8a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream5
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a20      	ldr	r2, [pc, #128]	; (8000ac0 <DMA_GetStreamNumber+0x108>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d004      	beq.n	8000a4c <DMA_GetStreamNumber+0x94>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream5)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <DMA_GetStreamNumber+0x10c>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d101      	bne.n	8000a50 <DMA_GetStreamNumber+0x98>
	{
		return 5;
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	e01c      	b.n	8000a8a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream6
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <DMA_GetStreamNumber+0x110>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d004      	beq.n	8000a64 <DMA_GetStreamNumber+0xac>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream6)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <DMA_GetStreamNumber+0x114>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d101      	bne.n	8000a68 <DMA_GetStreamNumber+0xb0>
	{
		return 6;
 8000a64:	2306      	movs	r3, #6
 8000a66:	e010      	b.n	8000a8a <DMA_GetStreamNumber+0xd2>
	}
	if (p_handle_dma->p_dma_streamx == DMA1_Stream7
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <DMA_GetStreamNumber+0x118>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d004      	beq.n	8000a7c <DMA_GetStreamNumber+0xc4>
			|| p_handle_dma->p_dma_streamx == DMA2_Stream7)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <DMA_GetStreamNumber+0x11c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d101      	bne.n	8000a80 <DMA_GetStreamNumber+0xc8>
	{
		return 7;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	e004      	b.n	8000a8a <DMA_GetStreamNumber+0xd2>
	}

	p_handle_dma->status_error = kErrWrongStreamNumber;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2201      	movs	r2, #1
 8000a84:	f883 2020 	strb.w	r2, [r3, #32]
	return 200;
 8000a88:	23c8      	movs	r3, #200	; 0xc8
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40026010 	.word	0x40026010
 8000a9c:	40026410 	.word	0x40026410
 8000aa0:	40026028 	.word	0x40026028
 8000aa4:	40026428 	.word	0x40026428
 8000aa8:	40026040 	.word	0x40026040
 8000aac:	40026440 	.word	0x40026440
 8000ab0:	40026058 	.word	0x40026058
 8000ab4:	40026458 	.word	0x40026458
 8000ab8:	40026070 	.word	0x40026070
 8000abc:	40026470 	.word	0x40026470
 8000ac0:	40026088 	.word	0x40026088
 8000ac4:	40026488 	.word	0x40026488
 8000ac8:	400260a0 	.word	0x400260a0
 8000acc:	400264a0 	.word	0x400264a0
 8000ad0:	400260b8 	.word	0x400260b8
 8000ad4:	400264b8 	.word	0x400264b8

08000ad8 <DMA_ClearAllStreamFlags>:

static void DMA_ClearAllStreamFlags(DMA_Handle_t *p_handle_dma,
		uint8_t stream_number)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
	// clear flags
	if (stream_number < 4)
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d813      	bhi.n	8000b12 <DMA_ClearAllStreamFlags+0x3a>
	{
		// clear 5 flags on positions 0,6,16,22 for streams 0-3
		p_handle_dma->p_dmax->LIFCR |= (DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6899      	ldr	r1, [r3, #8]
				| DMA_LIFCR_CTEIF0 |
				DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTCIF0)
				<< (((stream_number / 2) * 16) + (stream_number * 6));
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	0118      	lsls	r0, r3, #4
 8000af8:	78fa      	ldrb	r2, [r7, #3]
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4403      	add	r3, r0
 8000b04:	223d      	movs	r2, #61	; 0x3d
 8000b06:	409a      	lsls	r2, r3
		p_handle_dma->p_dmax->LIFCR |= (DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	e023      	b.n	8000b5a <DMA_ClearAllStreamFlags+0x82>
	}
	else if (stream_number >= 4 || stream_number < 8)
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d802      	bhi.n	8000b1e <DMA_ClearAllStreamFlags+0x46>
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b07      	cmp	r3, #7
 8000b1c:	d818      	bhi.n	8000b50 <DMA_ClearAllStreamFlags+0x78>
	{
		// clear 5 flags on positions 0,6,16,22 for streams 0-3
		p_handle_dma->p_dmax->HIFCR |= (DMA_HIFCR_CFEIF4 | DMA_HIFCR_CDMEIF4
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68d9      	ldr	r1, [r3, #12]
				| DMA_HIFCR_CTEIF4 |
				DMA_HIFCR_CHTIF4 | DMA_HIFCR_CTCIF4)
				<< (((stream_number / 6) * 16) + ((stream_number % 4) * 6));
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <DMA_ClearAllStreamFlags+0x8c>)
 8000b28:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	0118      	lsls	r0, r3, #4
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	f003 0203 	and.w	r2, r3, #3
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4403      	add	r3, r0
 8000b42:	223d      	movs	r2, #61	; 0x3d
 8000b44:	409a      	lsls	r2, r3
		p_handle_dma->p_dmax->HIFCR |= (DMA_HIFCR_CFEIF4 | DMA_HIFCR_CDMEIF4
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	e004      	b.n	8000b5a <DMA_ClearAllStreamFlags+0x82>
	}
	else
	{
		// error
		p_handle_dma->status_error = kErrWrongStreamNumber;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2201      	movs	r2, #1
 8000b54:	f883 2020 	strb.w	r2, [r3, #32]
		return;
 8000b58:	bf00      	nop
	}
}
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	aaaaaaab 	.word	0xaaaaaaab

08000b68 <DMA_InitBasicParameters>:

void DMA_InitBasicParameters(DMA_Handle_t *p_handle_dma)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	// save stream number in uint8
	uint8_t stream_number = DMA_GetStreamNumber(p_handle_dma);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff21 	bl	80009b8 <DMA_GetStreamNumber>
 8000b76:	4603      	mov	r3, r0
 8000b78:	73fb      	strb	r3, [r7, #15]
	// enable peripheral clock
	DMA_ClockEnable(p_handle_dma->p_dmax);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fef4 	bl	800096c <DMA_ClockEnable>

	// disable dma to configure new stream
	p_handle_dma->p_dma_streamx->CR &= ~(DMA_SxCR_EN);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f022 0201 	bic.w	r2, r2, #1
 8000b92:	601a      	str	r2, [r3, #0]

	// wait until EN bit is cleared
	while (p_handle_dma->p_dma_streamx->CR & DMA_SxCR_EN)
 8000b94:	bf00      	nop
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1f8      	bne.n	8000b96 <DMA_InitBasicParameters+0x2e>
		;

	// clear flags
	DMA_ClearAllStreamFlags(p_handle_dma, stream_number);
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff95 	bl	8000ad8 <DMA_ClearAllStreamFlags>
	//** OPTION TO CONFIGURE HERE DOUBLE BUFFER **//
	//** OPTION TO CONFIGURE HERE NO DATA ITEMS TO TRANSFER **//
	//** OPTION TO CONFIGURE MEM/PERI ADDRESSES **//

	// select DMA channel
	p_handle_dma->p_dma_streamx->CR |=
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	681a      	ldr	r2, [r3, #0]
			(p_handle_dma->stream_config.channel_number << DMA_SxCR_CHSEL_Pos);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7a1b      	ldrb	r3, [r3, #8]
 8000bb8:	065b      	lsls	r3, r3, #25
 8000bba:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	601a      	str	r2, [r3, #0]

	// select flow control mode
	p_handle_dma->p_dma_streamx->CR |=
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.flow_control) << DMA_SxCR_PFCTRL_Pos);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7f9b      	ldrb	r3, [r3, #30]
 8000bce:	015b      	lsls	r3, r3, #5
 8000bd0:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]

	// configure priority
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.priority)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7a5b      	ldrb	r3, [r3, #9]
			<< DMA_SxCR_PL_Pos);
 8000be4:	041b      	lsls	r3, r3, #16
 8000be6:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.priority)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	430a      	orrs	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]

	// configure fifo en/dis , thresholds
	p_handle_dma->p_dma_streamx->FCR |=
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	695a      	ldr	r2, [r3, #20]
			((p_handle_dma->stream_config.fifo_threshold) << DMA_SxFCR_FTH_Pos);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7f5b      	ldrb	r3, [r3, #29]
 8000bfa:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->FCR |=
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	615a      	str	r2, [r3, #20]
	p_handle_dma->p_dma_streamx->FCR |=
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	695a      	ldr	r2, [r3, #20]
			((p_handle_dma->stream_config.direct_mode) << DMA_SxFCR_DMDIS_Pos);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7f1b      	ldrb	r3, [r3, #28]
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->FCR |=
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	430a      	orrs	r2, r1
 8000c18:	615a      	str	r2, [r3, #20]

	// configure data transfer direction
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.direction)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7a9b      	ldrb	r3, [r3, #10]
			<< DMA_SxCR_DIR_Pos);
 8000c24:	019b      	lsls	r3, r3, #6
 8000c26:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |= ((p_handle_dma->stream_config.direction)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]

	// configure increment/fixed mode
	p_handle_dma->p_dma_streamx->CR |=
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.mem_increment) << DMA_SxCR_MINC_Pos);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7b1b      	ldrb	r3, [r3, #12]
 8000c3a:	029b      	lsls	r3, r3, #10
 8000c3c:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]
	p_handle_dma->p_dma_streamx->CR |=
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.peri_increment) << DMA_SxCR_PINC_Pos);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7adb      	ldrb	r3, [r3, #11]
 8000c50:	025b      	lsls	r3, r3, #9
 8000c52:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
	{
		// check if its possible to configure this burst mode
	}

	// configure data widths
	p_handle_dma->p_dma_streamx->CR |=
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.mem_data_size) << DMA_SxCR_MSIZE_Pos);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7b5b      	ldrb	r3, [r3, #13]
 8000c66:	035b      	lsls	r3, r3, #13
 8000c68:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
	p_handle_dma->p_dma_streamx->CR |=
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.peri_data_size) << DMA_SxCR_PSIZE_Pos);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7b9b      	ldrb	r3, [r3, #14]
 8000c7c:	02db      	lsls	r3, r3, #11
 8000c7e:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]

	// configure circular mode
	p_handle_dma->p_dma_streamx->CR |=
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
			((p_handle_dma->stream_config.circular_mode) << DMA_SxCR_CIRC_Pos);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7bdb      	ldrb	r3, [r3, #15]
 8000c92:	021b      	lsls	r3, r3, #8
 8000c94:	4619      	mov	r1, r3
	p_handle_dma->p_dma_streamx->CR |=
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]

	// activate the stream by setting the EN bit in the DMA_SxCR register
	// p_handle_dma->p_dma_streamx->CR |= DMA_SxCR_EN;
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <GPIO_InitClock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void GPIO_InitClock(GPIO_TypeDef *GPIO)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a48      	ldr	r2, [pc, #288]	; (8000dd4 <GPIO_InitClock+0x12c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d112      	bne.n	8000cde <GPIO_InitClock+0x36>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8000cb8:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a46      	ldr	r2, [pc, #280]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOA();
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	4a43      	ldr	r2, [pc, #268]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6113      	str	r3, [r2, #16]
 8000cd0:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	4a40      	ldr	r2, [pc, #256]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000cd6:	f023 0301 	bic.w	r3, r3, #1
 8000cda:	6113      	str	r3, [r2, #16]
 8000cdc:	e071      	b.n	8000dc2 <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOB)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <GPIO_InitClock+0x134>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d112      	bne.n	8000d0c <GPIO_InitClock+0x64>
	{
		RCC_CLOCK_GPIOB_ENABLE();
 8000ce6:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a3b      	ldr	r2, [pc, #236]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOB();
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	4a38      	ldr	r2, [pc, #224]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6113      	str	r3, [r2, #16]
 8000cfe:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d04:	f023 0302 	bic.w	r3, r3, #2
 8000d08:	6113      	str	r3, [r2, #16]
 8000d0a:	e05a      	b.n	8000dc2 <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOC)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a34      	ldr	r2, [pc, #208]	; (8000de0 <GPIO_InitClock+0x138>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d112      	bne.n	8000d3a <GPIO_InitClock+0x92>
	{
		RCC_CLOCK_GPIOC_ENABLE();
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOC();
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	4a2c      	ldr	r2, [pc, #176]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6113      	str	r3, [r2, #16]
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d32:	f023 0304 	bic.w	r3, r3, #4
 8000d36:	6113      	str	r3, [r2, #16]
 8000d38:	e043      	b.n	8000dc2 <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOD)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <GPIO_InitClock+0x13c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d112      	bne.n	8000d68 <GPIO_InitClock+0xc0>
	{
		RCC_CLOCK_GPIOD_ENABLE();
 8000d42:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOD();
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	6113      	str	r3, [r2, #16]
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d60:	f023 0308 	bic.w	r3, r3, #8
 8000d64:	6113      	str	r3, [r2, #16]
 8000d66:	e02c      	b.n	8000dc2 <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <GPIO_InitClock+0x140>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d112      	bne.n	8000d96 <GPIO_InitClock+0xee>
	{
		RCC_CLOCK_GPIOE_ENABLE();
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOE();
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6113      	str	r3, [r2, #16]
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000d8e:	f023 0310 	bic.w	r3, r3, #16
 8000d92:	6113      	str	r3, [r2, #16]
 8000d94:	e015      	b.n	8000dc2 <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOH)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <GPIO_InitClock+0x144>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d111      	bne.n	8000dc2 <GPIO_InitClock+0x11a>
	{
		RCC_CLOCK_GPIOH_ENABLE();
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOH();
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	6113      	str	r3, [r2, #16]
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <GPIO_InitClock+0x130>)
 8000dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dc0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc2:	f3bf 8f4f 	dsb	sy
}
 8000dc6:	bf00      	nop
	// this operation is unnecessary here because configuration library is taking
	// more than 2 clock cycles between clock enable and configuring register, i
	// leave it here to remind myself that stmf401x has a limitation that is
	// described in errata point 2.1.6
	__DSB();
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40021c00 	.word	0x40021c00

08000df0 <GPIO_ConfigBasic>:
 * @param[PUPD] - nopull/pullup/pulldown
 * @return - void
 */
void GPIO_ConfigBasic(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags,
		GpioMode_t mode, GpioPUPD_t PUPD)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	4608      	mov	r0, r1
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4603      	mov	r3, r0
 8000e00:	807b      	strh	r3, [r7, #2]
 8000e02:	460b      	mov	r3, r1
 8000e04:	707b      	strb	r3, [r7, #1]
 8000e06:	4613      	mov	r3, r2
 8000e08:	703b      	strb	r3, [r7, #0]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	81fb      	strh	r3, [r7, #14]
 8000e0e:	e034      	b.n	8000e7a <GPIO_ConfigBasic+0x8a>
	{
		if (pin_flags >> pin_count & 1U)
 8000e10:	887a      	ldrh	r2, [r7, #2]
 8000e12:	89fb      	ldrh	r3, [r7, #14]
 8000e14:	fa42 f303 	asr.w	r3, r2, r3
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d029      	beq.n	8000e74 <GPIO_ConfigBasic+0x84>
		{
			// mode
			p_GPIOx->MODER &= ~(0x03U << (pin_count * 2));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2103      	movs	r1, #3
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	401a      	ands	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
			p_GPIOx->MODER |= mode << (pin_count * 2);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	7879      	ldrb	r1, [r7, #1]
 8000e3c:	89fa      	ldrh	r2, [r7, #14]
 8000e3e:	0052      	lsls	r2, r2, #1
 8000e40:	fa01 f202 	lsl.w	r2, r1, r2
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]

			// PUPD
			p_GPIOx->PUPDR &= ~(0x03U << (pin_count * 2));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2103      	movs	r1, #3
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	60da      	str	r2, [r3, #12]
			p_GPIOx->PUPDR |= (PUPD << (pin_count * 2));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	7839      	ldrb	r1, [r7, #0]
 8000e66:	89fa      	ldrh	r2, [r7, #14]
 8000e68:	0052      	lsls	r2, r2, #1
 8000e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	60da      	str	r2, [r3, #12]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	3301      	adds	r3, #1
 8000e78:	81fb      	strh	r3, [r7, #14]
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d9c7      	bls.n	8000e10 <GPIO_ConfigBasic+0x20>
		}
	}

	return;
 8000e80:	bf00      	nop
}
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <GPIO_ConfigOutput>:
 * @param[speed] - slow/medium/fast/veryfast
 * @return - void
 */
void GPIO_ConfigOutput(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags,
		GpioOutputType_t output_type, GpioSpeed_t speed)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	4608      	mov	r0, r1
 8000e96:	4611      	mov	r1, r2
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	807b      	strh	r3, [r7, #2]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	707b      	strb	r3, [r7, #1]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	703b      	strb	r3, [r7, #0]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	81fb      	strh	r3, [r7, #14]
 8000eaa:	e032      	b.n	8000f12 <GPIO_ConfigOutput+0x86>
	{
		if (pin_flags >> pin_count & 1U)
 8000eac:	887a      	ldrh	r2, [r7, #2]
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	fa42 f303 	asr.w	r3, r2, r3
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d027      	beq.n	8000f0c <GPIO_ConfigOutput+0x80>
		{
			// speed selection
			p_GPIOx->OSPEEDR &= ~(0x03U << (pin_count * 2));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2103      	movs	r1, #3
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
			p_GPIOx->OSPEEDR |= (speed << (pin_count * 2));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	7839      	ldrb	r1, [r7, #0]
 8000ed8:	89fa      	ldrh	r2, [r7, #14]
 8000eda:	0052      	lsls	r2, r2, #1
 8000edc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	609a      	str	r2, [r3, #8]

			// output type selection
			p_GPIOx->OTYPER &= ~(0x01U << pin_count);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	2101      	movs	r1, #1
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	605a      	str	r2, [r3, #4]
			p_GPIOx->OTYPER |= (output_type << pin_count);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	7879      	ldrb	r1, [r7, #1]
 8000f00:	89fa      	ldrh	r2, [r7, #14]
 8000f02:	fa01 f202 	lsl.w	r2, r1, r2
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	605a      	str	r2, [r3, #4]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 8000f0c:	89fb      	ldrh	r3, [r7, #14]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	81fb      	strh	r3, [r7, #14]
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d9c9      	bls.n	8000eac <GPIO_ConfigOutput+0x20>
		}
	}
	return;
 8000f18:	bf00      	nop
}
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <GPIO_ConfigAF>:
 * @param[pin_flags] - (GPIO_FLAG_PINx | GPIO_FLAG_PINy)
 * @param[af] - alternate function number
 * @return - void
 */
void GPIO_ConfigAF(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags, GpioAF_t af)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
 8000f30:	4613      	mov	r3, r2
 8000f32:	707b      	strb	r3, [r7, #1]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	81fb      	strh	r3, [r7, #14]
 8000f38:	e035      	b.n	8000fa6 <GPIO_ConfigAF+0x82>
	{
		if (pin_flags >> pin_count & 1U)
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	fa42 f303 	asr.w	r3, r2, r3
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d02a      	beq.n	8000fa0 <GPIO_ConfigAF+0x7c>
		{
			// clear 4 AF bits and set new value
			p_GPIOx->AFR[pin_count / 8] &= ~(15UL << ((pin_count) * 4));
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	b298      	uxth	r0, r3
 8000f50:	4602      	mov	r2, r0
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	210f      	movs	r1, #15
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	ea02 0103 	and.w	r1, r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f100 0208 	add.w	r2, r0, #8
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			p_GPIOx->AFR[pin_count / 8] |= (af << ((pin_count % 8) * 4));
 8000f74:	89fb      	ldrh	r3, [r7, #14]
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	b298      	uxth	r0, r3
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	7879      	ldrb	r1, [r7, #1]
 8000f86:	89fa      	ldrh	r2, [r7, #14]
 8000f88:	f002 0207 	and.w	r2, r2, #7
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	4611      	mov	r1, r2
 8000f94:	4602      	mov	r2, r0
 8000f96:	4319      	orrs	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint16_t pin_count = 0; pin_count < 16; pin_count++)
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	81fb      	strh	r3, [r7, #14]
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d9c6      	bls.n	8000f3a <GPIO_ConfigAF+0x16>
		}
	}
	return;
 8000fac:	bf00      	nop
}
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <GPIO_TogglePin>:
 * @param[*p_GPIOx] - base address of gpiox peripheral
 * @param[pin] - pin number
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *p_GPIOx, GpioPinNumber_t pin)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
	p_GPIOx->ODR ^= 0x01U << pin;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695a      	ldr	r2, [r3, #20]
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	405a      	eors	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	615a      	str	r2, [r3, #20]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <RCC_CalculatePllclk>:

	return 0;
}

static uint32_t RCC_CalculatePllclk(uint32_t source)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <RCC_CalculatePllclk+0x5c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ff6:	81fb      	strh	r3, [r7, #14]
	;
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <RCC_CalculatePllclk+0x5c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	099b      	lsrs	r3, r3, #6
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001004:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <RCC_CalculatePllclk+0x5c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	0c1b      	lsrs	r3, r3, #16
 800100c:	b29b      	uxth	r3, r3
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	817b      	strh	r3, [r7, #10]
	;

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 8001014:	897b      	ldrh	r3, [r7, #10]
 8001016:	3301      	adds	r3, #1
 8001018:	b29b      	uxth	r3, r3
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	89ba      	ldrh	r2, [r7, #12]
 8001028:	fb02 f203 	mul.w	r2, r2, r3
 800102c:	897b      	ldrh	r3, [r7, #10]
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b07      	cmp	r3, #7
 8001052:	d822      	bhi.n	800109a <RCC_GetApbPrescaler+0x56>
 8001054:	a201      	add	r2, pc, #4	; (adr r2, 800105c <RCC_GetApbPrescaler+0x18>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	0800107d 	.word	0x0800107d
 8001060:	0800109b 	.word	0x0800109b
 8001064:	0800109b 	.word	0x0800109b
 8001068:	0800109b 	.word	0x0800109b
 800106c:	08001083 	.word	0x08001083
 8001070:	08001089 	.word	0x08001089
 8001074:	0800108f 	.word	0x0800108f
 8001078:	08001095 	.word	0x08001095
	{
	case (RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
		break;
 8001080:	e00b      	b.n	800109a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	60fb      	str	r3, [r7, #12]
		break;
 8001086:	e008      	b.n	800109a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 8001088:	2304      	movs	r3, #4
 800108a:	60fb      	str	r3, [r7, #12]
		break;
 800108c:	e005      	b.n	800109a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 800108e:	2308      	movs	r3, #8
 8001090:	60fb      	str	r3, [r7, #12]
		break;
 8001092:	e002      	b.n	800109a <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 8001094:	2310      	movs	r3, #16
 8001096:	60fb      	str	r3, [r7, #12]
		break;
 8001098:	bf00      	nop
	}

	return apb_prescaler;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	b29b      	uxth	r3, r3
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d840      	bhi.n	800113e <RCC_GetAhbPrescaler+0x92>
 80010bc:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <RCC_GetAhbPrescaler+0x18>)
 80010be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c2:	bf00      	nop
 80010c4:	08001105 	.word	0x08001105
 80010c8:	0800113f 	.word	0x0800113f
 80010cc:	0800113f 	.word	0x0800113f
 80010d0:	0800113f 	.word	0x0800113f
 80010d4:	0800113f 	.word	0x0800113f
 80010d8:	0800113f 	.word	0x0800113f
 80010dc:	0800113f 	.word	0x0800113f
 80010e0:	0800113f 	.word	0x0800113f
 80010e4:	0800110b 	.word	0x0800110b
 80010e8:	08001111 	.word	0x08001111
 80010ec:	08001117 	.word	0x08001117
 80010f0:	0800111d 	.word	0x0800111d
 80010f4:	08001123 	.word	0x08001123
 80010f8:	08001129 	.word	0x08001129
 80010fc:	0800112f 	.word	0x0800112f
 8001100:	08001137 	.word	0x08001137
	{
	case (RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
		break;
 8001108:	e019      	b.n	800113e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 800110a:	2302      	movs	r3, #2
 800110c:	60fb      	str	r3, [r7, #12]
		break;
 800110e:	e016      	b.n	800113e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 8001110:	2304      	movs	r3, #4
 8001112:	60fb      	str	r3, [r7, #12]
		break;
 8001114:	e013      	b.n	800113e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 8001116:	2308      	movs	r3, #8
 8001118:	60fb      	str	r3, [r7, #12]
		break;
 800111a:	e010      	b.n	800113e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 800111c:	2310      	movs	r3, #16
 800111e:	60fb      	str	r3, [r7, #12]
		break;
 8001120:	e00d      	b.n	800113e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 8001122:	2340      	movs	r3, #64	; 0x40
 8001124:	60fb      	str	r3, [r7, #12]
		break;
 8001126:	e00a      	b.n	800113e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	60fb      	str	r3, [r7, #12]
		break;
 800112c:	e007      	b.n	800113e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 800112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001132:	60fb      	str	r3, [r7, #12]
		break;
 8001134:	e003      	b.n	800113e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 8001136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113a:	60fb      	str	r3, [r7, #12]
		break;
 800113c:	bf00      	nop
	}

	return ahb_prescaler;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	b29b      	uxth	r3, r3
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <RCC_GetSysclk+0x54>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d00a      	beq.n	8001176 <RCC_GetSysclk+0x26>
 8001160:	2b08      	cmp	r3, #8
 8001162:	d81c      	bhi.n	800119e <RCC_GetSysclk+0x4e>
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <RCC_GetSysclk+0x1e>
 8001168:	2b04      	cmp	r3, #4
 800116a:	d002      	beq.n	8001172 <RCC_GetSysclk+0x22>
 800116c:	e017      	b.n	800119e <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <RCC_GetSysclk+0x58>)
 8001170:	e016      	b.n	80011a0 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 8001172:	2300      	movs	r3, #0
 8001174:	e014      	b.n	80011a0 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <RCC_GetSysclk+0x54>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <RCC_GetSysclk+0x3a>
 8001182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001186:	d005      	beq.n	8001194 <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 8001188:	e009      	b.n	800119e <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <RCC_GetSysclk+0x58>)
 800118c:	f7ff ff2a 	bl	8000fe4 <RCC_CalculatePllclk>
 8001190:	4603      	mov	r3, r0
 8001192:	e005      	b.n	80011a0 <RCC_GetSysclk+0x50>
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff ff25 	bl	8000fe4 <RCC_CalculatePllclk>
 800119a:	4603      	mov	r3, r0
 800119c:	e000      	b.n	80011a0 <RCC_GetSysclk+0x50>
	}

	return 0;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	00f42400 	.word	0x00f42400

080011ac <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 80011b2:	f7ff ffcd 	bl	8001150 <RCC_GetSysclk>
 80011b6:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <RCC_GetHclk+0x34>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff70 	bl	80010ac <RCC_GetAhbPrescaler>
 80011cc:	4603      	mov	r3, r0
 80011ce:	807b      	strh	r3, [r7, #2]
	return sysclk / ahb_prescaler;
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800

080011e4 <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 80011ee:	f7ff ffdd 	bl	80011ac <RCC_GetHclk>
 80011f2:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch (plck_x)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d002      	beq.n	8001200 <RCC_GetPclk+0x1c>
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d00d      	beq.n	800121a <RCC_GetPclk+0x36>
 80011fe:	e019      	b.n	8001234 <RCC_GetPclk+0x50>
	{
	case (1):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >>
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <RCC_GetPclk+0x60>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	0a9b      	lsrs	r3, r3, #10
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff18 	bl	8001044 <RCC_GetApbPrescaler>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE1_Pos);
		break;
 8001218:	e00c      	b.n	8001234 <RCC_GetPclk+0x50>

	case (2):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >>
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <RCC_GetPclk+0x60>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	0b5b      	lsrs	r3, r3, #13
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff0b 	bl	8001044 <RCC_GetApbPrescaler>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE2_Pos);
		break;
 8001232:	bf00      	nop
	}

	return hclk / apb_prescaler;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800

08001248 <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs *freqs)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	freqs->sysclk = RCC_GetSysclk();
 8001250:	f7ff ff7e 	bl	8001150 <RCC_GetSysclk>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 800125a:	f7ff ffa7 	bl	80011ac <RCC_GetHclk>
 800125e:	4602      	mov	r2, r0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff ffbd 	bl	80011e4 <RCC_GetPclk>
 800126a:	4602      	mov	r2, r0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 8001270:	2002      	movs	r0, #2
 8001272:	f7ff ffb7 	bl	80011e4 <RCC_GetPclk>
 8001276:	4602      	mov	r2, r0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60da      	str	r2, [r3, #12]

	return;
 800127c:	bf00      	nop
}
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <SysTick_Handler>:
		;
	return;
}

void SysTick_Handler (void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	systick++;
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Handler+0x18>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a03      	ldr	r2, [pc, #12]	; (800129c <SysTick_Handler+0x18>)
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	2000001c 	.word	0x2000001c

080012a0 <__NVIC_EnableIRQ>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <DMA_EnableDoubleBufferMode>:

} DMA_Handle_t;


static inline void DMA_EnableDoubleBufferMode(DMA_Stream_TypeDef *p_dma_streamx)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	p_dma_streamx->CR |= DMA_SxCR_DBM;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DMA_SetAddresPeri>:

static inline void DMA_SetAddresPeri(DMA_Stream_TypeDef *p_dma_streamx,volatile uint32_t *peri_add)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	p_dma_streamx->PAR = (uint32_t) peri_add;
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DMA_SetAddresMem0>:

static inline void DMA_SetAddresMem0(DMA_Stream_TypeDef *p_dma_streamx,uint32_t *mem0_add)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	p_dma_streamx->M0AR = (uint32_t) mem0_add;
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <DMA_SetAddresMem1>:

static inline void DMA_SetAddresMem1(DMA_Stream_TypeDef *p_dma_streamx,uint32_t *mem1_add)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	p_dma_streamx->M1AR = (uint32_t) mem1_add;
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	611a      	str	r2, [r3, #16]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <USART_InitClock>:
 * Init USART clock
 * @param[*p_handle_usart] - handler to usart struct
 * @return - void
 */
void USART_InitClock(USART_Handle_t *p_handle_usart)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	if (p_handle_usart->p_usartx == USART1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a25      	ldr	r2, [pc, #148]	; (80013f4 <USART_InitClock+0xa4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d112      	bne.n	8001388 <USART_InitClock+0x38>
	{
		RCC_CLOCK_USART1_ENABLE();
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <USART_InitClock+0xa8>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a24      	ldr	r2, [pc, #144]	; (80013f8 <USART_InitClock+0xa8>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
		RCC_RESET_USART1();
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <USART_InitClock+0xa8>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <USART_InitClock+0xa8>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	6253      	str	r3, [r2, #36]	; 0x24
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <USART_InitClock+0xa8>)
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <USART_InitClock+0xa8>)
 8001380:	f023 0310 	bic.w	r3, r3, #16
 8001384:	6253      	str	r3, [r2, #36]	; 0x24
	{
		RCC_CLOCK_USART6_ENABLE();
		RCC_RESET_USART6();
	}

	return;
 8001386:	e02f      	b.n	80013e8 <USART_InitClock+0x98>
	else if (p_handle_usart->p_usartx == USART2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <USART_InitClock+0xac>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d112      	bne.n	80013b8 <USART_InitClock+0x68>
		RCC_CLOCK_USART2_ENABLE();
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <USART_InitClock+0xa8>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <USART_InitClock+0xa8>)
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_USART2();
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <USART_InitClock+0xa8>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <USART_InitClock+0xa8>)
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <USART_InitClock+0xa8>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <USART_InitClock+0xa8>)
 80013b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80013b4:	6213      	str	r3, [r2, #32]
	return;
 80013b6:	e017      	b.n	80013e8 <USART_InitClock+0x98>
	else if (p_handle_usart->p_usartx == USART6)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <USART_InitClock+0xb0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d112      	bne.n	80013e8 <USART_InitClock+0x98>
		RCC_CLOCK_USART6_ENABLE();
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <USART_InitClock+0xa8>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <USART_InitClock+0xa8>)
 80013c8:	f043 0320 	orr.w	r3, r3, #32
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
		RCC_RESET_USART6();
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <USART_InitClock+0xa8>)
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <USART_InitClock+0xa8>)
 80013d4:	f043 0320 	orr.w	r3, r3, #32
 80013d8:	6253      	str	r3, [r2, #36]	; 0x24
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <USART_InitClock+0xa8>)
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <USART_InitClock+0xa8>)
 80013e0:	f023 0320 	bic.w	r3, r3, #32
 80013e4:	6253      	str	r3, [r2, #36]	; 0x24
	return;
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
}
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40004400 	.word	0x40004400
 8001400:	40011400 	.word	0x40011400

08001404 <USART_InitGpioPins>:
 * Init GPIO pins for usart peripheral
 * @param[*p_handle_usart] - handler to usart struct
 * @return - void
 */
void USART_InitGpioPins(USART_Handle_t *p_handle_usart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

	if(p_handle_usart->p_usartx == USART2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <USART_InitGpioPins+0x40>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d111      	bne.n	800143a <USART_InitGpioPins+0x36>
	{
		// PA2 RX PA3 TX
		GPIO_ConfigBasic(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioModeAF, kGpioPUPDNoPull);
 8001416:	2300      	movs	r3, #0
 8001418:	2202      	movs	r2, #2
 800141a:	210c      	movs	r1, #12
 800141c:	480a      	ldr	r0, [pc, #40]	; (8001448 <USART_InitGpioPins+0x44>)
 800141e:	f7ff fce7 	bl	8000df0 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioOTOpenDrain, kGpioSpeedVeryHigh);
 8001422:	2303      	movs	r3, #3
 8001424:	2201      	movs	r2, #1
 8001426:	210c      	movs	r1, #12
 8001428:	4807      	ldr	r0, [pc, #28]	; (8001448 <USART_InitGpioPins+0x44>)
 800142a:	f7ff fd2f 	bl	8000e8c <GPIO_ConfigOutput>
		GPIO_ConfigAF(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioAF7);
 800142e:	2207      	movs	r2, #7
 8001430:	210c      	movs	r1, #12
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <USART_InitGpioPins+0x44>)
 8001434:	f7ff fd76 	bl	8000f24 <GPIO_ConfigAF>

	}

	return;
 8001438:	bf00      	nop
 800143a:	bf00      	nop
}
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40004400 	.word	0x40004400
 8001448:	40020000 	.word	0x40020000

0800144c <USART_SetBaudRate>:
 * @param[oversampling] - oversampling method 8/16
 * @return - void
 */
void USART_SetBaudRate(USART_Handle_t *p_handle_usart, uint32_t baud_rate,
		UsartOversampling_t oversampling)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	; 0x30
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	71fb      	strb	r3, [r7, #7]
	uint16_t baud_div_mantissa;
	uint8_t baud_div_fraction;

	// set oversampling

	p_handle_usart->p_usartx->CR1 |= (oversampling << USART_CR1_OVER8_Pos);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	03db      	lsls	r3, r3, #15
 8001464:	4619      	mov	r1, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	60da      	str	r2, [r3, #12]
	// in equation we have 8 * (2 - OVER8)
	uint8_t usart_divmulti =
			8
					* (2
							- (1U
									& (p_handle_usart->p_usartx->CR1
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
											>> USART_CR1_OVER8_Pos)));
 8001474:	0bdb      	lsrs	r3, r3, #15
									& (p_handle_usart->p_usartx->CR1
 8001476:	f003 0301 	and.w	r3, r3, #1
							- (1U
 800147a:	f1c3 0302 	rsb	r3, r3, #2
	uint8_t usart_divmulti =
 800147e:	b2db      	uxtb	r3, r3
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	// read clock values from rcc registers
	RCC_GetClockFrequencies(&clock_freqs);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fedc 	bl	8001248 <RCC_GetClockFrequencies>

	if (p_handle_usart->p_usartx == USART2)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a35      	ldr	r2, [pc, #212]	; (800156c <USART_SetBaudRate+0x120>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d102      	bne.n	80014a0 <USART_SetBaudRate+0x54>
	{
		pclk_freq = clock_freqs.pclk1;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800149e:	e001      	b.n	80014a4 <USART_SetBaudRate+0x58>
	}
	else
	{
		// usart1 and usart6 are on apb2
		pclk_freq = clock_freqs.pclk2;
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	baud_div = ((float) pclk_freq / (baud_rate * usart_divmulti));
 80014a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	baud_div_mantissa = baud_div;
 80014c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014d0:	ee17 3a90 	vmov	r3, s15
 80014d4:	857b      	strh	r3, [r7, #42]	; 0x2a
	// rounding number to get correct fraction
	baud_div_fraction = round((baud_div - baud_div_mantissa) * usart_divmulti);
 80014d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80014e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f8:	ee17 0a90 	vmov	r0, s15
 80014fc:	f7fe ffce 	bl	800049c <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	ec43 2b10 	vmov	d0, r2, r3
 8001508:	f000 fa2a 	bl	8001960 <round>
 800150c:	ec53 2b10 	vmov	r2, r3, d0
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff f81a 	bl	800054c <__aeabi_d2uiz>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	// if after rounding we have value bigger or equal to oversampling then we
	// need to carry +1 to mantissa and set fraction to 0. like 50,99 -> 51;
	if (baud_div_fraction >= usart_divmulti)
 800151e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001522:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001526:	429a      	cmp	r2, r3
 8001528:	d305      	bcc.n	8001536 <USART_SetBaudRate+0xea>
	{
		baud_div_fraction = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		baud_div_mantissa++;
 8001530:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001532:	3301      	adds	r3, #1
 8001534:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	// insert values to brr register
	p_handle_usart->p_usartx->BRR = 0;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
			<< USART_BRR_DIV_Mantissa_Pos);
 8001544:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	4619      	mov	r1, r3
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6899      	ldr	r1, [r3, #8]
			<< USART_BRR_DIV_Fraction_Pos);
 8001558:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	609a      	str	r2, [r3, #8]
}
 8001564:	bf00      	nop
 8001566:	3730      	adds	r7, #48	; 0x30
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40004400 	.word	0x40004400

08001570 <USART_EnableIRQs>:
 * @param[CR3_flags] - IRQ flags in CR3
 * @return - void
 */
void USART_EnableIRQs(USART_Handle_t *p_handle_usart, uint32_t CR1_flags,
		uint32_t CR2_flags, uint32_t CR3_flags)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 800157e:	2026      	movs	r0, #38	; 0x26
 8001580:	f7ff fe8e 	bl	80012a0 <__NVIC_EnableIRQ>
	// CR1 - PEIE,TXEIE,TCIE,RXNEIE,IDLEIE
	if (CR1_flags)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <USART_EnableIRQs+0x2a>
	{
		p_handle_usart->p_usartx->CR1 |= CR1_flags;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68d9      	ldr	r1, [r3, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	430a      	orrs	r2, r1
 8001598:	60da      	str	r2, [r3, #12]
	}

	// CR2 - LBDIE
	if (CR2_flags)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <USART_EnableIRQs+0x40>
	{
		p_handle_usart->p_usartx->CR2 |= CR2_flags;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6919      	ldr	r1, [r3, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	611a      	str	r2, [r3, #16]
	}

	// CR3 - CTSIE, EIE
	if (CR3_flags)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <USART_EnableIRQs+0x58>
	{
		p_handle_usart->p_usartx->CR1 |= CR3_flags;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68d9      	ldr	r1, [r3, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]
	}

	return;
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
}
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <USART_SetBasicParameters>:
 * @return - void
 */
void USART_SetBasicParameters(USART_Handle_t *p_handle_usart,
		UsartWordLenght_t word_lenght, UsartStopBits_t stop_bits,
		UsartParity_t parity)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	707b      	strb	r3, [r7, #1]
	//	enable the USART by writing the UE bit in USART_CR1 register to 1.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_UE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015f8:	60da      	str	r2, [r3, #12]
	//	program the M bit in USART_CR1 to define the word length.
	p_handle_usart->p_usartx->CR1 |= (word_lenght << USART_CR1_M_Pos);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	031b      	lsls	r3, r3, #12
 8001604:	4619      	mov	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	60da      	str	r2, [r3, #12]
	//	program the number of stop bits in USART_CR2.
	p_handle_usart->p_usartx->CR1 |= (stop_bits << USART_CR2_STOP_Pos);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	78bb      	ldrb	r3, [r7, #2]
 8001616:	031b      	lsls	r3, r3, #12
 8001618:	4619      	mov	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	60da      	str	r2, [r3, #12]
	// program parity control
	if (parity != kUsartNoParity)
 8001622:	787b      	ldrb	r3, [r7, #1]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d011      	beq.n	800164c <USART_SetBasicParameters+0x7c>
	{
		p_handle_usart->p_usartx->CR1 |= USART_CR1_PCE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001636:	60da      	str	r2, [r3, #12]
		p_handle_usart->p_usartx->CR1 |= (parity << USART_CR1_PS_Pos);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	787b      	ldrb	r3, [r7, #1]
 8001640:	025b      	lsls	r3, r3, #9
 8001642:	4619      	mov	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]
	}

	//clear TC flag
	p_handle_usart->p_usartx->SR &= ~(USART_SR_TC);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800165a:	601a      	str	r2, [r3, #0]
	return;
 800165c:	bf00      	nop
}
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <USART_ConfigureReceiveDMA>:
 * @param[*p_data_buffer1] - NULL/pointer to second buffer
 * @return - void
 */
void USART_ConfigureReceiveDMA(USART_Handle_t *p_handle_usart,
		uint8_t *p_data_buffer0, uint8_t *p_data_buffer1)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
	// enable receive mode
	p_handle_usart->p_usartx->CR1 |= USART_CR1_RE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0204 	orr.w	r2, r2, #4
 8001682:	60da      	str	r2, [r3, #12]

	// configure double buffer if neccesary
	if (p_data_buffer1 != NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00d      	beq.n	80016a6 <USART_ConfigureReceiveDMA+0x3e>
	{
		DMA_SetAddresMem1(p_handle_usart->usart_dma.p_dma_stream_rx, (uint32_t*)p_data_buffer1);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe4f 	bl	8001334 <DMA_SetAddresMem1>
		DMA_EnableDoubleBufferMode(p_handle_usart->usart_dma.p_dma_stream_rx);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fe1e 	bl	80012dc <DMA_EnableDoubleBufferMode>
		p_handle_usart->rx_status = kUsartRxDma;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2202      	movs	r2, #2
 80016a4:	735a      	strb	r2, [r3, #13]
	}
	// write source and destinations
	DMA_SetAddresPeri(p_handle_usart->usart_dma.p_dma_stream_rx, &(p_handle_usart->p_usartx->DR));
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3304      	adds	r3, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4610      	mov	r0, r2
 80016b4:	f7ff fe22 	bl	80012fc <DMA_SetAddresPeri>
	DMA_SetAddresMem0(p_handle_usart->usart_dma.p_dma_stream_rx, (uint32_t*)p_data_buffer0);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fe2a 	bl	8001318 <DMA_SetAddresMem0>

	// configure irq flags
	p_handle_usart->usart_dma.p_dma_stream_rx->CR |= DMA_SxCR_TCIE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f042 0210 	orr.w	r2, r2, #16
 80016d2:	601a      	str	r2, [r3, #0]
	USART_EnableIRQs(p_handle_usart, USART_CR1_RXNEIE, 0, 0);
 80016d4:	2300      	movs	r3, #0
 80016d6:	2200      	movs	r2, #0
 80016d8:	2120      	movs	r1, #32
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff ff48 	bl	8001570 <USART_EnableIRQs>
	return;
 80016e0:	bf00      	nop
}
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <USART_ReceiveDMAStart>:
 * @param[*p_handle_usart] - handler to usart struct
 * @param[data_lenght] - after that many bytes irq is triggered
 * @return - void
 */
void USART_ReceiveDMAStart(USART_Handle_t *p_handle_usart, uint32_t data_lenght)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	// check if line is not receiving right now in other mode
	if (p_handle_usart->rx_status != kUsartRxIdle
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7b5b      	ldrb	r3, [r3, #13]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <USART_ReceiveDMAStart+0x22>
			&& p_handle_usart->rx_status != kUsartRxDma)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7b5b      	ldrb	r3, [r3, #13]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d003      	beq.n	800170a <USART_ReceiveDMAStart+0x22>
	{
		p_handle_usart->error = kUsartErrorRxBusy;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2202      	movs	r2, #2
 8001706:	731a      	strb	r2, [r3, #12]
		return;
 8001708:	e017      	b.n	800173a <USART_ReceiveDMAStart+0x52>
	}
	// enable dma receive
	p_handle_usart->p_usartx->CR3 |= USART_CR3_DMAR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001718:	615a      	str	r2, [r3, #20]

	// configure the total number of bytes to be transferred to the DMA
	p_handle_usart->usart_dma.p_dma_stream_rx->NDTR = data_lenght;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	605a      	str	r2, [r3, #4]

	// activate DMA channel transfer
	p_handle_usart->rx_status = kUsartRxDma;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2202      	movs	r2, #2
 8001726:	735a      	strb	r2, [r3, #13]
	p_handle_usart->usart_dma.p_dma_stream_rx->CR |= DMA_SxCR_EN;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

	return;
 8001738:	bf00      	nop
}
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <USART_DMAReceiveDoneCallback>:
 * Clear DMA status , it is required to use both polling and DMA in one program
 * @param[*p_handle_usart] - handler to usart struct
 * @return - void
 */
void USART_DMAReceiveDoneCallback(USART_Handle_t *p_handle_usart)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if (!(p_handle_usart->usart_dma.p_dma_stream_rx->CR & DMA_SxCR_CIRC))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d103      	bne.n	8001762 <USART_DMAReceiveDoneCallback+0x1e>
	{
		p_handle_usart->rx_status = kUsartRxIdle;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	735a      	strb	r2, [r3, #13]
	}
	return;
 8001760:	bf00      	nop
 8001762:	bf00      	nop
}
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <USART_Transmit>:
 * @param[data_lenght] - number of bytes to send
 * @return - void
 */
void USART_Transmit(USART_Handle_t *p_handle_usart, uint8_t *p_data_buffer,
		uint32_t data_lenght)
{
 800176e:	b480      	push	{r7}
 8001770:	b087      	sub	sp, #28
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
	// check if dma transfer is not ongoing
	if (p_handle_usart->tx_status != kUsartTxIdle)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	7b9b      	ldrb	r3, [r3, #14]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <USART_Transmit+0x1c>
	{
		p_handle_usart->error = kUsartErrorTxBusy;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2203      	movs	r2, #3
 8001786:	731a      	strb	r2, [r3, #12]
		return;
 8001788:	e03b      	b.n	8001802 <USART_Transmit+0x94>
	}

	// disable dma and put the status
	p_handle_usart->p_usartx->CR3 &= ~(USART_CR3_DMAT);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001798:	615a      	str	r2, [r3, #20]
	p_handle_usart->tx_status = kUsartTxPolling;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2201      	movs	r2, #1
 800179e:	739a      	strb	r2, [r3, #14]

	uint32_t tx_data_to_send = data_lenght;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	617b      	str	r3, [r7, #20]

	//	6. Set the TE bit in USART_CR1 to send an idle frame as first
	// transmission.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_TE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0208 	orr.w	r2, r2, #8
 80017b2:	60da      	str	r2, [r3, #12]
	//	7. Write the data to send in the USART_DR register (this clears the TXE
	// bit). Repeat this 	for each data to be transmitted in case of single
	// buffer.
	while (tx_data_to_send > 0)
 80017b4:	e022      	b.n	80017fc <USART_Transmit+0x8e>
	{
		// wait until data register is empty
		while (!(p_handle_usart->p_usartx->SR & USART_SR_TXE))
 80017b6:	bf00      	nop
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f8      	beq.n	80017b8 <USART_Transmit+0x4a>
			;

		// put data in data register
		p_handle_usart->p_usartx->DR = p_data_buffer[data_lenght
				- tx_data_to_send];
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	1ad3      	subs	r3, r2, r3
		p_handle_usart->p_usartx->DR = p_data_buffer[data_lenght
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	4413      	add	r3, r2
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]

		// change counter
		tx_data_to_send--;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3b01      	subs	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]

		//	8. After writing the last data into the USART_DR register, wait until
		// TC=1. This indicates 	that the transmission of the last frame is
		// complete. This is required for instance when 	the USART is disabled or
		// enters the Halt mode to avoid corrupting the last 	transmission
		if (tx_data_to_send == 0)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10b      	bne.n	80017fc <USART_Transmit+0x8e>
		{
			// check if data transfer is finished
			while (!(p_handle_usart->p_usartx->SR & USART_SR_TC))
 80017e4:	bf00      	nop
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f8      	beq.n	80017e6 <USART_Transmit+0x78>
				;
			p_handle_usart->tx_status = kUsartTxIdle;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	739a      	strb	r2, [r3, #14]
			return;
 80017fa:	e002      	b.n	8001802 <USART_Transmit+0x94>
	while (tx_data_to_send > 0)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1d9      	bne.n	80017b6 <USART_Transmit+0x48>
		}
	}
}
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <USART_ConfigureTransmitDMA>:
 * @param[*p_data_buffer1] - NULL/pointer to second buffer
 * @return - void
 */
void USART_ConfigureTransmitDMA(USART_Handle_t *p_handle_usart,
		uint8_t *p_data_buffer0, uint8_t *p_data_buffer1)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
	// enable transmit mode
	p_handle_usart->p_usartx->CR1 |= USART_CR1_TE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0208 	orr.w	r2, r2, #8
 8001826:	60da      	str	r2, [r3, #12]

	// configure double buffer if neccesary
	if (p_data_buffer1 != NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <USART_ConfigureTransmitDMA+0x34>
	{
		DMA_SetAddresMem1(p_handle_usart->usart_dma.p_dma_stream_tx, (uint32_t*)p_data_buffer1);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fd7d 	bl	8001334 <DMA_SetAddresMem1>
		p_handle_usart->tx_status = kUsartTxDma;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2202      	movs	r2, #2
 800183e:	739a      	strb	r2, [r3, #14]
	}

	// assign peripheral address and mem address to dma registers
	DMA_SetAddresPeri(p_handle_usart->usart_dma.p_dma_stream_tx, &(p_handle_usart->p_usartx->DR));
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3304      	adds	r3, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4610      	mov	r0, r2
 800184e:	f7ff fd55 	bl	80012fc <DMA_SetAddresPeri>
	DMA_SetAddresMem0(p_handle_usart->usart_dma.p_dma_stream_tx, (uint32_t*)p_data_buffer0);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	68b9      	ldr	r1, [r7, #8]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fd5d 	bl	8001318 <DMA_SetAddresMem0>

	// configure irq flags
	//USART_EnableIRQs(p_handle_usart, USART_CR1_TCIE, 0, 0);
	p_handle_usart->usart_dma.p_dma_stream_tx->CR |= DMA_SxCR_TCIE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f042 0210 	orr.w	r2, r2, #16
 800186c:	601a      	str	r2, [r3, #0]

	return;
 800186e:	bf00      	nop
}
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <USART_TransmitDMAStart>:
 * @param[data_lenght] - after that many bytes irq is triggered
 * @return - void
 */
void USART_TransmitDMAStart(USART_Handle_t *p_handle_usart,
		uint32_t data_lenght)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	// should be idle to start new dma
	if (p_handle_usart->tx_status != kUsartTxIdle
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7b9b      	ldrb	r3, [r3, #14]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d007      	beq.n	8001898 <USART_TransmitDMAStart+0x22>
			&& p_handle_usart->tx_status != kUsartTxDma)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7b9b      	ldrb	r3, [r3, #14]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d003      	beq.n	8001898 <USART_TransmitDMAStart+0x22>
	{
		p_handle_usart->error = kUsartErrorTxBusy;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2203      	movs	r2, #3
 8001894:	731a      	strb	r2, [r3, #12]
		return;
 8001896:	e01c      	b.n	80018d2 <USART_TransmitDMAStart+0x5c>
	}
	// enable dma transfer
	p_handle_usart->p_usartx->CR3 |= USART_CR3_DMAT;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018a6:	615a      	str	r2, [r3, #20]
	// configure the total number of bytes to be transferred to the DMA
	p_handle_usart->usart_dma.p_dma_stream_tx->NDTR = data_lenght;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	605a      	str	r2, [r3, #4]
	// clear tc bit
	p_handle_usart->p_usartx->SR &= ~(USART_SR_TC);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018be:	601a      	str	r2, [r3, #0]
	// activate DMA channel transfer
	p_handle_usart->usart_dma.p_dma_stream_tx->CR |= DMA_SxCR_EN;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

	return;
 80018d0:	bf00      	nop
}
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <USART_DMATransmitDoneCallback>:
 * Clear DMA status , it is required to use both polling and DMA in one program
 * @param[*p_handle_usart] - handler to usart struct
 * @return - void
 */
void USART_DMATransmitDoneCallback(USART_Handle_t *p_handle_usart)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	if (!(p_handle_usart->usart_dma.p_dma_stream_tx->CR & DMA_SxCR_CIRC))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <USART_DMATransmitDoneCallback+0x1e>
	{
		p_handle_usart->tx_status = kUsartTxIdle;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	739a      	strb	r2, [r3, #14]
	}
	return;
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
}
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <__libc_init_array>:
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	4d0d      	ldr	r5, [pc, #52]	; (8001940 <__libc_init_array+0x38>)
 800190c:	4c0d      	ldr	r4, [pc, #52]	; (8001944 <__libc_init_array+0x3c>)
 800190e:	1b64      	subs	r4, r4, r5
 8001910:	10a4      	asrs	r4, r4, #2
 8001912:	2600      	movs	r6, #0
 8001914:	42a6      	cmp	r6, r4
 8001916:	d109      	bne.n	800192c <__libc_init_array+0x24>
 8001918:	4d0b      	ldr	r5, [pc, #44]	; (8001948 <__libc_init_array+0x40>)
 800191a:	4c0c      	ldr	r4, [pc, #48]	; (800194c <__libc_init_array+0x44>)
 800191c:	f000 f866 	bl	80019ec <_init>
 8001920:	1b64      	subs	r4, r4, r5
 8001922:	10a4      	asrs	r4, r4, #2
 8001924:	2600      	movs	r6, #0
 8001926:	42a6      	cmp	r6, r4
 8001928:	d105      	bne.n	8001936 <__libc_init_array+0x2e>
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001930:	4798      	blx	r3
 8001932:	3601      	adds	r6, #1
 8001934:	e7ee      	b.n	8001914 <__libc_init_array+0xc>
 8001936:	f855 3b04 	ldr.w	r3, [r5], #4
 800193a:	4798      	blx	r3
 800193c:	3601      	adds	r6, #1
 800193e:	e7f2      	b.n	8001926 <__libc_init_array+0x1e>
 8001940:	08001a58 	.word	0x08001a58
 8001944:	08001a58 	.word	0x08001a58
 8001948:	08001a58 	.word	0x08001a58
 800194c:	08001a5c 	.word	0x08001a5c

08001950 <memset>:
 8001950:	4402      	add	r2, r0
 8001952:	4603      	mov	r3, r0
 8001954:	4293      	cmp	r3, r2
 8001956:	d100      	bne.n	800195a <memset+0xa>
 8001958:	4770      	bx	lr
 800195a:	f803 1b01 	strb.w	r1, [r3], #1
 800195e:	e7f9      	b.n	8001954 <memset+0x4>

08001960 <round>:
 8001960:	ec51 0b10 	vmov	r0, r1, d0
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800196a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800196e:	2c13      	cmp	r4, #19
 8001970:	ee10 2a10 	vmov	r2, s0
 8001974:	460b      	mov	r3, r1
 8001976:	dc19      	bgt.n	80019ac <round+0x4c>
 8001978:	2c00      	cmp	r4, #0
 800197a:	da09      	bge.n	8001990 <round+0x30>
 800197c:	3401      	adds	r4, #1
 800197e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8001982:	d103      	bne.n	800198c <round+0x2c>
 8001984:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8001988:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800198c:	2100      	movs	r1, #0
 800198e:	e028      	b.n	80019e2 <round+0x82>
 8001990:	4d15      	ldr	r5, [pc, #84]	; (80019e8 <round+0x88>)
 8001992:	4125      	asrs	r5, r4
 8001994:	ea01 0605 	and.w	r6, r1, r5
 8001998:	4332      	orrs	r2, r6
 800199a:	d00e      	beq.n	80019ba <round+0x5a>
 800199c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019a0:	fa42 f404 	asr.w	r4, r2, r4
 80019a4:	4423      	add	r3, r4
 80019a6:	ea23 0305 	bic.w	r3, r3, r5
 80019aa:	e7ef      	b.n	800198c <round+0x2c>
 80019ac:	2c33      	cmp	r4, #51	; 0x33
 80019ae:	dd07      	ble.n	80019c0 <round+0x60>
 80019b0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80019b4:	d101      	bne.n	80019ba <round+0x5a>
 80019b6:	f7fe fc13 	bl	80001e0 <__adddf3>
 80019ba:	ec41 0b10 	vmov	d0, r0, r1
 80019be:	bd70      	pop	{r4, r5, r6, pc}
 80019c0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80019c4:	f04f 35ff 	mov.w	r5, #4294967295
 80019c8:	40f5      	lsrs	r5, r6
 80019ca:	4228      	tst	r0, r5
 80019cc:	d0f5      	beq.n	80019ba <round+0x5a>
 80019ce:	2101      	movs	r1, #1
 80019d0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80019d4:	fa01 f404 	lsl.w	r4, r1, r4
 80019d8:	1912      	adds	r2, r2, r4
 80019da:	bf28      	it	cs
 80019dc:	185b      	addcs	r3, r3, r1
 80019de:	ea22 0105 	bic.w	r1, r2, r5
 80019e2:	4608      	mov	r0, r1
 80019e4:	4619      	mov	r1, r3
 80019e6:	e7e8      	b.n	80019ba <round+0x5a>
 80019e8:	000fffff 	.word	0x000fffff

080019ec <_init>:
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ee:	bf00      	nop
 80019f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f2:	bc08      	pop	{r3}
 80019f4:	469e      	mov	lr, r3
 80019f6:	4770      	bx	lr

080019f8 <_fini>:
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fa:	bf00      	nop
 80019fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fe:	bc08      	pop	{r3}
 8001a00:	469e      	mov	lr, r3
 8001a02:	4770      	bx	lr
