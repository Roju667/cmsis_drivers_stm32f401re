
cmsis_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000618  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007ac  080007b4  000107b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007ac  080007ac  000107b4  2**0
                  CONTENTS
  4 .ARM          00000000  080007ac  080007ac  000107b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007ac  080007b4  000107b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007ac  080007ac  000107ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007b0  080007b0  000107b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007b4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000107b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017ef  00000000  00000000  000107e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000680  00000000  00000000  00011fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  00012658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b0  00000000  00000000  00012750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e13f  00000000  00000000  00012800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000175a  00000000  00000000  0002093f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050db5  00000000  00000000  00022099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00072e4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000278  00000000  00000000  00072ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000794 	.word	0x08000794

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000794 	.word	0x08000794

080001d4 <main>:


void GPIOConfig (void);

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	GPIOConfig();
 80001da:	f000 f817 	bl	800020c <GPIOConfig>
    /* Loop forever */
	Pwr_EnterSleepMode(kWFI);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 fa98 	bl	8000714 <Pwr_EnterSleepMode>
	while(1)
	{
		for(uint32_t i = 0; i < 100000; i++)
 80001e4:	2300      	movs	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	e002      	b.n	80001f0 <main+0x1c>
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	3301      	adds	r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a04      	ldr	r2, [pc, #16]	; (8000204 <main+0x30>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d9f8      	bls.n	80001ea <main+0x16>
		{

		}
		GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80001f8:	2105      	movs	r1, #5
 80001fa:	4803      	ldr	r0, [pc, #12]	; (8000208 <main+0x34>)
 80001fc:	f000 fa5c 	bl	80006b8 <GPIO_TogglePin>
		for(uint32_t i = 0; i < 100000; i++)
 8000200:	e7f0      	b.n	80001e4 <main+0x10>
 8000202:	bf00      	nop
 8000204:	0001869f 	.word	0x0001869f
 8000208:	40020000 	.word	0x40020000

0800020c <GPIOConfig>:
	}
}

void GPIOConfig (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_EXTI_FT;
 8000212:	2304      	movs	r3, #4
 8000214:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.PinNumber = GPIO_PIN_13;
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIOx.pGPIOx = GPIOC;
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <GPIOConfig+0x3c>)
 800021c:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f8bb 	bl	800039c <GPIO_InitPin>

	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 8000226:	2301      	movs	r3, #1
 8000228:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 800022a:	2305      	movs	r3, #5
 800022c:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 800022e:	2300      	movs	r3, #0
 8000230:	72bb      	strb	r3, [r7, #10]
	GPIOx.pGPIOx = GPIOA;
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <GPIOConfig+0x40>)
 8000234:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f8af 	bl	800039c <GPIO_InitPin>

	return;
 800023e:	bf00      	nop
}
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40020800 	.word	0x40020800
 800024c:	40020000 	.word	0x40020000

08000250 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000254:	2105      	movs	r1, #5
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <EXTI15_10_IRQHandler+0x18>)
 8000258:	f000 fa2e 	bl	80006b8 <GPIO_TogglePin>
	GPIO_ClearPendingEXTIFlag(GPIO_PIN_13);
 800025c:	200d      	movs	r0, #13
 800025e:	f000 fa41 	bl	80006e4 <GPIO_ClearPendingEXTIFlag>
	return;
 8000262:	bf00      	nop
}
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40020000 	.word	0x40020000

0800026c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <SystemInit+0x20>)
 8000272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <SystemInit+0x20>)
 8000278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800027c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000294:	f7ff ffea 	bl	800026c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 fa45 	bl	800074c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ff87 	bl	80001d4 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	080007b4 	.word	0x080007b4
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
static void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a24      	ldr	r2, [pc, #144]	; (8000380 <GPIO_ClockEnable+0x9c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_ClockEnable+0x1e>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 80002f4:	4b23      	ldr	r3, [pc, #140]	; (8000384 <GPIO_ClockEnable+0xa0>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a22      	ldr	r2, [pc, #136]	; (8000384 <GPIO_ClockEnable+0xa0>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000300:	e035      	b.n	800036e <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOB)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a20      	ldr	r2, [pc, #128]	; (8000388 <GPIO_ClockEnable+0xa4>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_ClockEnable+0x34>
	{
		RCC_CLOCK_GPIOB_ENABLE();
 800030a:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <GPIO_ClockEnable+0xa0>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a1d      	ldr	r2, [pc, #116]	; (8000384 <GPIO_ClockEnable+0xa0>)
 8000310:	f043 0302 	orr.w	r3, r3, #2
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
 8000316:	e02a      	b.n	800036e <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOC)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a1c      	ldr	r2, [pc, #112]	; (800038c <GPIO_ClockEnable+0xa8>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_ClockEnable+0x4a>
	{
		RCC_CLOCK_GPIOC_ENABLE();
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <GPIO_ClockEnable+0xa0>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a17      	ldr	r2, [pc, #92]	; (8000384 <GPIO_ClockEnable+0xa0>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
 800032c:	e01f      	b.n	800036e <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOD)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <GPIO_ClockEnable+0xac>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_ClockEnable+0x60>
	{
		RCC_CLOCK_GPIOD_ENABLE();
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <GPIO_ClockEnable+0xa0>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <GPIO_ClockEnable+0xa0>)
 800033c:	f043 0308 	orr.w	r3, r3, #8
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
 8000342:	e014      	b.n	800036e <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOE)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a13      	ldr	r2, [pc, #76]	; (8000394 <GPIO_ClockEnable+0xb0>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_ClockEnable+0x76>
	{
		RCC_CLOCK_GPIOE_ENABLE();
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <GPIO_ClockEnable+0xa0>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a0c      	ldr	r2, [pc, #48]	; (8000384 <GPIO_ClockEnable+0xa0>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
 8000358:	e009      	b.n	800036e <GPIO_ClockEnable+0x8a>
	}
	else if (GPIO == GPIOH)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <GPIO_ClockEnable+0xb4>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d105      	bne.n	800036e <GPIO_ClockEnable+0x8a>
	{
		RCC_CLOCK_GPIOH_ENABLE();
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <GPIO_ClockEnable+0xa0>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <GPIO_ClockEnable+0xa0>)
 8000368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800036e:	f3bf 8f4f 	dsb	sy
}
 8000372:	bf00      	nop

	//this operation is unnecessary here because configuration library is taking more than 2 clock cycles
	//between clock enable and configuring register, i leave it here to remind myself that stmf401x has
	//a limitation that is described in errata point 2.1.6
	__DSB();
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40020000 	.word	0x40020000
 8000384:	40023800 	.word	0x40023800
 8000388:	40020400 	.word	0x40020400
 800038c:	40020800 	.word	0x40020800
 8000390:	40020c00 	.word	0x40020c00
 8000394:	40021000 	.word	0x40021000
 8000398:	40021c00 	.word	0x40021c00

0800039c <GPIO_InitPin>:
 *
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 800039c:	b590      	push	{r4, r7, lr}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]

	//enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff9b 	bl	80002e4 <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	795b      	ldrb	r3, [r3, #5]
 80003b2:	2b03      	cmp	r3, #3
 80003b4:	d81f      	bhi.n	80003f6 <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
	hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	791b      	ldrb	r3, [r3, #4]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	2103      	movs	r1, #3
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	43db      	mvns	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	400a      	ands	r2, r1
 80003d2:	601a      	str	r2, [r3, #0]
	hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	795b      	ldrb	r3, [r3, #5]
 80003de:	4619      	mov	r1, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	4619      	mov	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	e0a9      	b.n	800054a <GPIO_InitPin+0x1ae>
	else
	{
		//IRQ mode

		//set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	2103      	movs	r1, #3
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	4619      	mov	r1, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	400a      	ands	r2, r1
 8000412:	601a      	str	r2, [r3, #0]
		//interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000414:	4b9e      	ldr	r3, [pc, #632]	; (8000690 <GPIO_InitPin+0x2f4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	7912      	ldrb	r2, [r2, #4]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a9a      	ldr	r2, [pc, #616]	; (8000690 <GPIO_InitPin+0x2f4>)
 8000426:	430b      	orrs	r3, r1
 8000428:	6013      	str	r3, [r2, #0]

		//rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	2b04      	cmp	r3, #4
 8000430:	d003      	beq.n	800043a <GPIO_InitPin+0x9e>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	795b      	ldrb	r3, [r3, #5]
 8000436:	2b06      	cmp	r3, #6
 8000438:	d10a      	bne.n	8000450 <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 800043a:	4b95      	ldr	r3, [pc, #596]	; (8000690 <GPIO_InitPin+0x2f4>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	7912      	ldrb	r2, [r2, #4]
 8000442:	4611      	mov	r1, r2
 8000444:	2201      	movs	r2, #1
 8000446:	408a      	lsls	r2, r1
 8000448:	4611      	mov	r1, r2
 800044a:	4a91      	ldr	r2, [pc, #580]	; (8000690 <GPIO_InitPin+0x2f4>)
 800044c:	430b      	orrs	r3, r1
 800044e:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	2b05      	cmp	r3, #5
 8000456:	d003      	beq.n	8000460 <GPIO_InitPin+0xc4>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b06      	cmp	r3, #6
 800045e:	d10a      	bne.n	8000476 <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000460:	4b8b      	ldr	r3, [pc, #556]	; (8000690 <GPIO_InitPin+0x2f4>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	7912      	ldrb	r2, [r2, #4]
 8000468:	4611      	mov	r1, r2
 800046a:	2201      	movs	r2, #1
 800046c:	408a      	lsls	r2, r1
 800046e:	4611      	mov	r1, r2
 8000470:	4a87      	ldr	r2, [pc, #540]	; (8000690 <GPIO_InitPin+0x2f4>)
 8000472:	430b      	orrs	r3, r1
 8000474:	6093      	str	r3, [r2, #8]
		}

		//enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	2b04      	cmp	r3, #4
 800047c:	d80c      	bhi.n	8000498 <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 800047e:	4b85      	ldr	r3, [pc, #532]	; (8000694 <GPIO_InitPin+0x2f8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7912      	ldrb	r2, [r2, #4]
 8000486:	3206      	adds	r2, #6
 8000488:	2101      	movs	r1, #1
 800048a:	fa01 f202 	lsl.w	r2, r1, r2
 800048e:	4611      	mov	r1, r2
 8000490:	4a80      	ldr	r2, [pc, #512]	; (8000694 <GPIO_InitPin+0x2f8>)
 8000492:	430b      	orrs	r3, r1
 8000494:	6013      	str	r3, [r2, #0]
 8000496:	e010      	b.n	80004ba <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	791b      	ldrb	r3, [r3, #4]
 800049c:	2b09      	cmp	r3, #9
 800049e:	d806      	bhi.n	80004ae <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 80004a0:	4b7c      	ldr	r3, [pc, #496]	; (8000694 <GPIO_InitPin+0x2f8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a7b      	ldr	r2, [pc, #492]	; (8000694 <GPIO_InitPin+0x2f8>)
 80004a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004aa:	6013      	str	r3, [r2, #0]
 80004ac:	e005      	b.n	80004ba <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 80004ae:	4b79      	ldr	r3, [pc, #484]	; (8000694 <GPIO_InitPin+0x2f8>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	4a78      	ldr	r2, [pc, #480]	; (8000694 <GPIO_InitPin+0x2f8>)
 80004b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b8:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80004ba:	4b77      	ldr	r3, [pc, #476]	; (8000698 <GPIO_InitPin+0x2fc>)
 80004bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004be:	4a76      	ldr	r2, [pc, #472]	; (8000698 <GPIO_InitPin+0x2fc>)
 80004c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c4:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a74      	ldr	r2, [pc, #464]	; (800069c <GPIO_InitPin+0x300>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d024      	beq.n	800051a <GPIO_InitPin+0x17e>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a72      	ldr	r2, [pc, #456]	; (80006a0 <GPIO_InitPin+0x304>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d01d      	beq.n	8000516 <GPIO_InitPin+0x17a>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a71      	ldr	r2, [pc, #452]	; (80006a4 <GPIO_InitPin+0x308>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d016      	beq.n	8000512 <GPIO_InitPin+0x176>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a6f      	ldr	r2, [pc, #444]	; (80006a8 <GPIO_InitPin+0x30c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d00f      	beq.n	800050e <GPIO_InitPin+0x172>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a6e      	ldr	r2, [pc, #440]	; (80006ac <GPIO_InitPin+0x310>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d008      	beq.n	800050a <GPIO_InitPin+0x16e>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a6c      	ldr	r2, [pc, #432]	; (80006b0 <GPIO_InitPin+0x314>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <GPIO_InitPin+0x16a>
 8000502:	2307      	movs	r3, #7
 8000504:	e00a      	b.n	800051c <GPIO_InitPin+0x180>
 8000506:	2300      	movs	r3, #0
 8000508:	e008      	b.n	800051c <GPIO_InitPin+0x180>
 800050a:	2304      	movs	r3, #4
 800050c:	e006      	b.n	800051c <GPIO_InitPin+0x180>
 800050e:	2303      	movs	r3, #3
 8000510:	e004      	b.n	800051c <GPIO_InitPin+0x180>
 8000512:	2302      	movs	r3, #2
 8000514:	e002      	b.n	800051c <GPIO_InitPin+0x180>
 8000516:	2301      	movs	r3, #1
 8000518:	e000      	b.n	800051c <GPIO_InitPin+0x180>
 800051a:	2300      	movs	r3, #0
 800051c:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 800051e:	4a65      	ldr	r2, [pc, #404]	; (80006b4 <GPIO_InitPin+0x318>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	089b      	lsrs	r3, r3, #2
 8000526:	b2d8      	uxtb	r0, r3
 8000528:	4603      	mov	r3, r0
 800052a:	3302      	adds	r3, #2
 800052c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000530:	7bf9      	ldrb	r1, [r7, #15]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7912      	ldrb	r2, [r2, #4]
 8000536:	f002 0203 	and.w	r2, r2, #3
 800053a:	0092      	lsls	r2, r2, #2
 800053c:	fa01 f202 	lsl.w	r2, r1, r2
 8000540:	495c      	ldr	r1, [pc, #368]	; (80006b4 <GPIO_InitPin+0x318>)
 8000542:	431a      	orrs	r2, r3
 8000544:	1c83      	adds	r3, r0, #2
 8000546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	795b      	ldrb	r3, [r3, #5]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d003      	beq.n	800055a <GPIO_InitPin+0x1be>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	795b      	ldrb	r3, [r3, #5]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d13b      	bne.n	80005d2 <GPIO_InitPin+0x236>
	{
		//speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	689a      	ldr	r2, [r3, #8]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	2103      	movs	r1, #3
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	43db      	mvns	r3, r3
 800056e:	4619      	mov	r1, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	400a      	ands	r2, r1
 8000576:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	689a      	ldr	r2, [r3, #8]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	79db      	ldrb	r3, [r3, #7]
 8000582:	4619      	mov	r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	4619      	mov	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	430a      	orrs	r2, r1
 8000596:	609a      	str	r2, [r3, #8]

		//output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	4619      	mov	r1, r3
 80005a4:	2301      	movs	r3, #1
 80005a6:	408b      	lsls	r3, r1
 80005a8:	43db      	mvns	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	400a      	ands	r2, r1
 80005b2:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	799b      	ldrb	r3, [r3, #6]
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	605a      	str	r2, [r3, #4]
	}

	// set alternate function bits
	if (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d137      	bne.n	800064a <GPIO_InitPin+0x2ae>
	{
		// clear 4 AF bits and set new value
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] &= ~(15UL << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7912      	ldrb	r2, [r2, #4]
 80005e2:	08d2      	lsrs	r2, r2, #3
 80005e4:	b2d0      	uxtb	r0, r2
 80005e6:	4602      	mov	r2, r0
 80005e8:	3208      	adds	r2, #8
 80005ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	220f      	movs	r2, #15
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43da      	mvns	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4011      	ands	r1, r2
 8000606:	f100 0208 	add.w	r2, r0, #8
 800060a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] |= (hGPIO->PinConfig.AF << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7912      	ldrb	r2, [r2, #4]
 8000616:	08d2      	lsrs	r2, r2, #3
 8000618:	b2d1      	uxtb	r1, r2
 800061a:	460a      	mov	r2, r1
 800061c:	3208      	adds	r2, #8
 800061e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7a5b      	ldrb	r3, [r3, #9]
 8000626:	4618      	mov	r0, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	f003 0307 	and.w	r3, r3, #7
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	fa00 f303 	lsl.w	r3, r0, r3
 8000636:	461c      	mov	r4, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4608      	mov	r0, r1
 800063e:	ea42 0104 	orr.w	r1, r2, r4
 8000642:	f100 0208 	add.w	r2, r0, #8
 8000646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68da      	ldr	r2, [r3, #12]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	2103      	movs	r1, #3
 8000658:	fa01 f303 	lsl.w	r3, r1, r3
 800065c:	43db      	mvns	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	400a      	ands	r2, r1
 8000666:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68da      	ldr	r2, [r3, #12]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	7a1b      	ldrb	r3, [r3, #8]
 8000672:	4619      	mov	r1, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	4619      	mov	r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	430a      	orrs	r2, r1
 8000686:	60da      	str	r2, [r3, #12]

}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bd90      	pop	{r4, r7, pc}
 8000690:	40013c00 	.word	0x40013c00
 8000694:	e000e100 	.word	0xe000e100
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40021c00 	.word	0x40021c00
 80006b4:	40013800 	.word	0x40013800

080006b8 <GPIO_TogglePin>:
 * @param[*GPIO] - base address of gpiox peripheral
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *GPIO, uint8_t PinNumber)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
	GPIO->ODR ^= 0b1 << PinNumber;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	78fa      	ldrb	r2, [r7, #3]
 80006ca:	2101      	movs	r1, #1
 80006cc:	fa01 f202 	lsl.w	r2, r1, r2
 80006d0:	405a      	eors	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	615a      	str	r2, [r3, #20]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
	...

080006e4 <GPIO_ClearPendingEXTIFlag>:
 *
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_ClearPendingEXTIFlag(uint8_t PinNumber)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0b1 << PinNumber);
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <GPIO_ClearPendingEXTIFlag+0x2c>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	79fa      	ldrb	r2, [r7, #7]
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <GPIO_ClearPendingEXTIFlag+0x2c>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6153      	str	r3, [r2, #20]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40013c00 	.word	0x40013c00

08000714 <Pwr_EnterSleepMode>:

}

// wait for interrupt in sleep mode
void Pwr_EnterSleepMode(PwrExit_t exit)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	// deselect deep sleep mode
	SCB->SCR &= ~(SCB_SCR_SLEEPDEEP_Msk);
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <Pwr_EnterSleepMode+0x34>)
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	4a09      	ldr	r2, [pc, #36]	; (8000748 <Pwr_EnterSleepMode+0x34>)
 8000724:	f023 0304 	bic.w	r3, r3, #4
 8000728:	6113      	str	r3, [r2, #16]

	if(exit == kWFI)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d100      	bne.n	8000732 <Pwr_EnterSleepMode+0x1e>
	{
	__WFI();
 8000730:	bf30      	wfi
	}

	if(exit == kWFE)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d100      	bne.n	800073a <Pwr_EnterSleepMode+0x26>
	{
	__WFE();
 8000738:	bf20      	wfe
	}
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__libc_init_array>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	4d0d      	ldr	r5, [pc, #52]	; (8000784 <__libc_init_array+0x38>)
 8000750:	4c0d      	ldr	r4, [pc, #52]	; (8000788 <__libc_init_array+0x3c>)
 8000752:	1b64      	subs	r4, r4, r5
 8000754:	10a4      	asrs	r4, r4, #2
 8000756:	2600      	movs	r6, #0
 8000758:	42a6      	cmp	r6, r4
 800075a:	d109      	bne.n	8000770 <__libc_init_array+0x24>
 800075c:	4d0b      	ldr	r5, [pc, #44]	; (800078c <__libc_init_array+0x40>)
 800075e:	4c0c      	ldr	r4, [pc, #48]	; (8000790 <__libc_init_array+0x44>)
 8000760:	f000 f818 	bl	8000794 <_init>
 8000764:	1b64      	subs	r4, r4, r5
 8000766:	10a4      	asrs	r4, r4, #2
 8000768:	2600      	movs	r6, #0
 800076a:	42a6      	cmp	r6, r4
 800076c:	d105      	bne.n	800077a <__libc_init_array+0x2e>
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f855 3b04 	ldr.w	r3, [r5], #4
 8000774:	4798      	blx	r3
 8000776:	3601      	adds	r6, #1
 8000778:	e7ee      	b.n	8000758 <__libc_init_array+0xc>
 800077a:	f855 3b04 	ldr.w	r3, [r5], #4
 800077e:	4798      	blx	r3
 8000780:	3601      	adds	r6, #1
 8000782:	e7f2      	b.n	800076a <__libc_init_array+0x1e>
 8000784:	080007ac 	.word	0x080007ac
 8000788:	080007ac 	.word	0x080007ac
 800078c:	080007ac 	.word	0x080007ac
 8000790:	080007b0 	.word	0x080007b0

08000794 <_init>:
 8000794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000796:	bf00      	nop
 8000798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800079a:	bc08      	pop	{r3}
 800079c:	469e      	mov	lr, r3
 800079e:	4770      	bx	lr

080007a0 <_fini>:
 80007a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a2:	bf00      	nop
 80007a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a6:	bc08      	pop	{r3}
 80007a8:	469e      	mov	lr, r3
 80007aa:	4770      	bx	lr
