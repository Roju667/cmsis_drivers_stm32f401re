
cmsis_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a70  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001c04  08001c0c  00011c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001c04  08001c04  00011c0c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c04  08001c04  00011c0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c04  08001c0c  00011c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c04  08001c04  00011c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c08  08001c08  00011c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000000  08001c0c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001c0c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011c0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c0b  00000000  00000000  00011c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001003  00000000  00000000  00017847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00018850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000228  00000000  00000000  00018b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e9f6  00000000  00000000  00018d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003a8d  00000000  00000000  0002771e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000570db  00000000  00000000  0002b1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00082286  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a28  00000000  00000000  000822dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001bec 	.word	0x08001bec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08001bec 	.word	0x08001bec

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_d2uiz>:
 800054c:	004a      	lsls	r2, r1, #1
 800054e:	d211      	bcs.n	8000574 <__aeabi_d2uiz+0x28>
 8000550:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000554:	d211      	bcs.n	800057a <__aeabi_d2uiz+0x2e>
 8000556:	d50d      	bpl.n	8000574 <__aeabi_d2uiz+0x28>
 8000558:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800055c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000560:	d40e      	bmi.n	8000580 <__aeabi_d2uiz+0x34>
 8000562:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056e:	fa23 f002 	lsr.w	r0, r3, r2
 8000572:	4770      	bx	lr
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	4770      	bx	lr
 800057a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800057e:	d102      	bne.n	8000586 <__aeabi_d2uiz+0x3a>
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	4770      	bx	lr
 8000586:	f04f 0000 	mov.w	r0, #0
 800058a:	4770      	bx	lr

0800058c <main>:
// #include "gpio_exti_example.h"
// #include "gpio_example.h"
//#include "usart_dma_example.h"
 #include "i2c_bmp180_example.h"
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
//	wwdg_example();
//	gpio_exti_example();
//	gpio_example();
//	usart_dma_example();
	i2c_bmp180_example();
 8000590:	f000 f9f8 	bl	8000984 <i2c_bmp180_example>
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <SystemInit+0x20>)
 80005a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <SystemInit+0x20>)
 80005a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005dc:	4c0b      	ldr	r4, [pc, #44]	; (800060c <LoopFillZerobss+0x26>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ea:	f7ff ffd7 	bl	800059c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f001 fa8b 	bl	8001b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f2:	f7ff ffcb 	bl	800058c <main>
  bx  lr    
 80005f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000604:	08001c0c 	.word	0x08001c0c
  ldr r2, =_sbss
 8000608:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800060c:	20000074 	.word	0x20000074

08000610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>

08000612 <bmp180_delay>:
#include "bmp180.h"
#include "stm32f401xe_i2c.h"


static void bmp180_delay(uint32_t ms)
{
 8000612:	b480      	push	{r7}
 8000614:	b085      	sub	sp, #20
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < ms; i++)
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	e002      	b.n	8000626 <bmp180_delay+0x14>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	d3f8      	bcc.n	8000620 <bmp180_delay+0xe>
	{

	}
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <bmp180_read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t bmp180_read_chip_id(bmp180_t *p_bmp)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af02      	add	r7, sp, #8
 8000642:	6078      	str	r0, [r7, #4]
	uint8_t out_buff = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	73bb      	strb	r3, [r7, #14]
	uint8_t ret_val = NO_ERR;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]

	// data read
	// send slave address and memory address
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_CHIP_ID_REG, 0, 0);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000650:	2300      	movs	r3, #0
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	22d0      	movs	r2, #208	; 0xd0
 8000658:	21ef      	movs	r1, #239	; 0xef
 800065a:	f000 fe3e 	bl	80012da <I2C_Transmit>
	bmp180_delay(BMP_TEMP_CONV_TIME * 10000);
 800065e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000662:	f7ff ffd6 	bl	8000612 <bmp180_delay>
	// read data
	I2C_Receive(p_bmp->p_i2c_handle, BMP_READ_ADDR, out_buff, 1);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	461a      	mov	r2, r3
 800066e:	2301      	movs	r3, #1
 8000670:	21ef      	movs	r1, #239	; 0xef
 8000672:	f000 fe9e 	bl	80013b2 <I2C_Receive>

	if (BMP_CHIP_ID_VAL != out_buff)
 8000676:	7bbb      	ldrb	r3, [r7, #14]
 8000678:	2b55      	cmp	r3, #85	; 0x55
 800067a:	d001      	beq.n	8000680 <bmp180_read_chip_id+0x44>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800067c:	2301      	movs	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8000680:	7bfb      	ldrb	r3, [r7, #15]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <bmp180_set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void bmp180_set_oss(bmp180_t *p_bmp, oss_ratio_t ratio)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af02      	add	r7, sp, #8
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8000698:	2300      	movs	r3, #0
 800069a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	2b03      	cmp	r3, #3
 80006a0:	d81e      	bhi.n	80006e0 <bmp180_set_oss+0x54>
 80006a2:	a201      	add	r2, pc, #4	; (adr r2, 80006a8 <bmp180_set_oss+0x1c>)
 80006a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a8:	080006b9 	.word	0x080006b9
 80006ac:	080006c3 	.word	0x080006c3
 80006b0:	080006cd 	.word	0x080006cd
 80006b4:	080006d7 	.word	0x080006d7
	{
		case ULTRA_LOW_PWR_MODE:
		{
		p_bmp->oss.wait_time = BMP_OSS0_CONV_TIME;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2205      	movs	r2, #5
 80006bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 80006c0:	e013      	b.n	80006ea <bmp180_set_oss+0x5e>
		}
		case STANDARD_MODE:
		{
		p_bmp->oss.wait_time = BMP_OSS1_CONV_TIME;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2208      	movs	r2, #8
 80006c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 80006ca:	e00e      	b.n	80006ea <bmp180_set_oss+0x5e>
		}
		case HIGH:
		{
		p_bmp->oss.wait_time = BMP_OSS2_CONV_TIME;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	220e      	movs	r2, #14
 80006d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 80006d4:	e009      	b.n	80006ea <bmp180_set_oss+0x5e>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
		p_bmp->oss.wait_time = BMP_OSS3_CONV_TIME;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	221a      	movs	r2, #26
 80006da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 80006de:	e004      	b.n	80006ea <bmp180_set_oss+0x5e>
		}
		default:
		{
		p_bmp->oss.wait_time = BMP_OSS1_CONV_TIME;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2208      	movs	r2, #8
 80006e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 80006e8:	bf00      	nop
		}
	}

	p_bmp->oss.ratio = ratio;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	78fa      	ldrb	r2, [r7, #3]
 80006ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	019b      	lsls	r3, r3, #6
 80006f6:	70fb      	strb	r3, [r7, #3]
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	737b      	strb	r3, [r7, #13]
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_WRITE_ADDR, BMP_CTRL_REG, in_buff, 2);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2202      	movs	r2, #2
 8000706:	9200      	str	r2, [sp, #0]
 8000708:	22f4      	movs	r2, #244	; 0xf4
 800070a:	21ee      	movs	r1, #238	; 0xee
 800070c:	f000 fde5 	bl	80012da <I2C_Transmit>

}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <bmp180_read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t bmp180_read_calib_data(bmp180_t *p_bmp)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af02      	add	r7, sp, #8
 800071e:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8000720:	2300      	movs	r3, #0
 8000722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int16_t *calib_data = (int16_t*) &p_bmp->calib;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	623b      	str	r3, [r7, #32]

	// send slave address and memory address
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_CALIB_ADDR, 0, 0);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800074e:	2300      	movs	r3, #0
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2300      	movs	r3, #0
 8000754:	22aa      	movs	r2, #170	; 0xaa
 8000756:	21ef      	movs	r1, #239	; 0xef
 8000758:	f000 fdbf 	bl	80012da <I2C_Transmit>
	bmp180_delay(BMP_TEMP_CONV_TIME * 10000);
 800075c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000760:	f7ff ff57 	bl	8000612 <bmp180_delay>
	// read data
	I2C_Receive(p_bmp->p_i2c_handle, BMP_READ_ADDR, out_buff,
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000768:	f107 0208 	add.w	r2, r7, #8
 800076c:	2316      	movs	r3, #22
 800076e:	21ef      	movs	r1, #239	; 0xef
 8000770:	f000 fe1f 	bl	80013b2 <I2C_Receive>
			BMP_CALIB_DATA_SIZE);

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8000774:	2300      	movs	r3, #0
 8000776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800077a:	e03e      	b.n	80007fa <bmp180_read_calib_data+0xe2>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800077c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000786:	4413      	add	r3, r2
 8000788:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	b219      	sxth	r1, r3
 8000790:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000794:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000798:	4413      	add	r3, r2
 800079a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800079e:	b21a      	sxth	r2, r3
 80007a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	6a38      	ldr	r0, [r7, #32]
 80007a8:	4403      	add	r3, r0
 80007aa:	430a      	orrs	r2, r1
 80007ac:	b212      	sxth	r2, r2
 80007ae:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80007b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	6a3a      	ldr	r2, [r7, #32]
 80007b8:	4413      	add	r3, r2
 80007ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf0c      	ite	eq
 80007c2:	2301      	moveq	r3, #1
 80007c4:	2300      	movne	r3, #0
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	6a39      	ldr	r1, [r7, #32]
 80007d0:	440b      	add	r3, r1
 80007d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007da:	bf0c      	ite	eq
 80007dc:	2301      	moveq	r3, #1
 80007de:	2300      	movne	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <bmp180_read_calib_data+0xd8>
		{
			ret_val = GET_CALIB_ERR;
 80007ea:	2302      	movs	r3, #2
 80007ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80007f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007f4:	3301      	adds	r3, #1
 80007f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80007fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007fe:	2b0b      	cmp	r3, #11
 8000800:	d9bc      	bls.n	800077c <bmp180_read_calib_data+0x64>
		}
	}

	return ret_val;
 8000802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000806:	4618      	mov	r0, r3
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <bmp180_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp180_init(bmp180_t *p_bmp, I2c_Handle_t *p_i2c_handle)
{
 800080e:	b590      	push	{r4, r7, lr}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	6039      	str	r1, [r7, #0]

	memset(p_bmp, 0x00, sizeof(&p_bmp)); // clear bmp strut;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2204      	movs	r2, #4
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f001 f996 	bl	8001b50 <memset>
	p_bmp->p_i2c_handle = p_i2c_handle;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	63da      	str	r2, [r3, #60]	; 0x3c
	p_bmp->err = bmp180_read_chip_id(p_bmp); // check chip validity and I2C communication.
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	687c      	ldr	r4, [r7, #4]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff04 	bl	800063c <bmp180_read_chip_id>
 8000834:	4603      	mov	r3, r0
 8000836:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	p_bmp->err = bmp180_read_calib_data(p_bmp);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	687c      	ldr	r4, [r7, #4]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff6a 	bl	8000718 <bmp180_read_calib_data>
 8000844:	4603      	mov	r3, r0
 8000846:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp180_set_oss(p_bmp, HIGH);       // set oversampling settings
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2102      	movs	r1, #2
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff1c 	bl	800068c <bmp180_set_oss>
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bd90      	pop	{r4, r7, pc}

0800085c <bmp180_get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t bmp180_get_ut(bmp180_t *p_bmp)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af02      	add	r7, sp, #8
 8000862:	6078      	str	r0, [r7, #4]
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8000864:	232e      	movs	r3, #46	; 0x2e
 8000866:	733b      	strb	r3, [r7, #12]

	// write conversion time
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_WRITE_ADDR, BMP_CTRL_REG, out_buff,
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2201      	movs	r2, #1
 8000872:	9200      	str	r2, [sp, #0]
 8000874:	22f4      	movs	r2, #244	; 0xf4
 8000876:	21ee      	movs	r1, #238	; 0xee
 8000878:	f000 fd2f 	bl	80012da <I2C_Transmit>
			1);
	bmp180_delay(BMP_TEMP_CONV_TIME * 10000);
 800087c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000880:	f7ff fec7 	bl	8000612 <bmp180_delay>
	// send slave address and memory address
	I2C_Transmit(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 0, 0);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000888:	2300      	movs	r3, #0
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	22f6      	movs	r2, #246	; 0xf6
 8000890:	21ef      	movs	r1, #239	; 0xef
 8000892:	f000 fd22 	bl	80012da <I2C_Transmit>
	bmp180_delay(BMP_TEMP_CONV_TIME * 10000);
 8000896:	f24c 3050 	movw	r0, #50000	; 0xc350
 800089a:	f7ff feba 	bl	8000612 <bmp180_delay>
	I2C_Receive(p_bmp->p_i2c_handle, BMP_READ_ADDR, out_buff, 2);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008a2:	f107 020c 	add.w	r2, r7, #12
 80008a6:	2302      	movs	r3, #2
 80008a8:	21ef      	movs	r1, #239	; 0xef
 80008aa:	f000 fd82 	bl	80013b2 <I2C_Receive>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	7b7a      	ldrb	r2, [r7, #13]
 80008b4:	4313      	orrs	r3, r2
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <bmp180_get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float bmp180_get_temp(bmp180_t *p_bmp)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t) p_bmp->uncomp.temp - p_bmp->calib.AC6) * p_bmp->calib.AC5)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80008dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e0:	ee17 2a90 	vmov	r2, s15
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	895b      	ldrh	r3, [r3, #10]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	8912      	ldrh	r2, [r2, #8]
 80008ee:	fb02 f303 	mul.w	r3, r2, r3
 80008f2:	13db      	asrs	r3, r3, #15
 80008f4:	617b      	str	r3, [r7, #20]
			>> 15;
	X2 = (p_bmp->calib.MC << 11) / (X1 + p_bmp->calib.MD);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80008fc:	02da      	lsls	r2, r3, #11
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000904:	4619      	mov	r1, r3
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	440b      	add	r3, r1
 800090a:	fb92 f3f3 	sdiv	r3, r2, r3
 800090e:	613b      	str	r3, [r7, #16]
	p_bmp->data.B5 = X1 + X2;
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	441a      	add	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((p_bmp->data.B5 + 8) >> 4) * 0.1f;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	3308      	adds	r3, #8
 8000920:	111b      	asrs	r3, r3, #4
 8000922:	ee07 3a90 	vmov	s15, r3
 8000926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000978 <bmp180_get_temp+0xb8>
 800092e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000932:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8000936:	edd7 7a03 	vldr	s15, [r7, #12]
 800093a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800097c <bmp180_get_temp+0xbc>
 800093e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000946:	d908      	bls.n	800095a <bmp180_get_temp+0x9a>
 8000948:	edd7 7a03 	vldr	s15, [r7, #12]
 800094c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000980 <bmp180_get_temp+0xc0>
 8000950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000958:	db03      	blt.n	8000962 <bmp180_get_temp+0xa2>
	{
		p_bmp->err = GET_TEMP_ERR;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2203      	movs	r2, #3
 800095e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	ee07 3a90 	vmov	s15, r3
}
 8000968:	eeb0 0a67 	vmov.f32	s0, s15
 800096c:	371c      	adds	r7, #28
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	3dcccccd 	.word	0x3dcccccd
 800097c:	c2200000 	.word	0xc2200000
 8000980:	42aa0000 	.word	0x42aa0000

08000984 <i2c_bmp180_example>:
USART_Handle_t p_usart2;
I2c_Handle_t p_i2c1;
bmp180_t p_bmp180;

void i2c_bmp180_example(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

	// config peripherals
	I2C1Config(&p_i2c1);
 800098a:	481f      	ldr	r0, [pc, #124]	; (8000a08 <i2c_bmp180_example+0x84>)
 800098c:	f000 f88c 	bl	8000aa8 <I2C1Config>
	GPIOConfig();
 8000990:	f000 f844 	bl	8000a1c <GPIOConfig>
	USART2Config(&p_usart2);
 8000994:	481d      	ldr	r0, [pc, #116]	; (8000a0c <i2c_bmp180_example+0x88>)
 8000996:	f000 f857 	bl	8000a48 <USART2Config>


	bmp180_init(&p_bmp180, &p_i2c1);
 800099a:	491b      	ldr	r1, [pc, #108]	; (8000a08 <i2c_bmp180_example+0x84>)
 800099c:	481c      	ldr	r0, [pc, #112]	; (8000a10 <i2c_bmp180_example+0x8c>)
 800099e:	f7ff ff36 	bl	800080e <bmp180_init>
	p_bmp180.uncomp.temp = bmp180_get_ut(&p_bmp180);
 80009a2:	481b      	ldr	r0, [pc, #108]	; (8000a10 <i2c_bmp180_example+0x8c>)
 80009a4:	f7ff ff5a 	bl	800085c <bmp180_get_ut>
 80009a8:	ee07 0a90 	vmov	s15, r0
 80009ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <i2c_bmp180_example+0x8c>)
 80009b2:	edc3 7a06 	vstr	s15, [r3, #24]
	p_bmp180.data.temp = bmp180_get_temp(&p_bmp180);
 80009b6:	4816      	ldr	r0, [pc, #88]	; (8000a10 <i2c_bmp180_example+0x8c>)
 80009b8:	f7ff ff82 	bl	80008c0 <bmp180_get_temp>
 80009bc:	eef0 7a40 	vmov.f32	s15, s0
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <i2c_bmp180_example+0x8c>)
 80009c2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	while (1)
	{
		for (uint32_t i = 0; i < 100000; i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	e002      	b.n	80009d2 <i2c_bmp180_example+0x4e>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3301      	adds	r3, #1
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <i2c_bmp180_example+0x90>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d9f8      	bls.n	80009cc <i2c_bmp180_example+0x48>
		{
		}
		GPIO_TogglePin(GPIOA, kGpioPin5);
 80009da:	2105      	movs	r1, #5
 80009dc:	480e      	ldr	r0, [pc, #56]	; (8000a18 <i2c_bmp180_example+0x94>)
 80009de:	f000 fa07 	bl	8000df0 <GPIO_TogglePin>
		p_bmp180.uncomp.temp = bmp180_get_ut(&p_bmp180);
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <i2c_bmp180_example+0x8c>)
 80009e4:	f7ff ff3a 	bl	800085c <bmp180_get_ut>
 80009e8:	ee07 0a90 	vmov	s15, r0
 80009ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <i2c_bmp180_example+0x8c>)
 80009f2:	edc3 7a06 	vstr	s15, [r3, #24]
		p_bmp180.data.temp = bmp180_get_temp(&p_bmp180);
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <i2c_bmp180_example+0x8c>)
 80009f8:	f7ff ff62 	bl	80008c0 <bmp180_get_temp>
 80009fc:	eef0 7a40 	vmov.f32	s15, s0
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <i2c_bmp180_example+0x8c>)
 8000a02:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		for (uint32_t i = 0; i < 100000; i++)
 8000a06:	e7de      	b.n	80009c6 <i2c_bmp180_example+0x42>
 8000a08:	2000006c 	.word	0x2000006c
 8000a0c:	2000001c 	.word	0x2000001c
 8000a10:	2000002c 	.word	0x2000002c
 8000a14:	0001869f 	.word	0x0001869f
 8000a18:	40020000 	.word	0x40020000

08000a1c <GPIOConfig>:

/*
 * configure LED on the board
 */
void GPIOConfig(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	// PA5 Led
	GPIO_InitClock(GPIOA);
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <GPIOConfig+0x28>)
 8000a22:	f000 f85d 	bl	8000ae0 <GPIO_InitClock>
	GPIO_ConfigBasic(GPIOA, GPIO_FLAG_PIN_5, kGpioModeOutput, kGpioPUPDNoPull);
 8000a26:	2300      	movs	r3, #0
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <GPIOConfig+0x28>)
 8000a2e:	f000 f8fb 	bl	8000c28 <GPIO_ConfigBasic>
	GPIO_ConfigOutput(GPIOA, GPIO_FLAG_PIN_5, kGpioOTPushPull, kGpioSpeedHigh);
 8000a32:	2302      	movs	r3, #2
 8000a34:	2200      	movs	r2, #0
 8000a36:	2120      	movs	r1, #32
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <GPIOConfig+0x28>)
 8000a3a:	f000 f943 	bl	8000cc4 <GPIO_ConfigOutput>
	return;
 8000a3e:	bf00      	nop
}
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40020000 	.word	0x40020000

08000a48 <USART2Config>:
 * - set basic parameters
 * - set baud rate
 * - enable usart irqs
 */
void USART2Config(USART_Handle_t *p_usart2)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	p_usart2->p_usartx = USART2;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <USART2Config+0x54>)
 8000a54:	601a      	str	r2, [r3, #0]
	p_usart2->usart_dma.p_dma_stream_tx = DMA1_Stream6;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <USART2Config+0x58>)
 8000a5a:	605a      	str	r2, [r3, #4]
	p_usart2->usart_dma.p_dma_stream_rx = DMA1_Stream5;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <USART2Config+0x5c>)
 8000a60:	609a      	str	r2, [r3, #8]
	USART_InitClock(p_usart2);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 fec4 	bl	80017f0 <USART_InitClock>
	USART_InitGpioPins(p_usart2);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 ff1b 	bl	80018a4 <USART_InitGpioPins>
	USART_SetBasicParameters(p_usart2, kUsartWordLenght8, kUsartStopBits0,
 8000a6e:	2302      	movs	r3, #2
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 fffb 	bl	8001a70 <USART_SetBasicParameters>
			kUsartNoParity);
	USART_SetBaudRate(p_usart2, 115200, kUsartOversampling16);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 ff33 	bl	80018ec <USART_SetBaudRate>
	USART_EnableIRQs(p_usart2, USART_CR1_IDLEIE, 0, USART_CR3_EIE);
 8000a86:	2301      	movs	r3, #1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 ffbf 	bl	8001a10 <USART_EnableIRQs>
	return;
 8000a92:	bf00      	nop
}
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	400260a0 	.word	0x400260a0
 8000aa4:	40026088 	.word	0x40026088

08000aa8 <I2C1Config>:

void I2C1Config(I2c_Handle_t *p_i2c1)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	p_i2c1->p_i2cx = I2C1;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <I2C1Config+0x30>)
 8000ab4:	601a      	str	r2, [r3, #0]
	I2C_InitClock(p_i2c1);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 fa22 	bl	8000f00 <I2C_InitClock>
	GPIO_InitClock(GPIOB);
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <I2C1Config+0x34>)
 8000abe:	f000 f80f 	bl	8000ae0 <GPIO_InitClock>
	I2C_InitGpioPins(p_i2c1);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 fa76 	bl	8000fb4 <I2C_InitGpioPins>
	I2C_SetBasicParameters(p_i2c1, kI2cSpeedFastDuty0);
 8000ac8:	2101      	movs	r1, #1
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 fb76 	bl	80011bc <I2C_SetBasicParameters>
	return;
 8000ad0:	bf00      	nop
}
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	40020400 	.word	0x40020400

08000ae0 <GPIO_InitClock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void GPIO_InitClock(GPIO_TypeDef *GPIO)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a48      	ldr	r2, [pc, #288]	; (8000c0c <GPIO_InitClock+0x12c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d112      	bne.n	8000b16 <GPIO_InitClock+0x36>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8000af0:	4b47      	ldr	r3, [pc, #284]	; (8000c10 <GPIO_InitClock+0x130>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a46      	ldr	r2, [pc, #280]	; (8000c10 <GPIO_InitClock+0x130>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOA();
 8000afc:	4b44      	ldr	r3, [pc, #272]	; (8000c10 <GPIO_InitClock+0x130>)
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	4a43      	ldr	r2, [pc, #268]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6113      	str	r3, [r2, #16]
 8000b08:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b0a:	691b      	ldr	r3, [r3, #16]
 8000b0c:	4a40      	ldr	r2, [pc, #256]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b0e:	f023 0301 	bic.w	r3, r3, #1
 8000b12:	6113      	str	r3, [r2, #16]
 8000b14:	e071      	b.n	8000bfa <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOB)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a3e      	ldr	r2, [pc, #248]	; (8000c14 <GPIO_InitClock+0x134>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d112      	bne.n	8000b44 <GPIO_InitClock+0x64>
	{
		RCC_CLOCK_GPIOB_ENABLE();
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a3b      	ldr	r2, [pc, #236]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOB();
 8000b2a:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	4a38      	ldr	r2, [pc, #224]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6113      	str	r3, [r2, #16]
 8000b36:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b3c:	f023 0302 	bic.w	r3, r3, #2
 8000b40:	6113      	str	r3, [r2, #16]
 8000b42:	e05a      	b.n	8000bfa <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOC)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a34      	ldr	r2, [pc, #208]	; (8000c18 <GPIO_InitClock+0x138>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d112      	bne.n	8000b72 <GPIO_InitClock+0x92>
	{
		RCC_CLOCK_GPIOC_ENABLE();
 8000b4c:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a2f      	ldr	r2, [pc, #188]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOC();
 8000b58:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	4a2c      	ldr	r2, [pc, #176]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6113      	str	r3, [r2, #16]
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	4a29      	ldr	r2, [pc, #164]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b6a:	f023 0304 	bic.w	r3, r3, #4
 8000b6e:	6113      	str	r3, [r2, #16]
 8000b70:	e043      	b.n	8000bfa <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOD)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <GPIO_InitClock+0x13c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d112      	bne.n	8000ba0 <GPIO_InitClock+0xc0>
	{
		RCC_CLOCK_GPIOD_ENABLE();
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOD();
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	6113      	str	r3, [r2, #16]
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b98:	f023 0308 	bic.w	r3, r3, #8
 8000b9c:	6113      	str	r3, [r2, #16]
 8000b9e:	e02c      	b.n	8000bfa <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOE)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <GPIO_InitClock+0x140>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d112      	bne.n	8000bce <GPIO_InitClock+0xee>
	{
		RCC_CLOCK_GPIOE_ENABLE();
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <GPIO_InitClock+0x130>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bae:	f043 0310 	orr.w	r3, r3, #16
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOE();
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6113      	str	r3, [r2, #16]
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bc6:	f023 0310 	bic.w	r3, r3, #16
 8000bca:	6113      	str	r3, [r2, #16]
 8000bcc:	e015      	b.n	8000bfa <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOH)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <GPIO_InitClock+0x144>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d111      	bne.n	8000bfa <GPIO_InitClock+0x11a>
	{
		RCC_CLOCK_GPIOH_ENABLE();
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOH();
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <GPIO_InitClock+0x130>)
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <GPIO_InitClock+0x130>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6113      	str	r3, [r2, #16]
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bf8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bfa:	f3bf 8f4f 	dsb	sy
}
 8000bfe:	bf00      	nop
	// this operation is unnecessary here because configuration library is taking
	// more than 2 clock cycles between clock enable and configuring register, i
	// leave it here to remind myself that stmf401x has a limitation that is
	// described in errata point 2.1.6
	__DSB();
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40021c00 	.word	0x40021c00

08000c28 <GPIO_ConfigBasic>:
 * @param[PUPD] - nopull/pullup/pulldown
 * @return - void
 */
void GPIO_ConfigBasic(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags,
		GpioMode_t mode, GpioPUPD_t PUPD)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	4608      	mov	r0, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	4603      	mov	r3, r0
 8000c38:	807b      	strh	r3, [r7, #2]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	707b      	strb	r3, [r7, #1]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	703b      	strb	r3, [r7, #0]


	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	81fb      	strh	r3, [r7, #14]
 8000c46:	e034      	b.n	8000cb2 <GPIO_ConfigBasic+0x8a>
	{
		if(pin_flags >> pin_count & 1U)
 8000c48:	887a      	ldrh	r2, [r7, #2]
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	fa42 f303 	asr.w	r3, r2, r3
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d029      	beq.n	8000cac <GPIO_ConfigBasic+0x84>
		{
			//mode
			p_GPIOx->MODER &= ~(0x03U << (pin_count * 2));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2103      	movs	r1, #3
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	401a      	ands	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
			p_GPIOx->MODER |= mode << (pin_count * 2);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	7879      	ldrb	r1, [r7, #1]
 8000c74:	89fa      	ldrh	r2, [r7, #14]
 8000c76:	0052      	lsls	r2, r2, #1
 8000c78:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	601a      	str	r2, [r3, #0]

			//PUPD
			p_GPIOx->PUPDR &= ~(0x03U << (pin_count * 2));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	89fb      	ldrh	r3, [r7, #14]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	401a      	ands	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60da      	str	r2, [r3, #12]
			p_GPIOx->PUPDR |= (PUPD << (pin_count * 2));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	7839      	ldrb	r1, [r7, #0]
 8000c9e:	89fa      	ldrh	r2, [r7, #14]
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60da      	str	r2, [r3, #12]
	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	81fb      	strh	r3, [r7, #14]
 8000cb2:	89fb      	ldrh	r3, [r7, #14]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d9c7      	bls.n	8000c48 <GPIO_ConfigBasic+0x20>
		}
	}

	return;
 8000cb8:	bf00      	nop

}
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <GPIO_ConfigOutput>:
 * @param[speed] - slow/medium/fast/veryfast
 * @return - void
 */
void GPIO_ConfigOutput(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags,
		GpioOutputType_t output_type, GpioSpeed_t speed)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	4608      	mov	r0, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	807b      	strh	r3, [r7, #2]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	707b      	strb	r3, [r7, #1]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	703b      	strb	r3, [r7, #0]

	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	81fb      	strh	r3, [r7, #14]
 8000ce2:	e032      	b.n	8000d4a <GPIO_ConfigOutput+0x86>
	{
		if(pin_flags >> pin_count & 1U)
 8000ce4:	887a      	ldrh	r2, [r7, #2]
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	fa42 f303 	asr.w	r3, r2, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d027      	beq.n	8000d44 <GPIO_ConfigOutput+0x80>
		{
	// speed selection
	p_GPIOx->OSPEEDR &= ~(0x03U << (pin_count * 2));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	401a      	ands	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	609a      	str	r2, [r3, #8]
	p_GPIOx->OSPEEDR |= (speed << (pin_count * 2));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	7839      	ldrb	r1, [r7, #0]
 8000d10:	89fa      	ldrh	r2, [r7, #14]
 8000d12:	0052      	lsls	r2, r2, #1
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]

	// output type selection
	p_GPIOx->OTYPER &= ~(0x01U << pin_count);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	2101      	movs	r1, #1
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	605a      	str	r2, [r3, #4]
	p_GPIOx->OTYPER |= (output_type << pin_count);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	7879      	ldrb	r1, [r7, #1]
 8000d38:	89fa      	ldrh	r2, [r7, #14]
 8000d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	605a      	str	r2, [r3, #4]
	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000d44:	89fb      	ldrh	r3, [r7, #14]
 8000d46:	3301      	adds	r3, #1
 8000d48:	81fb      	strh	r3, [r7, #14]
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d9c9      	bls.n	8000ce4 <GPIO_ConfigOutput+0x20>
		}
	}
	return;
 8000d50:	bf00      	nop
}
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <GPIO_ConfigAF>:
 * @param[pin_flags] - (GPIO_FLAG_PINx | GPIO_FLAG_PINy)
 * @param[af] - alternate function number
 * @return - void
 */
void GPIO_ConfigAF(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags, GpioAF_t af)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	707b      	strb	r3, [r7, #1]
	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	81fb      	strh	r3, [r7, #14]
 8000d70:	e035      	b.n	8000dde <GPIO_ConfigAF+0x82>
	{
		if(pin_flags >> pin_count & 1U)
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 8000d76:	fa42 f303 	asr.w	r3, r2, r3
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d02a      	beq.n	8000dd8 <GPIO_ConfigAF+0x7c>
		{
	// clear 4 AF bits and set new value
	p_GPIOx->AFR[pin_count / 8] &= ~(15UL << ((pin_count) * 4));
 8000d82:	89fb      	ldrh	r3, [r7, #14]
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	b298      	uxth	r0, r3
 8000d88:	4602      	mov	r2, r0
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	210f      	movs	r1, #15
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	ea02 0103 	and.w	r1, r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f100 0208 	add.w	r2, r0, #8
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_GPIOx->AFR[pin_count / 8] |= (af << ((pin_count % 8) * 4));
 8000dac:	89fb      	ldrh	r3, [r7, #14]
 8000dae:	08db      	lsrs	r3, r3, #3
 8000db0:	b298      	uxth	r0, r3
 8000db2:	4602      	mov	r2, r0
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dbc:	7879      	ldrb	r1, [r7, #1]
 8000dbe:	89fa      	ldrh	r2, [r7, #14]
 8000dc0:	f002 0207 	and.w	r2, r2, #7
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4602      	mov	r2, r0
 8000dce:	4319      	orrs	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	81fb      	strh	r3, [r7, #14]
 8000dde:	89fb      	ldrh	r3, [r7, #14]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d9c6      	bls.n	8000d72 <GPIO_ConfigAF+0x16>
		}
	}
	return;
 8000de4:	bf00      	nop
}
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <GPIO_TogglePin>:
 * @param[*p_GPIOx] - base address of gpiox peripheral
 * @param[pin] - pin number
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *p_GPIOx, GpioPinNumber_t pin)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
	p_GPIOx->ODR ^= 0x01U << pin;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695a      	ldr	r2, [r3, #20]
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	405a      	eors	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	615a      	str	r2, [r3, #20]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <I2C_CheckIfBusIsHanging>:
 * solution is to toggle scl line few times for slave to release the line
 * @param[*p_i2cx] - base address of i2c peripheral
 * @return - void
 */
void I2C_CheckIfBusIsHanging(I2c_Handle_t *p_handle_i2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	if (p_handle_i2c->p_i2cx == I2C1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a30      	ldr	r2, [pc, #192]	; (8000eec <I2C_CheckIfBusIsHanging+0xd0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d119      	bne.n	8000e62 <I2C_CheckIfBusIsHanging+0x46>
	{
		GPIO_ConfigBasic(GPIOB, I2C1_SCL_PIN_FLAG, kGpioModeOutput,
 8000e2e:	2300      	movs	r3, #0
 8000e30:	2201      	movs	r2, #1
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	482e      	ldr	r0, [pc, #184]	; (8000ef0 <I2C_CheckIfBusIsHanging+0xd4>)
 8000e36:	f7ff fef7 	bl	8000c28 <GPIO_ConfigBasic>
				kGpioPUPDNoPull);
		GPIO_ConfigOutput(GPIOB, I2C1_SCL_PIN_FLAG, kGpioOTPushPull,
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	482b      	ldr	r0, [pc, #172]	; (8000ef0 <I2C_CheckIfBusIsHanging+0xd4>)
 8000e42:	f7ff ff3f 	bl	8000cc4 <GPIO_ConfigOutput>
				kGpioSpeedVeryHigh);
		for (uint8_t i = 0; i < 10; i++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e006      	b.n	8000e5a <I2C_CheckIfBusIsHanging+0x3e>
		{
			GPIO_TogglePin(I2C1_SCL_PORT, I2C1_SCL_PIN);
 8000e4c:	2106      	movs	r1, #6
 8000e4e:	4828      	ldr	r0, [pc, #160]	; (8000ef0 <I2C_CheckIfBusIsHanging+0xd4>)
 8000e50:	f7ff ffce 	bl	8000df0 <GPIO_TogglePin>
		for (uint8_t i = 0; i < 10; i++)
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	3301      	adds	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b09      	cmp	r3, #9
 8000e5e:	d9f5      	bls.n	8000e4c <I2C_CheckIfBusIsHanging+0x30>
		for (uint8_t i = 0; i < 10; i++)
		{
			GPIO_TogglePin(I2C3_SCL_PORT, I2C3_SCL_PIN);
		}
	}
}
 8000e60:	e040      	b.n	8000ee4 <I2C_CheckIfBusIsHanging+0xc8>
	else if (p_handle_i2c->p_i2cx == I2C2)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <I2C_CheckIfBusIsHanging+0xd8>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d11b      	bne.n	8000ea4 <I2C_CheckIfBusIsHanging+0x88>
		GPIO_ConfigBasic(GPIOB, I2C2_SCL_PIN_FLAG, kGpioModeOutput,
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e74:	481e      	ldr	r0, [pc, #120]	; (8000ef0 <I2C_CheckIfBusIsHanging+0xd4>)
 8000e76:	f7ff fed7 	bl	8000c28 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOB, I2C2_SCL_PIN_FLAG, kGpioOTPushPull,
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <I2C_CheckIfBusIsHanging+0xd4>)
 8000e84:	f7ff ff1e 	bl	8000cc4 <GPIO_ConfigOutput>
		for (uint8_t i = 0; i < 10; i++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73bb      	strb	r3, [r7, #14]
 8000e8c:	e006      	b.n	8000e9c <I2C_CheckIfBusIsHanging+0x80>
			GPIO_TogglePin(I2C2_SCL_PORT, I2C2_SCL_PIN);
 8000e8e:	210a      	movs	r1, #10
 8000e90:	4817      	ldr	r0, [pc, #92]	; (8000ef0 <I2C_CheckIfBusIsHanging+0xd4>)
 8000e92:	f7ff ffad 	bl	8000df0 <GPIO_TogglePin>
		for (uint8_t i = 0; i < 10; i++)
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	73bb      	strb	r3, [r7, #14]
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	2b09      	cmp	r3, #9
 8000ea0:	d9f5      	bls.n	8000e8e <I2C_CheckIfBusIsHanging+0x72>
}
 8000ea2:	e01f      	b.n	8000ee4 <I2C_CheckIfBusIsHanging+0xc8>
	else if (p_handle_i2c->p_i2cx == I2C3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <I2C_CheckIfBusIsHanging+0xdc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11a      	bne.n	8000ee4 <I2C_CheckIfBusIsHanging+0xc8>
		GPIO_ConfigBasic(GPIOB, I2C2_SCL_PIN_FLAG, kGpioModeOutput,
 8000eae:	2300      	movs	r3, #0
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb6:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <I2C_CheckIfBusIsHanging+0xd4>)
 8000eb8:	f7ff feb6 	bl	8000c28 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOB, I2C2_SCL_PIN_FLAG, kGpioOTPushPull,
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec4:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <I2C_CheckIfBusIsHanging+0xd4>)
 8000ec6:	f7ff fefd 	bl	8000cc4 <GPIO_ConfigOutput>
		for (uint8_t i = 0; i < 10; i++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	737b      	strb	r3, [r7, #13]
 8000ece:	e006      	b.n	8000ede <I2C_CheckIfBusIsHanging+0xc2>
			GPIO_TogglePin(I2C3_SCL_PORT, I2C3_SCL_PIN);
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	480a      	ldr	r0, [pc, #40]	; (8000efc <I2C_CheckIfBusIsHanging+0xe0>)
 8000ed4:	f7ff ff8c 	bl	8000df0 <GPIO_TogglePin>
		for (uint8_t i = 0; i < 10; i++)
 8000ed8:	7b7b      	ldrb	r3, [r7, #13]
 8000eda:	3301      	adds	r3, #1
 8000edc:	737b      	strb	r3, [r7, #13]
 8000ede:	7b7b      	ldrb	r3, [r7, #13]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d9f5      	bls.n	8000ed0 <I2C_CheckIfBusIsHanging+0xb4>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40005400 	.word	0x40005400
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40005800 	.word	0x40005800
 8000ef8:	40005c00 	.word	0x40005c00
 8000efc:	40020000 	.word	0x40020000

08000f00 <I2C_InitClock>:
 *
 * @param[*p_i2cx] - base address of i2c peripheral
 * @return - void
 */
void I2C_InitClock(I2c_Handle_t *p_handle_i2c)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	if (p_handle_i2c->p_i2cx == I2C1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <I2C_InitClock+0xa4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d112      	bne.n	8000f38 <I2C_InitClock+0x38>
	{
		RCC_CLOCK_I2C1_ENABLE();
 8000f12:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_I2C1();
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f28:	6213      	str	r3, [r2, #32]
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f34:	6213      	str	r3, [r2, #32]
	{
		RCC_CLOCK_I2C3_ENABLE();
		RCC_RESET_I2C3();
	}

	return;
 8000f36:	e02f      	b.n	8000f98 <I2C_InitClock+0x98>
	else if (p_handle_i2c->p_i2cx == I2C2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <I2C_InitClock+0xac>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d112      	bne.n	8000f68 <I2C_InitClock+0x68>
		RCC_CLOCK_I2C2_ENABLE();
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a18      	ldr	r2, [pc, #96]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_I2C2();
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f58:	6213      	str	r3, [r2, #32]
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f60:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f64:	6213      	str	r3, [r2, #32]
	return;
 8000f66:	e017      	b.n	8000f98 <I2C_InitClock+0x98>
	else if (p_handle_i2c->p_i2cx == I2C3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <I2C_InitClock+0xb0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d112      	bne.n	8000f98 <I2C_InitClock+0x98>
		RCC_CLOCK_I2C3_ENABLE();
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_I2C3();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f88:	6213      	str	r3, [r2, #32]
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <I2C_InitClock+0xa8>)
 8000f90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f94:	6213      	str	r3, [r2, #32]
	return;
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
}
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40005400 	.word	0x40005400
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40005800 	.word	0x40005800
 8000fb0:	40005c00 	.word	0x40005c00

08000fb4 <I2C_InitGpioPins>:
 * @param[*p_i2cx] - i2c address
 * @param[alternate_pos] - pins alternative positions select
 * @return - void
 */
void I2C_InitGpioPins(I2c_Handle_t *p_handle_i2c)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	I2C_CheckIfBusIsHanging(p_handle_i2c);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff2d 	bl	8000e1c <I2C_CheckIfBusIsHanging>

	// configure pins
	if (p_handle_i2c->p_i2cx == I2C1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a29      	ldr	r2, [pc, #164]	; (800106c <I2C_InitGpioPins+0xb8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d111      	bne.n	8000ff0 <I2C_InitGpioPins+0x3c>
	{
		GPIO_ConfigBasic(GPIOB, (I2C1_SDA_PIN_FLAG | I2C1_SCL_PIN_FLAG),
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2202      	movs	r2, #2
 8000fd0:	21c0      	movs	r1, #192	; 0xc0
 8000fd2:	4827      	ldr	r0, [pc, #156]	; (8001070 <I2C_InitGpioPins+0xbc>)
 8000fd4:	f7ff fe28 	bl	8000c28 <GPIO_ConfigBasic>
				kGpioModeAF, kGpioPUPDNoPull);
		GPIO_ConfigOutput(GPIOB, (I2C1_SDA_PIN_FLAG | I2C1_SCL_PIN_FLAG),
 8000fd8:	2303      	movs	r3, #3
 8000fda:	2201      	movs	r2, #1
 8000fdc:	21c0      	movs	r1, #192	; 0xc0
 8000fde:	4824      	ldr	r0, [pc, #144]	; (8001070 <I2C_InitGpioPins+0xbc>)
 8000fe0:	f7ff fe70 	bl	8000cc4 <GPIO_ConfigOutput>
				kGpioOTOpenDrain, kGpioSpeedVeryHigh);
		GPIO_ConfigAF(GPIOB, (I2C1_SDA_PIN_FLAG | I2C1_SCL_PIN_FLAG), kGpioAF4);
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	21c0      	movs	r1, #192	; 0xc0
 8000fe8:	4821      	ldr	r0, [pc, #132]	; (8001070 <I2C_InitGpioPins+0xbc>)
 8000fea:	f7ff feb7 	bl	8000d5c <GPIO_ConfigAF>
		GPIO_ConfigOutput(GPIOB, (I2C3_SDA_PIN_FLAG | I2C3_SCL_PIN_FLAG),
				kGpioOTOpenDrain, kGpioSpeedVeryHigh);
		GPIO_ConfigAF(GPIOB, (I2C3_SDA_PIN_FLAG | I2C3_SCL_PIN_FLAG), kGpioAF4);
	}

	return;
 8000fee:	e038      	b.n	8001062 <I2C_InitGpioPins+0xae>
	else if (p_handle_i2c->p_i2cx == I2C2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <I2C_InitGpioPins+0xc0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d119      	bne.n	800102e <I2C_InitGpioPins+0x7a>
		GPIO_ConfigBasic(GPIOB, (I2C2_SDA_PIN_FLAG | I2C2_SCL_PIN_FLAG),
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001002:	481b      	ldr	r0, [pc, #108]	; (8001070 <I2C_InitGpioPins+0xbc>)
 8001004:	f7ff fe10 	bl	8000c28 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOB, (I2C2_SDA_PIN_FLAG | I2C2_SCL_PIN_FLAG),
 8001008:	2303      	movs	r3, #3
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001010:	4817      	ldr	r0, [pc, #92]	; (8001070 <I2C_InitGpioPins+0xbc>)
 8001012:	f7ff fe57 	bl	8000cc4 <GPIO_ConfigOutput>
		GPIO_ConfigAF(GPIOB, I2C2_SDA_PIN_FLAG, kGpioAF9);
 8001016:	2209      	movs	r2, #9
 8001018:	2108      	movs	r1, #8
 800101a:	4815      	ldr	r0, [pc, #84]	; (8001070 <I2C_InitGpioPins+0xbc>)
 800101c:	f7ff fe9e 	bl	8000d5c <GPIO_ConfigAF>
		GPIO_ConfigAF(GPIOB, I2C2_SCL_PIN_FLAG, kGpioAF4);
 8001020:	2204      	movs	r2, #4
 8001022:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001026:	4812      	ldr	r0, [pc, #72]	; (8001070 <I2C_InitGpioPins+0xbc>)
 8001028:	f7ff fe98 	bl	8000d5c <GPIO_ConfigAF>
	return;
 800102c:	e019      	b.n	8001062 <I2C_InitGpioPins+0xae>
	else if (p_handle_i2c->p_i2cx == I2C3)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a11      	ldr	r2, [pc, #68]	; (8001078 <I2C_InitGpioPins+0xc4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d114      	bne.n	8001062 <I2C_InitGpioPins+0xae>
		GPIO_ConfigBasic(GPIOB, (I2C3_SDA_PIN_FLAG | I2C3_SCL_PIN_FLAG),
 8001038:	2300      	movs	r3, #0
 800103a:	2202      	movs	r2, #2
 800103c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <I2C_InitGpioPins+0xbc>)
 8001042:	f7ff fdf1 	bl	8000c28 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOB, (I2C3_SDA_PIN_FLAG | I2C3_SCL_PIN_FLAG),
 8001046:	2303      	movs	r3, #3
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800104e:	4808      	ldr	r0, [pc, #32]	; (8001070 <I2C_InitGpioPins+0xbc>)
 8001050:	f7ff fe38 	bl	8000cc4 <GPIO_ConfigOutput>
		GPIO_ConfigAF(GPIOB, (I2C3_SDA_PIN_FLAG | I2C3_SCL_PIN_FLAG), kGpioAF4);
 8001054:	2204      	movs	r2, #4
 8001056:	f44f 7140 	mov.w	r1, #768	; 0x300
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <I2C_InitGpioPins+0xbc>)
 800105c:	f7ff fe7e 	bl	8000d5c <GPIO_ConfigAF>
	return;
 8001060:	bf00      	nop
 8001062:	bf00      	nop
}
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40005400 	.word	0x40005400
 8001070:	40020400 	.word	0x40020400
 8001074:	40005800 	.word	0x40005800
 8001078:	40005c00 	.word	0x40005c00

0800107c <I2C_CalculateCCRandTRISE>:
 * @param[speed] - i2c desired speed
 * @return - void
 */
static void I2C_CalculateCCRandTRISE(I2c_Handle_t *p_handle_i2c,
		I2cSpeed_t speed)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
	// set speed
	uint16_t temp_ccr, temp_trise;
	uint8_t pclk_freq_Mhz = RCC_GetPclk(1) / 1000000;
 8001088:	2001      	movs	r0, #1
 800108a:	f000 fb43 	bl	8001714 <RCC_GetPclk>
 800108e:	4603      	mov	r3, r0
 8001090:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <I2C_CalculateCCRandTRISE+0x138>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	0c9b      	lsrs	r3, r3, #18
 8001098:	72fb      	strb	r3, [r7, #11]

	// set slow mode, reset DUTY
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_FS);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	69da      	ldr	r2, [r3, #28]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010a8:	61da      	str	r2, [r3, #28]
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_DUTY);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	69da      	ldr	r2, [r3, #28]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010b8:	61da      	str	r2, [r3, #28]

	// CCR calculation for slow mode -> values are coming from RM CCR register and
	// result is in [ns] (Thigh + Tlow) / (CEOFF * PCLK)
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW)
			/ (I2C_CCR_SM_COEFF * (1000 / pclk_freq_Mhz));
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW)
 80010ce:	81fb      	strh	r3, [r7, #14]

	// TRISE calculation for slow mode -> equation is from RM
	temp_trise = ((I2C_CCR_SM_TR_SCL * pclk_freq_Mhz) / 1000) + 1;
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <I2C_CalculateCCRandTRISE+0x13c>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	099b      	lsrs	r3, r3, #6
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	81bb      	strh	r3, [r7, #12]

	// fast mode
	if (speed != kI2cSpeedSlow)
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d03c      	beq.n	8001168 <I2C_CalculateCCRandTRISE+0xec>
	{
		// set fast mode
		p_handle_i2c->p_i2cx->CCR |= I2C_CCR_FS;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	69da      	ldr	r2, [r3, #28]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010fc:	61da      	str	r2, [r3, #28]
		// calculate CCR for fast mode with DUTY 0
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
				/ (I2C_CCR_FM_COEFF_DUTY0 * (1000 / pclk_freq_Mhz));
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001104:	fb92 f3f3 	sdiv	r3, r2, r3
 8001108:	461a      	mov	r2, r3
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001114:	fbb2 f3f3 	udiv	r3, r2, r3
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
 8001118:	81fb      	strh	r3, [r7, #14]
		// calculate TRISE for fast mode
		temp_trise = ((I2C_CCR_FM_TR_SCL * pclk_freq_Mhz) / 1000) + 1;
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <I2C_CalculateCCRandTRISE+0x13c>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	099b      	lsrs	r3, r3, #6
 800112c:	b29b      	uxth	r3, r3
 800112e:	3301      	adds	r3, #1
 8001130:	81bb      	strh	r3, [r7, #12]
		if (speed == kI2cSpeedFastDuty1)
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d117      	bne.n	8001168 <I2C_CalculateCCRandTRISE+0xec>
		{
			// set DUTY flag
			p_handle_i2c->p_i2cx->CCR |= I2C_CCR_DUTY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	69da      	ldr	r2, [r3, #28]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001146:	61da      	str	r2, [r3, #28]
			// calculate CCR with fast mode DUTY1
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
					/ (I2C_CCR_FM_COEFF_DUTY1 * (1000 / pclk_freq_Mhz));
 8001148:	7afb      	ldrb	r3, [r7, #11]
 800114a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800114e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001152:	461a      	mov	r2, r3
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	009a      	lsls	r2, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
 8001166:	81fb      	strh	r3, [r7, #14]
		}
	}
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_CCR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001176:	f023 030f 	bic.w	r3, r3, #15
 800117a:	61d3      	str	r3, [r2, #28]
	p_handle_i2c->p_i2cx->CCR |= (temp_ccr << I2C_CCR_CCR_Pos);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	69d9      	ldr	r1, [r3, #28]
 8001182:	89fa      	ldrh	r2, [r7, #14]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	61da      	str	r2, [r3, #28]

	// write correct TRISE to the register
	p_handle_i2c->p_i2cx->TRISE &= ~(I2C_TRISE_TRISE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6a1a      	ldr	r2, [r3, #32]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800119a:	621a      	str	r2, [r3, #32]
	p_handle_i2c->p_i2cx->TRISE |= (temp_trise << I2C_TRISE_TRISE_Pos);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6a19      	ldr	r1, [r3, #32]
 80011a2:	89ba      	ldrh	r2, [r7, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	621a      	str	r2, [r3, #32]

	return;
 80011ac:	bf00      	nop
}
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	431bde83 	.word	0x431bde83
 80011b8:	10624dd3 	.word	0x10624dd3

080011bc <I2C_SetBasicParameters>:
 * @param[*p_handle_i2c] - handler to i2c structure
 * @param[speed] - i2c desired speed
 * @return - void
 */
void I2C_SetBasicParameters(I2c_Handle_t *p_handle_i2c, I2cSpeed_t speed)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
	// reset I2C
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_SWRST;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011d6:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_SWRST);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e6:	601a      	str	r2, [r3, #0]

	// check frequency limits
	if (RCC_GetPclk(1) < I2C_FREQUENCY_MINIMUM
 80011e8:	2001      	movs	r0, #1
 80011ea:	f000 fa93 	bl	8001714 <RCC_GetPclk>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <I2C_SetBasicParameters+0xa8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d906      	bls.n	8001204 <I2C_SetBasicParameters+0x48>
			|| RCC_GetPclk(1) > I2C_FREQUENCY_MAXIMUM)
 80011f6:	2001      	movs	r0, #1
 80011f8:	f000 fa8c 	bl	8001714 <RCC_GetPclk>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <I2C_SetBasicParameters+0xac>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d903      	bls.n	800120c <I2C_SetBasicParameters+0x50>
	{
		p_handle_i2c->error = kI2cErrWrongPclkFreq;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	711a      	strb	r2, [r3, #4]
		return;
 800120a:	e027      	b.n	800125c <I2C_SetBasicParameters+0xa0>
	}

	// set frequency (same as ABP1 frequency)
	p_handle_i2c->p_i2cx->CR2 &= ~(I2C_CR2_FREQ);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800121a:	605a      	str	r2, [r3, #4]
	p_handle_i2c->p_i2cx->CR2 |=
			((RCC_GetPclk(1) / 1000000) << I2C_CR2_FREQ_Pos);
 800121c:	2001      	movs	r0, #1
 800121e:	f000 fa79 	bl	8001714 <RCC_GetPclk>
 8001222:	4603      	mov	r3, r0
 8001224:	4a11      	ldr	r2, [pc, #68]	; (800126c <I2C_SetBasicParameters+0xb0>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c99      	lsrs	r1, r3, #18
	p_handle_i2c->p_i2cx->CR2 |=
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	605a      	str	r2, [r3, #4]

	I2C_CalculateCCRandTRISE(p_handle_i2c, speed);
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff1c 	bl	800107c <I2C_CalculateCCRandTRISE>

	// enable I2c
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_PE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
	p_handle_i2c->error = kI2cErrNoError;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	711a      	strb	r2, [r3, #4]

	// check if bus is not stuck
	// I2C_CheckIfBusIsHanging(p_handle_i2c);

	return;
 800125a:	bf00      	nop
}
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	001e847f 	.word	0x001e847f
 8001268:	02faf080 	.word	0x02faf080
 800126c:	431bde83 	.word	0x431bde83

08001270 <I2C_SendAddress>:
 * @Mode
 * @return - void
 */
static void I2C_SendAddress(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t mode)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
 800127c:	4613      	mov	r3, r2
 800127e:	70bb      	strb	r3, [r7, #2]
	uint8_t temp_byte;
	// 1.0 Set START BIT
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_START;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800128e:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800129e:	601a      	str	r2, [r3, #0]
	// 1.1 Wait until SB flag is set
	while (!(I2C_SR1_SB & p_handle_i2c->p_i2cx->SR1))
 80012a0:	bf00      	nop
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
		break;;
	// 1.2 Clear SB by reading SR1
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	73fb      	strb	r3, [r7, #15]
	// If transmitting set slave addres LSB to 0, receiver 1
	slave_address &= (~1U);
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	70fb      	strb	r3, [r7, #3]
	slave_address |= mode;
 80012be:	78fa      	ldrb	r2, [r7, #3]
 80012c0:	78bb      	ldrb	r3, [r7, #2]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	70fb      	strb	r3, [r7, #3]
	// 2. Put slave address in DR register -
	p_handle_i2c->p_i2cx->DR = slave_address;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	78fa      	ldrb	r2, [r7, #3]
 80012cc:	611a      	str	r2, [r3, #16]
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <I2C_Transmit>:
 * @param[data_size] - amount of data to be send [in bytes]
 * @return - uint8_t - to return error
 */
void I2C_Transmit(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t mem_address, uint8_t *p_tx_data_buffer, uint32_t data_size)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	72fb      	strb	r3, [r7, #11]
 80012e8:	4613      	mov	r3, r2
 80012ea:	72bb      	strb	r3, [r7, #10]
	uint32_t tx_data_to_send = data_size;
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	617b      	str	r3, [r7, #20]
	uint8_t temp_byte;

	I2C_SendAddress(p_handle_i2c, slave_address, I2C_MODE_TRANSMITTER);
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7ff ffba 	bl	8001270 <I2C_SendAddress>
	// wait until ADDR is set
	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 80012fc:	bf00      	nop
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f8      	beq.n	80012fe <I2C_Transmit+0x24>
		;
	// 4. ADDR is cleared by reading SR1 , Read SR2
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	74fb      	strb	r3, [r7, #19]
	temp_byte = p_handle_i2c->p_i2cx->SR2;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	74fb      	strb	r3, [r7, #19]

	// 5. TxE bit is set when acknowledge bit is sent
	while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 800131c:	bf00      	nop
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f8      	beq.n	800131e <I2C_Transmit+0x44>
		;
	// 6. Write memory address to DR to clear TxE
	p_handle_i2c->p_i2cx->DR = mem_address;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	7aba      	ldrb	r2, [r7, #10]
 8001332:	611a      	str	r2, [r3, #16]

	// 7. Data transfer
	while (tx_data_to_send > 0)
 8001334:	e026      	b.n	8001384 <I2C_Transmit+0xaa>
	{
		// wait until data register is empty
		while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 8001336:	bf00      	nop
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f8      	beq.n	8001338 <I2C_Transmit+0x5e>
			;

		// put data in data register
		p_handle_i2c->p_i2cx->DR =
				p_tx_data_buffer[data_size - tx_data_to_send];
 8001346:	6a3a      	ldr	r2, [r7, #32]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	781a      	ldrb	r2, [r3, #0]
		p_handle_i2c->p_i2cx->DR =
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	611a      	str	r2, [r3, #16]

		// change counters
		tx_data_to_send--;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3b01      	subs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]

		// 8. After last bit is written to DR register , Set STOP bit  and interface
		// is going back to slave mode
		if (tx_data_to_send == 0)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10f      	bne.n	8001384 <I2C_Transmit+0xaa>
		{
			// check if data transfer is finsihed
			while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_BTF))
 8001364:	bf00      	nop
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f8      	beq.n	8001366 <I2C_Transmit+0x8c>
				;
			// stop transfer
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001382:	601a      	str	r2, [r3, #0]
	while (tx_data_to_send > 0)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1d5      	bne.n	8001336 <I2C_Transmit+0x5c>
		}
	}

	// in case of sending only mem address
	while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 800138a:	bf00      	nop
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f8      	beq.n	800138c <I2C_Transmit+0xb2>
		;
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a8:	601a      	str	r2, [r3, #0]

	return;
 80013aa:	bf00      	nop
}
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <I2C_Receive>:

void I2C_Receive(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t *p_rx_data_buffer, uint32_t data_size)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	460b      	mov	r3, r1
 80013c0:	72fb      	strb	r3, [r7, #11]
	uint32_t rx_data_to_get = data_size;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	617b      	str	r3, [r7, #20]
	uint8_t temp_byte;

	I2C_SendAddress(p_handle_i2c, slave_address, I2C_MODE_RECEIVER);
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff ff4f 	bl	8001270 <I2C_SendAddress>

	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 80013d2:	bf00      	nop
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f8      	beq.n	80013d4 <I2C_Receive+0x22>
		;

	// single byte receive
	if (data_size == 1)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	f040 808e 	bne.w	8001506 <I2C_Receive+0x154>
	{
		// Disable acknowledge
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013f8:	601a      	str	r2, [r3, #0]
		// 4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	74fb      	strb	r3, [r7, #19]

		// stop comm
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001418:	601a      	str	r2, [r3, #0]

		// wait for a byte received
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 800141a:	bf00      	nop
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f8      	beq.n	800141c <I2C_Receive+0x6a>
			;

		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6919      	ldr	r1, [r3, #16]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	b2ca      	uxtb	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]

		return;
 800143e:	e066      	b.n	800150e <I2C_Receive+0x15c>

	// multiple bytes receive
	while (rx_data_to_get >= 2)
	{
		// 4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	74fb      	strb	r3, [r7, #19]

		// read all the bytes until second last
		while (rx_data_to_get > 2)
 8001450:	e01c      	b.n	800148c <I2C_Receive+0xda>
		{
			while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 8001452:	bf00      	nop
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f8      	beq.n	8001454 <I2C_Receive+0xa2>
				;
			p_rx_data_buffer[data_size - rx_data_to_get] =
					p_handle_i2c->p_i2cx->DR;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6919      	ldr	r1, [r3, #16]
			p_rx_data_buffer[data_size - rx_data_to_get] =
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
			rx_data_to_get--;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3b01      	subs	r3, #1
 800147a:	617b      	str	r3, [r7, #20]

			// ack receive
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800148a:	601a      	str	r2, [r3, #0]
		while (rx_data_to_get > 2)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d8df      	bhi.n	8001452 <I2C_Receive+0xa0>
		}

		// read second last byte
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 8001492:	bf00      	nop
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f8      	beq.n	8001494 <I2C_Receive+0xe2>
			;
		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6919      	ldr	r1, [r3, #16]
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	b2ca      	uxtb	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]

		// after second last byte clear ACK and set stop
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ca:	601a      	str	r2, [r3, #0]
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014da:	601a      	str	r2, [r3, #0]

		// receive last byte
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 80014dc:	bf00      	nop
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f8      	beq.n	80014de <I2C_Receive+0x12c>
			;
		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6919      	ldr	r1, [r3, #16]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	b2ca      	uxtb	r2, r1
 80014fe:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3b01      	subs	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
	while (rx_data_to_get >= 2)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d899      	bhi.n	8001440 <I2C_Receive+0x8e>
	}

	return;
 800150c:	bf00      	nop
}
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <RCC_CalculatePllclk>:

	return 0;
}

static uint32_t RCC_CalculatePllclk(uint32_t source)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <RCC_CalculatePllclk+0x5c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	b29b      	uxth	r3, r3
 8001522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001526:	81fb      	strh	r3, [r7, #14]
	;
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <RCC_CalculatePllclk+0x5c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	099b      	lsrs	r3, r3, #6
 800152e:	b29b      	uxth	r3, r3
 8001530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001534:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <RCC_CalculatePllclk+0x5c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	0c1b      	lsrs	r3, r3, #16
 800153c:	b29b      	uxth	r3, r3
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	817b      	strh	r3, [r7, #10]
	;

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 8001544:	897b      	ldrh	r3, [r7, #10]
 8001546:	3301      	adds	r3, #1
 8001548:	b29b      	uxth	r3, r3
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 800154e:	89fb      	ldrh	r3, [r7, #14]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	89ba      	ldrh	r2, [r7, #12]
 8001558:	fb02 f203 	mul.w	r2, r2, r3
 800155c:	897b      	ldrh	r3, [r7, #10]
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b07      	cmp	r3, #7
 8001582:	d822      	bhi.n	80015ca <RCC_GetApbPrescaler+0x56>
 8001584:	a201      	add	r2, pc, #4	; (adr r2, 800158c <RCC_GetApbPrescaler+0x18>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	080015ad 	.word	0x080015ad
 8001590:	080015cb 	.word	0x080015cb
 8001594:	080015cb 	.word	0x080015cb
 8001598:	080015cb 	.word	0x080015cb
 800159c:	080015b3 	.word	0x080015b3
 80015a0:	080015b9 	.word	0x080015b9
 80015a4:	080015bf 	.word	0x080015bf
 80015a8:	080015c5 	.word	0x080015c5
	{
	case (RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
		break;
 80015b0:	e00b      	b.n	80015ca <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	60fb      	str	r3, [r7, #12]
		break;
 80015b6:	e008      	b.n	80015ca <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 80015b8:	2304      	movs	r3, #4
 80015ba:	60fb      	str	r3, [r7, #12]
		break;
 80015bc:	e005      	b.n	80015ca <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 80015be:	2308      	movs	r3, #8
 80015c0:	60fb      	str	r3, [r7, #12]
		break;
 80015c2:	e002      	b.n	80015ca <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 80015c4:	2310      	movs	r3, #16
 80015c6:	60fb      	str	r3, [r7, #12]
		break;
 80015c8:	bf00      	nop
	}

	return apb_prescaler;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	b29b      	uxth	r3, r3
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop

080015dc <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d840      	bhi.n	800166e <RCC_GetAhbPrescaler+0x92>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <RCC_GetAhbPrescaler+0x18>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	08001635 	.word	0x08001635
 80015f8:	0800166f 	.word	0x0800166f
 80015fc:	0800166f 	.word	0x0800166f
 8001600:	0800166f 	.word	0x0800166f
 8001604:	0800166f 	.word	0x0800166f
 8001608:	0800166f 	.word	0x0800166f
 800160c:	0800166f 	.word	0x0800166f
 8001610:	0800166f 	.word	0x0800166f
 8001614:	0800163b 	.word	0x0800163b
 8001618:	08001641 	.word	0x08001641
 800161c:	08001647 	.word	0x08001647
 8001620:	0800164d 	.word	0x0800164d
 8001624:	08001653 	.word	0x08001653
 8001628:	08001659 	.word	0x08001659
 800162c:	0800165f 	.word	0x0800165f
 8001630:	08001667 	.word	0x08001667
	{
	case (RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 8001634:	2301      	movs	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
		break;
 8001638:	e019      	b.n	800166e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 800163a:	2302      	movs	r3, #2
 800163c:	60fb      	str	r3, [r7, #12]
		break;
 800163e:	e016      	b.n	800166e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 8001640:	2304      	movs	r3, #4
 8001642:	60fb      	str	r3, [r7, #12]
		break;
 8001644:	e013      	b.n	800166e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 8001646:	2308      	movs	r3, #8
 8001648:	60fb      	str	r3, [r7, #12]
		break;
 800164a:	e010      	b.n	800166e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 800164c:	2310      	movs	r3, #16
 800164e:	60fb      	str	r3, [r7, #12]
		break;
 8001650:	e00d      	b.n	800166e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 8001652:	2340      	movs	r3, #64	; 0x40
 8001654:	60fb      	str	r3, [r7, #12]
		break;
 8001656:	e00a      	b.n	800166e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	60fb      	str	r3, [r7, #12]
		break;
 800165c:	e007      	b.n	800166e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 800165e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001662:	60fb      	str	r3, [r7, #12]
		break;
 8001664:	e003      	b.n	800166e <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 8001666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166a:	60fb      	str	r3, [r7, #12]
		break;
 800166c:	bf00      	nop
	}

	return ahb_prescaler;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	b29b      	uxth	r3, r3
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop

08001680 <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <RCC_GetSysclk+0x54>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d00a      	beq.n	80016a6 <RCC_GetSysclk+0x26>
 8001690:	2b08      	cmp	r3, #8
 8001692:	d81c      	bhi.n	80016ce <RCC_GetSysclk+0x4e>
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <RCC_GetSysclk+0x1e>
 8001698:	2b04      	cmp	r3, #4
 800169a:	d002      	beq.n	80016a2 <RCC_GetSysclk+0x22>
 800169c:	e017      	b.n	80016ce <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <RCC_GetSysclk+0x58>)
 80016a0:	e016      	b.n	80016d0 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e014      	b.n	80016d0 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <RCC_GetSysclk+0x54>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <RCC_GetSysclk+0x3a>
 80016b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b6:	d005      	beq.n	80016c4 <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 80016b8:	e009      	b.n	80016ce <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 80016ba:	4807      	ldr	r0, [pc, #28]	; (80016d8 <RCC_GetSysclk+0x58>)
 80016bc:	f7ff ff2a 	bl	8001514 <RCC_CalculatePllclk>
 80016c0:	4603      	mov	r3, r0
 80016c2:	e005      	b.n	80016d0 <RCC_GetSysclk+0x50>
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff ff25 	bl	8001514 <RCC_CalculatePllclk>
 80016ca:	4603      	mov	r3, r0
 80016cc:	e000      	b.n	80016d0 <RCC_GetSysclk+0x50>
	}

	return 0;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	00f42400 	.word	0x00f42400

080016dc <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 80016e2:	f7ff ffcd 	bl	8001680 <RCC_GetSysclk>
 80016e6:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <RCC_GetHclk+0x34>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff70 	bl	80015dc <RCC_GetAhbPrescaler>
 80016fc:	4603      	mov	r3, r0
 80016fe:	807b      	strh	r3, [r7, #2]
	return sysclk / ahb_prescaler;
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800

08001714 <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 800171e:	f7ff ffdd 	bl	80016dc <RCC_GetHclk>
 8001722:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch (plck_x)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d002      	beq.n	8001730 <RCC_GetPclk+0x1c>
 800172a:	2b02      	cmp	r3, #2
 800172c:	d00d      	beq.n	800174a <RCC_GetPclk+0x36>
 800172e:	e019      	b.n	8001764 <RCC_GetPclk+0x50>
	{
	case (1):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >>
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <RCC_GetPclk+0x60>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	0a9b      	lsrs	r3, r3, #10
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ff18 	bl	8001574 <RCC_GetApbPrescaler>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE1_Pos);
		break;
 8001748:	e00c      	b.n	8001764 <RCC_GetPclk+0x50>

	case (2):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >>
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <RCC_GetPclk+0x60>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	0b5b      	lsrs	r3, r3, #13
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff0b 	bl	8001574 <RCC_GetApbPrescaler>
 800175e:	4603      	mov	r3, r0
 8001760:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE2_Pos);
		break;
 8001762:	bf00      	nop
	}

	return hclk / apb_prescaler;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800

08001778 <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs *freqs)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	freqs->sysclk = RCC_GetSysclk();
 8001780:	f7ff ff7e 	bl	8001680 <RCC_GetSysclk>
 8001784:	4602      	mov	r2, r0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 800178a:	f7ff ffa7 	bl	80016dc <RCC_GetHclk>
 800178e:	4602      	mov	r2, r0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff ffbd 	bl	8001714 <RCC_GetPclk>
 800179a:	4602      	mov	r2, r0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 80017a0:	2002      	movs	r0, #2
 80017a2:	f7ff ffb7 	bl	8001714 <RCC_GetPclk>
 80017a6:	4602      	mov	r2, r0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	60da      	str	r2, [r3, #12]

	return;
 80017ac:	bf00      	nop
}
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <USART_InitClock>:
 * Init USART clock
 * @param[*p_handle_usart] - handler to usart struct
 * @return - void
 */
void USART_InitClock(USART_Handle_t *p_handle_usart)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	if (p_handle_usart->p_usartx == USART1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <USART_InitClock+0xa4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d112      	bne.n	8001828 <USART_InitClock+0x38>
	{
		RCC_CLOCK_USART1_ENABLE();
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <USART_InitClock+0xa8>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <USART_InitClock+0xa8>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
		RCC_RESET_USART1();
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <USART_InitClock+0xa8>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	4a21      	ldr	r2, [pc, #132]	; (8001898 <USART_InitClock+0xa8>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6253      	str	r3, [r2, #36]	; 0x24
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <USART_InitClock+0xa8>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <USART_InitClock+0xa8>)
 8001820:	f023 0310 	bic.w	r3, r3, #16
 8001824:	6253      	str	r3, [r2, #36]	; 0x24
	{
		RCC_CLOCK_USART6_ENABLE();
		RCC_RESET_USART6();
	}

	return;
 8001826:	e02f      	b.n	8001888 <USART_InitClock+0x98>
	else if (p_handle_usart->p_usartx == USART2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1b      	ldr	r2, [pc, #108]	; (800189c <USART_InitClock+0xac>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d112      	bne.n	8001858 <USART_InitClock+0x68>
		RCC_CLOCK_USART2_ENABLE();
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <USART_InitClock+0xa8>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <USART_InitClock+0xa8>)
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_USART2();
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <USART_InitClock+0xa8>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a15      	ldr	r2, [pc, #84]	; (8001898 <USART_InitClock+0xa8>)
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <USART_InitClock+0xa8>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <USART_InitClock+0xa8>)
 8001850:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001854:	6213      	str	r3, [r2, #32]
	return;
 8001856:	e017      	b.n	8001888 <USART_InitClock+0x98>
	else if (p_handle_usart->p_usartx == USART6)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <USART_InitClock+0xb0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d112      	bne.n	8001888 <USART_InitClock+0x98>
		RCC_CLOCK_USART6_ENABLE();
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <USART_InitClock+0xa8>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <USART_InitClock+0xa8>)
 8001868:	f043 0320 	orr.w	r3, r3, #32
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
		RCC_RESET_USART6();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <USART_InitClock+0xa8>)
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <USART_InitClock+0xa8>)
 8001874:	f043 0320 	orr.w	r3, r3, #32
 8001878:	6253      	str	r3, [r2, #36]	; 0x24
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <USART_InitClock+0xa8>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	4a06      	ldr	r2, [pc, #24]	; (8001898 <USART_InitClock+0xa8>)
 8001880:	f023 0320 	bic.w	r3, r3, #32
 8001884:	6253      	str	r3, [r2, #36]	; 0x24
	return;
 8001886:	bf00      	nop
 8001888:	bf00      	nop
}
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40011000 	.word	0x40011000
 8001898:	40023800 	.word	0x40023800
 800189c:	40004400 	.word	0x40004400
 80018a0:	40011400 	.word	0x40011400

080018a4 <USART_InitGpioPins>:
 * Init GPIO pins for usart peripheral
 * @param[*p_handle_usart] - handler to usart struct
 * @return - void
 */
void USART_InitGpioPins(USART_Handle_t *p_handle_usart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

	if(p_handle_usart->p_usartx == USART2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <USART_InitGpioPins+0x40>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d111      	bne.n	80018da <USART_InitGpioPins+0x36>
	{
		// PA2 RX PA3 TX
		GPIO_ConfigBasic(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioModeAF, kGpioPUPDNoPull);
 80018b6:	2300      	movs	r3, #0
 80018b8:	2202      	movs	r2, #2
 80018ba:	210c      	movs	r1, #12
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <USART_InitGpioPins+0x44>)
 80018be:	f7ff f9b3 	bl	8000c28 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioOTOpenDrain, kGpioSpeedVeryHigh);
 80018c2:	2303      	movs	r3, #3
 80018c4:	2201      	movs	r2, #1
 80018c6:	210c      	movs	r1, #12
 80018c8:	4807      	ldr	r0, [pc, #28]	; (80018e8 <USART_InitGpioPins+0x44>)
 80018ca:	f7ff f9fb 	bl	8000cc4 <GPIO_ConfigOutput>
		GPIO_ConfigAF(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioAF7);
 80018ce:	2207      	movs	r2, #7
 80018d0:	210c      	movs	r1, #12
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <USART_InitGpioPins+0x44>)
 80018d4:	f7ff fa42 	bl	8000d5c <GPIO_ConfigAF>

	}

	return;
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
}
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40004400 	.word	0x40004400
 80018e8:	40020000 	.word	0x40020000

080018ec <USART_SetBaudRate>:
 * @param[oversampling] - oversampling method 8/16
 * @return - void
 */
void USART_SetBaudRate(USART_Handle_t *p_handle_usart, uint32_t baud_rate,
		UsartOversampling_t oversampling)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	4613      	mov	r3, r2
 80018f8:	71fb      	strb	r3, [r7, #7]
	uint16_t baud_div_mantissa;
	uint8_t baud_div_fraction;

	// set oversampling

	p_handle_usart->p_usartx->CR1 |= (oversampling << USART_CR1_OVER8_Pos);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	03db      	lsls	r3, r3, #15
 8001904:	4619      	mov	r1, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	60da      	str	r2, [r3, #12]
	// in equation we have 8 * (2 - OVER8)
	uint8_t usart_divmulti =
			8
					* (2
							- (1U
									& (p_handle_usart->p_usartx->CR1
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
											>> USART_CR1_OVER8_Pos)));
 8001914:	0bdb      	lsrs	r3, r3, #15
									& (p_handle_usart->p_usartx->CR1
 8001916:	f003 0301 	and.w	r3, r3, #1
							- (1U
 800191a:	f1c3 0302 	rsb	r3, r3, #2
	uint8_t usart_divmulti =
 800191e:	b2db      	uxtb	r3, r3
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	// read clock values from rcc registers
	RCC_GetClockFrequencies(&clock_freqs);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff24 	bl	8001778 <RCC_GetClockFrequencies>

	if (p_handle_usart->p_usartx == USART2)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a35      	ldr	r2, [pc, #212]	; (8001a0c <USART_SetBaudRate+0x120>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d102      	bne.n	8001940 <USART_SetBaudRate+0x54>
	{
		pclk_freq = clock_freqs.pclk1;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193e:	e001      	b.n	8001944 <USART_SetBaudRate+0x58>
	}
	else
	{
		// usart1 and usart6 are on apb2
		pclk_freq = clock_freqs.pclk2;
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	baud_div = ((float) pclk_freq / (baud_rate * usart_divmulti));
 8001944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800194e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001964:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	baud_div_mantissa = baud_div;
 8001968:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800196c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001970:	ee17 3a90 	vmov	r3, s15
 8001974:	857b      	strh	r3, [r7, #42]	; 0x2a
	// rounding number to get correct fraction
	baud_div_fraction = round((baud_div - baud_div_mantissa) * usart_divmulti);
 8001976:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001980:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001988:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001998:	ee17 0a90 	vmov	r0, s15
 800199c:	f7fe fd7e 	bl	800049c <__aeabi_f2d>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	ec43 2b10 	vmov	d0, r2, r3
 80019a8:	f000 f8da 	bl	8001b60 <round>
 80019ac:	ec53 2b10 	vmov	r2, r3, d0
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7fe fdca 	bl	800054c <__aeabi_d2uiz>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	// if after rounding we have value bigger or equal to oversampling then we
	// need to carry +1 to mantissa and set fraction to 0. like 50,99 -> 51;
	if (baud_div_fraction >= usart_divmulti)
 80019be:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80019c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d305      	bcc.n	80019d6 <USART_SetBaudRate+0xea>
	{
		baud_div_fraction = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		baud_div_mantissa++;
 80019d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019d2:	3301      	adds	r3, #1
 80019d4:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	// insert values to brr register
	p_handle_usart->p_usartx->BRR = 0;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
			<< USART_BRR_DIV_Mantissa_Pos);
 80019e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4619      	mov	r1, r3
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6899      	ldr	r1, [r3, #8]
			<< USART_BRR_DIV_Fraction_Pos);
 80019f8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	609a      	str	r2, [r3, #8]
}
 8001a04:	bf00      	nop
 8001a06:	3730      	adds	r7, #48	; 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40004400 	.word	0x40004400

08001a10 <USART_EnableIRQs>:
 * @param[CR3_flags] - IRQ flags in CR3
 * @return - void
 */
void USART_EnableIRQs(USART_Handle_t *p_handle_usart, uint32_t CR1_flags,
		uint32_t CR2_flags, uint32_t CR3_flags)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 8001a1e:	2026      	movs	r0, #38	; 0x26
 8001a20:	f7ff fec8 	bl	80017b4 <__NVIC_EnableIRQ>
	// CR1 - PEIE,TXEIE,TCIE,RXNEIE,IDLEIE
	if (CR1_flags)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <USART_EnableIRQs+0x2a>
	{
		p_handle_usart->p_usartx->CR1 |= CR1_flags;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68d9      	ldr	r1, [r3, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	60da      	str	r2, [r3, #12]
	}

	// CR2 - LBDIE
	if (CR2_flags)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <USART_EnableIRQs+0x40>
	{
		p_handle_usart->p_usartx->CR2 |= CR2_flags;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6919      	ldr	r1, [r3, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	611a      	str	r2, [r3, #16]
	}

	// CR3 - CTSIE, EIE
	if (CR3_flags)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d008      	beq.n	8001a68 <USART_EnableIRQs+0x58>
	{
		p_handle_usart->p_usartx->CR1 |= CR3_flags;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68d9      	ldr	r1, [r3, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]
	}

	return;
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
}
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <USART_SetBasicParameters>:
 * @return - void
 */
void USART_SetBasicParameters(USART_Handle_t *p_handle_usart,
		UsartWordLenght_t word_lenght, UsartStopBits_t stop_bits,
		UsartParity_t parity)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	70fb      	strb	r3, [r7, #3]
 8001a82:	460b      	mov	r3, r1
 8001a84:	70bb      	strb	r3, [r7, #2]
 8001a86:	4613      	mov	r3, r2
 8001a88:	707b      	strb	r3, [r7, #1]
	//	enable the USART by writing the UE bit in USART_CR1 register to 1.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_UE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a98:	60da      	str	r2, [r3, #12]
	//	program the M bit in USART_CR1 to define the word length.
	p_handle_usart->p_usartx->CR1 |= (word_lenght << USART_CR1_M_Pos);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	031b      	lsls	r3, r3, #12
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	60da      	str	r2, [r3, #12]
	//	program the number of stop bits in USART_CR2.
	p_handle_usart->p_usartx->CR1 |= (stop_bits << USART_CR2_STOP_Pos);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	78bb      	ldrb	r3, [r7, #2]
 8001ab6:	031b      	lsls	r3, r3, #12
 8001ab8:	4619      	mov	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	60da      	str	r2, [r3, #12]
	// program parity control
	if (parity != kUsartNoParity)
 8001ac2:	787b      	ldrb	r3, [r7, #1]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d011      	beq.n	8001aec <USART_SetBasicParameters+0x7c>
	{
		p_handle_usart->p_usartx->CR1 |= USART_CR1_PCE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ad6:	60da      	str	r2, [r3, #12]
		p_handle_usart->p_usartx->CR1 |= (parity << USART_CR1_PS_Pos);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	787b      	ldrb	r3, [r7, #1]
 8001ae0:	025b      	lsls	r3, r3, #9
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	60da      	str	r2, [r3, #12]
	}

	//clear TC flag
	p_handle_usart->p_usartx->SR &= ~(USART_SR_TC);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afa:	601a      	str	r2, [r3, #0]
	return;
 8001afc:	bf00      	nop
}
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <__libc_init_array>:
 8001b08:	b570      	push	{r4, r5, r6, lr}
 8001b0a:	4d0d      	ldr	r5, [pc, #52]	; (8001b40 <__libc_init_array+0x38>)
 8001b0c:	4c0d      	ldr	r4, [pc, #52]	; (8001b44 <__libc_init_array+0x3c>)
 8001b0e:	1b64      	subs	r4, r4, r5
 8001b10:	10a4      	asrs	r4, r4, #2
 8001b12:	2600      	movs	r6, #0
 8001b14:	42a6      	cmp	r6, r4
 8001b16:	d109      	bne.n	8001b2c <__libc_init_array+0x24>
 8001b18:	4d0b      	ldr	r5, [pc, #44]	; (8001b48 <__libc_init_array+0x40>)
 8001b1a:	4c0c      	ldr	r4, [pc, #48]	; (8001b4c <__libc_init_array+0x44>)
 8001b1c:	f000 f866 	bl	8001bec <_init>
 8001b20:	1b64      	subs	r4, r4, r5
 8001b22:	10a4      	asrs	r4, r4, #2
 8001b24:	2600      	movs	r6, #0
 8001b26:	42a6      	cmp	r6, r4
 8001b28:	d105      	bne.n	8001b36 <__libc_init_array+0x2e>
 8001b2a:	bd70      	pop	{r4, r5, r6, pc}
 8001b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b30:	4798      	blx	r3
 8001b32:	3601      	adds	r6, #1
 8001b34:	e7ee      	b.n	8001b14 <__libc_init_array+0xc>
 8001b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b3a:	4798      	blx	r3
 8001b3c:	3601      	adds	r6, #1
 8001b3e:	e7f2      	b.n	8001b26 <__libc_init_array+0x1e>
 8001b40:	08001c04 	.word	0x08001c04
 8001b44:	08001c04 	.word	0x08001c04
 8001b48:	08001c04 	.word	0x08001c04
 8001b4c:	08001c08 	.word	0x08001c08

08001b50 <memset>:
 8001b50:	4402      	add	r2, r0
 8001b52:	4603      	mov	r3, r0
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d100      	bne.n	8001b5a <memset+0xa>
 8001b58:	4770      	bx	lr
 8001b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b5e:	e7f9      	b.n	8001b54 <memset+0x4>

08001b60 <round>:
 8001b60:	ec51 0b10 	vmov	r0, r1, d0
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8001b6a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8001b6e:	2c13      	cmp	r4, #19
 8001b70:	ee10 2a10 	vmov	r2, s0
 8001b74:	460b      	mov	r3, r1
 8001b76:	dc19      	bgt.n	8001bac <round+0x4c>
 8001b78:	2c00      	cmp	r4, #0
 8001b7a:	da09      	bge.n	8001b90 <round+0x30>
 8001b7c:	3401      	adds	r4, #1
 8001b7e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8001b82:	d103      	bne.n	8001b8c <round+0x2c>
 8001b84:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8001b88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	e028      	b.n	8001be2 <round+0x82>
 8001b90:	4d15      	ldr	r5, [pc, #84]	; (8001be8 <round+0x88>)
 8001b92:	4125      	asrs	r5, r4
 8001b94:	ea01 0605 	and.w	r6, r1, r5
 8001b98:	4332      	orrs	r2, r6
 8001b9a:	d00e      	beq.n	8001bba <round+0x5a>
 8001b9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ba0:	fa42 f404 	asr.w	r4, r2, r4
 8001ba4:	4423      	add	r3, r4
 8001ba6:	ea23 0305 	bic.w	r3, r3, r5
 8001baa:	e7ef      	b.n	8001b8c <round+0x2c>
 8001bac:	2c33      	cmp	r4, #51	; 0x33
 8001bae:	dd07      	ble.n	8001bc0 <round+0x60>
 8001bb0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001bb4:	d101      	bne.n	8001bba <round+0x5a>
 8001bb6:	f7fe fb13 	bl	80001e0 <__adddf3>
 8001bba:	ec41 0b10 	vmov	d0, r0, r1
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
 8001bc0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8001bc4:	f04f 35ff 	mov.w	r5, #4294967295
 8001bc8:	40f5      	lsrs	r5, r6
 8001bca:	4228      	tst	r0, r5
 8001bcc:	d0f5      	beq.n	8001bba <round+0x5a>
 8001bce:	2101      	movs	r1, #1
 8001bd0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8001bd4:	fa01 f404 	lsl.w	r4, r1, r4
 8001bd8:	1912      	adds	r2, r2, r4
 8001bda:	bf28      	it	cs
 8001bdc:	185b      	addcs	r3, r3, r1
 8001bde:	ea22 0105 	bic.w	r1, r2, r5
 8001be2:	4608      	mov	r0, r1
 8001be4:	4619      	mov	r1, r3
 8001be6:	e7e8      	b.n	8001bba <round+0x5a>
 8001be8:	000fffff 	.word	0x000fffff

08001bec <_init>:
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	bf00      	nop
 8001bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf2:	bc08      	pop	{r3}
 8001bf4:	469e      	mov	lr, r3
 8001bf6:	4770      	bx	lr

08001bf8 <_fini>:
 8001bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfa:	bf00      	nop
 8001bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bfe:	bc08      	pop	{r3}
 8001c00:	469e      	mov	lr, r3
 8001c02:	4770      	bx	lr
