
cmsis_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000190c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001aa0  08001aa8  00011aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001aa0  08001aa0  00011aa8  2**0
                  CONTENTS
  4 .ARM          00000000  08001aa0  08001aa0  00011aa8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001aa0  08001aa8  00011aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa0  08001aa0  00011aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aa4  08001aa4  00011aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000000  08001aa8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001aa8  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011aa8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005be4  00000000  00000000  00011ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f84  00000000  00000000  000176bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b8  00000000  00000000  00018640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000230  00000000  00000000  000188f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e8ac  00000000  00000000  00018b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000039fd  00000000  00000000  000273d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056e52  00000000  00000000  0002add1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00081c23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a4c  00000000  00000000  00081c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001a88 	.word	0x08001a88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08001a88 	.word	0x08001a88

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_d2uiz>:
 800054c:	004a      	lsls	r2, r1, #1
 800054e:	d211      	bcs.n	8000574 <__aeabi_d2uiz+0x28>
 8000550:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000554:	d211      	bcs.n	800057a <__aeabi_d2uiz+0x2e>
 8000556:	d50d      	bpl.n	8000574 <__aeabi_d2uiz+0x28>
 8000558:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800055c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000560:	d40e      	bmi.n	8000580 <__aeabi_d2uiz+0x34>
 8000562:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800056e:	fa23 f002 	lsr.w	r0, r3, r2
 8000572:	4770      	bx	lr
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	4770      	bx	lr
 800057a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800057e:	d102      	bne.n	8000586 <__aeabi_d2uiz+0x3a>
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	4770      	bx	lr
 8000586:	f04f 0000 	mov.w	r0, #0
 800058a:	4770      	bx	lr

0800058c <main>:
// #include "gpio_exti_example.h"
// #include "gpio_example.h"
//#include "usart_dma_example.h"
 #include "i2c_bmp180_example.h"
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
//	wwdg_example();
//	gpio_exti_example();
//	gpio_example();
//	usart_dma_example();
	i2c_bmp180_example();
 8000590:	f000 fa0a 	bl	80009a8 <i2c_bmp180_example>
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <SystemInit+0x20>)
 80005a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <SystemInit+0x20>)
 80005a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005dc:	4c0b      	ldr	r4, [pc, #44]	; (800060c <LoopFillZerobss+0x26>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ea:	f7ff ffd7 	bl	800059c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f001 f9d9 	bl	80019a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f2:	f7ff ffcb 	bl	800058c <main>
  bx  lr    
 80005f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000604:	08001aa8 	.word	0x08001aa8
  ldr r2, =_sbss
 8000608:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800060c:	20000074 	.word	0x20000074

08000610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>

08000612 <bmp180_delay>:
#include "bmp180.h"
#include "stm32f401xe_i2c.h"


static void bmp180_delay(uint32_t ms)
{
 8000612:	b480      	push	{r7}
 8000614:	b085      	sub	sp, #20
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < ms; i++)
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	e002      	b.n	8000626 <bmp180_delay+0x14>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	d3f8      	bcc.n	8000620 <bmp180_delay+0xe>
	{

	}
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <bmp180_i2c_read>:

static void bmp180_i2c_read(I2c_Handle_t *p_i2c_handle, uint8_t slave_address,
		uint8_t mem_address, uint8_t *p_rx_data_buffer, uint32_t data_size)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af02      	add	r7, sp, #8
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	72fb      	strb	r3, [r7, #11]
 800064a:	4613      	mov	r3, r2
 800064c:	72bb      	strb	r3, [r7, #10]
	// transmit address and register
	I2C_Transmit(p_i2c_handle, slave_address, mem_address, 0, 0);
 800064e:	7aba      	ldrb	r2, [r7, #10]
 8000650:	7af9      	ldrb	r1, [r7, #11]
 8000652:	2300      	movs	r3, #0
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f000 fd8c 	bl	8001176 <I2C_Transmit>
	bmp180_delay(BMP_TEMP_CONV_TIME * 10000);
 800065e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000662:	f7ff ffd6 	bl	8000612 <bmp180_delay>
	// receive
	I2C_Receive(p_i2c_handle, slave_address, p_rx_data_buffer, data_size);
 8000666:	7af9      	ldrb	r1, [r7, #11]
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f000 fdee 	bl	800124e <I2C_Receive>

	return;
 8000672:	bf00      	nop
}
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <bmp180_i2c_write>:

static void bmp180_i2c_write(I2c_Handle_t *p_i2c_handle, uint8_t slave_address,
		uint8_t mem_address, uint8_t *p_tx_data_buffer, uint32_t data_size)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af02      	add	r7, sp, #8
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	72fb      	strb	r3, [r7, #11]
 8000688:	4613      	mov	r3, r2
 800068a:	72bb      	strb	r3, [r7, #10]
	// transmit address, register and data
	I2C_Transmit(p_i2c_handle, slave_address, mem_address, p_tx_data_buffer,
 800068c:	7aba      	ldrb	r2, [r7, #10]
 800068e:	7af9      	ldrb	r1, [r7, #11]
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f000 fd6d 	bl	8001176 <I2C_Transmit>
			data_size);

	return;
 800069c:	bf00      	nop
}
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <bmp180_read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t bmp180_read_chip_id(bmp180_t *p_bmp)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	6078      	str	r0, [r7, #4]
	uint8_t out_buff = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73bb      	strb	r3, [r7, #14]
	uint8_t ret_val = NO_ERR;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

	bmp180_i2c_read(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_CHIP_ID_REG,
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006b8:	f107 030e 	add.w	r3, r7, #14
 80006bc:	2201      	movs	r2, #1
 80006be:	9200      	str	r2, [sp, #0]
 80006c0:	22d0      	movs	r2, #208	; 0xd0
 80006c2:	21ef      	movs	r1, #239	; 0xef
 80006c4:	f7ff ffba 	bl	800063c <bmp180_i2c_read>
			&out_buff,
			1);
			
	if (BMP_CHIP_ID_VAL != out_buff)
 80006c8:	7bbb      	ldrb	r3, [r7, #14]
 80006ca:	2b55      	cmp	r3, #85	; 0x55
 80006cc:	d001      	beq.n	80006d2 <bmp180_read_chip_id+0x2e>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <bmp180_set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void bmp180_set_oss(bmp180_t *p_bmp, oss_ratio_t ratio)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80006e8:	2300      	movs	r3, #0
 80006ea:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d81e      	bhi.n	8000730 <bmp180_set_oss+0x54>
 80006f2:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <bmp180_set_oss+0x1c>)
 80006f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f8:	08000709 	.word	0x08000709
 80006fc:	08000713 	.word	0x08000713
 8000700:	0800071d 	.word	0x0800071d
 8000704:	08000727 	.word	0x08000727
	{
		case ULTRA_LOW_PWR_MODE:
		{
		p_bmp->oss.wait_time = BMP_OSS0_CONV_TIME;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2205      	movs	r2, #5
 800070c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 8000710:	e013      	b.n	800073a <bmp180_set_oss+0x5e>
		}
		case STANDARD_MODE:
		{
		p_bmp->oss.wait_time = BMP_OSS1_CONV_TIME;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2208      	movs	r2, #8
 8000716:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 800071a:	e00e      	b.n	800073a <bmp180_set_oss+0x5e>
		}
		case HIGH:
		{
		p_bmp->oss.wait_time = BMP_OSS2_CONV_TIME;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	220e      	movs	r2, #14
 8000720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 8000724:	e009      	b.n	800073a <bmp180_set_oss+0x5e>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
		p_bmp->oss.wait_time = BMP_OSS3_CONV_TIME;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	221a      	movs	r2, #26
 800072a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 800072e:	e004      	b.n	800073a <bmp180_set_oss+0x5e>
		}
		default:
		{
		p_bmp->oss.wait_time = BMP_OSS1_CONV_TIME;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2208      	movs	r2, #8
 8000734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 8000738:	bf00      	nop
		}
	}

	p_bmp->oss.ratio = ratio;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	78fa      	ldrb	r2, [r7, #3]
 800073e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	019b      	lsls	r3, r3, #6
 8000746:	70fb      	strb	r3, [r7, #3]
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	737b      	strb	r3, [r7, #13]
	bmp180_i2c_write(p_bmp->p_i2c_handle, BMP_WRITE_ADDR, BMP_CTRL_REG, in_buff,
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2202      	movs	r2, #2
 8000756:	9200      	str	r2, [sp, #0]
 8000758:	22f4      	movs	r2, #244	; 0xf4
 800075a:	21ee      	movs	r1, #238	; 0xee
 800075c:	f7ff ff8d 	bl	800067a <bmp180_i2c_write>
			2);
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <bmp180_read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t bmp180_read_calib_data(bmp180_t *p_bmp)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af02      	add	r7, sp, #8
 800076e:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8000770:	2300      	movs	r3, #0
 8000772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int16_t *calib_data = (int16_t*) &p_bmp->calib;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	623b      	str	r3, [r7, #32]

	bmp180_i2c_read(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_CALIB_ADDR,
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2216      	movs	r2, #22
 80007a4:	9200      	str	r2, [sp, #0]
 80007a6:	22aa      	movs	r2, #170	; 0xaa
 80007a8:	21ef      	movs	r1, #239	; 0xef
 80007aa:	f7ff ff47 	bl	800063c <bmp180_i2c_read>
			out_buff,
			BMP_CALIB_DATA_SIZE);
	
	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80007b4:	e03e      	b.n	8000834 <bmp180_read_calib_data+0xcc>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 80007b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007c0:	4413      	add	r3, r2
 80007c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	b219      	sxth	r1, r3
 80007ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007d2:	4413      	add	r3, r2
 80007d4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80007d8:	b21a      	sxth	r2, r3
 80007da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	6a38      	ldr	r0, [r7, #32]
 80007e2:	4403      	add	r3, r0
 80007e4:	430a      	orrs	r2, r1
 80007e6:	b212      	sxth	r2, r2
 80007e8:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80007ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	6a3a      	ldr	r2, [r7, #32]
 80007f2:	4413      	add	r3, r2
 80007f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf0c      	ite	eq
 80007fc:	2301      	moveq	r3, #1
 80007fe:	2300      	movne	r3, #0
 8000800:	b2da      	uxtb	r2, r3
 8000802:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	6a39      	ldr	r1, [r7, #32]
 800080a:	440b      	add	r3, r1
 800080c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000814:	bf0c      	ite	eq
 8000816:	2301      	moveq	r3, #1
 8000818:	2300      	movne	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <bmp180_read_calib_data+0xc2>
		{
			ret_val = GET_CALIB_ERR;
 8000824:	2302      	movs	r3, #2
 8000826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800082a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800082e:	3301      	adds	r3, #1
 8000830:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000834:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000838:	2b0b      	cmp	r3, #11
 800083a:	d9bc      	bls.n	80007b6 <bmp180_read_calib_data+0x4e>
		}
	}

	return ret_val;
 800083c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000840:	4618      	mov	r0, r3
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <bmp180_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp180_init(bmp180_t *p_bmp, I2c_Handle_t *p_i2c_handle)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]

	memset(p_bmp, 0x00, sizeof(&p_bmp)); // clear bmp strut;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2204      	movs	r2, #4
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f001 f8c7 	bl	80019ec <memset>
	p_bmp->p_i2c_handle = p_i2c_handle;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	63da      	str	r2, [r3, #60]	; 0x3c
	p_bmp->err = bmp180_read_chip_id(p_bmp); // check chip validity and I2C communication.
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	687c      	ldr	r4, [r7, #4]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff1b 	bl	80006a4 <bmp180_read_chip_id>
 800086e:	4603      	mov	r3, r0
 8000870:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	p_bmp->err = bmp180_read_calib_data(p_bmp);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	687c      	ldr	r4, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff75 	bl	8000768 <bmp180_read_calib_data>
 800087e:	4603      	mov	r3, r0
 8000880:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp180_set_oss(p_bmp, HIGH);       // set oversampling settings
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2102      	movs	r1, #2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff27 	bl	80006dc <bmp180_set_oss>
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bd90      	pop	{r4, r7, pc}

08000896 <bmp180_get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t bmp180_get_ut(bmp180_t *p_bmp)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af02      	add	r7, sp, #8
 800089c:	6078      	str	r0, [r7, #4]
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800089e:	232e      	movs	r3, #46	; 0x2e
 80008a0:	733b      	strb	r3, [r7, #12]
	bmp180_i2c_write(p_bmp->p_i2c_handle, BMP_WRITE_ADDR, BMP_CTRL_REG,
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2201      	movs	r2, #1
 80008ac:	9200      	str	r2, [sp, #0]
 80008ae:	22f4      	movs	r2, #244	; 0xf4
 80008b0:	21ee      	movs	r1, #238	; 0xee
 80008b2:	f7ff fee2 	bl	800067a <bmp180_i2c_write>
			out_buff,
			1);
	bmp180_delay(BMP_TEMP_CONV_TIME * 10000);
 80008b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80008ba:	f7ff feaa 	bl	8000612 <bmp180_delay>
	bmp180_i2c_read(p_bmp->p_i2c_handle, BMP_READ_ADDR, BMP_DATA_MSB_ADDR,
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2202      	movs	r2, #2
 80008c8:	9200      	str	r2, [sp, #0]
 80008ca:	22f6      	movs	r2, #246	; 0xf6
 80008cc:	21ef      	movs	r1, #239	; 0xef
 80008ce:	f7ff feb5 	bl	800063c <bmp180_i2c_read>
			out_buff,
			2);

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	7b7a      	ldrb	r2, [r7, #13]
 80008d8:	4313      	orrs	r3, r2
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <bmp180_get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float bmp180_get_temp(bmp180_t *p_bmp)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t) p_bmp->uncomp.temp - p_bmp->calib.AC6) * p_bmp->calib.AC5)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8000900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000904:	ee17 2a90 	vmov	r2, s15
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	895b      	ldrh	r3, [r3, #10]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	8912      	ldrh	r2, [r2, #8]
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	13db      	asrs	r3, r3, #15
 8000918:	617b      	str	r3, [r7, #20]
			>> 15;
	X2 = (p_bmp->calib.MC << 11) / (X1 + p_bmp->calib.MD);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000920:	02da      	lsls	r2, r3, #11
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000928:	4619      	mov	r1, r3
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	440b      	add	r3, r1
 800092e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000932:	613b      	str	r3, [r7, #16]
	p_bmp->data.B5 = X1 + X2;
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	441a      	add	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((p_bmp->data.B5 + 8) >> 4) * 0.1f;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	3308      	adds	r3, #8
 8000944:	111b      	asrs	r3, r3, #4
 8000946:	ee07 3a90 	vmov	s15, r3
 800094a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800094e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800099c <bmp180_get_temp+0xb8>
 8000952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000956:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800095a:	edd7 7a03 	vldr	s15, [r7, #12]
 800095e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80009a0 <bmp180_get_temp+0xbc>
 8000962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	d908      	bls.n	800097e <bmp180_get_temp+0x9a>
 800096c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000970:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80009a4 <bmp180_get_temp+0xc0>
 8000974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097c:	db03      	blt.n	8000986 <bmp180_get_temp+0xa2>
	{
		p_bmp->err = GET_TEMP_ERR;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2203      	movs	r2, #3
 8000982:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	ee07 3a90 	vmov	s15, r3
}
 800098c:	eeb0 0a67 	vmov.f32	s0, s15
 8000990:	371c      	adds	r7, #28
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	3dcccccd 	.word	0x3dcccccd
 80009a0:	c2200000 	.word	0xc2200000
 80009a4:	42aa0000 	.word	0x42aa0000

080009a8 <i2c_bmp180_example>:
USART_Handle_t p_usart2;
I2c_Handle_t p_i2c1;
bmp180_t p_bmp180;

void i2c_bmp180_example(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

	// config peripherals
	I2C1Config(&p_i2c1);
 80009ae:	4816      	ldr	r0, [pc, #88]	; (8000a08 <i2c_bmp180_example+0x60>)
 80009b0:	f000 f87a 	bl	8000aa8 <I2C1Config>
	GPIOConfig();
 80009b4:	f000 f832 	bl	8000a1c <GPIOConfig>
	USART2Config(&p_usart2);
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <i2c_bmp180_example+0x64>)
 80009ba:	f000 f845 	bl	8000a48 <USART2Config>


	bmp180_init(&p_bmp180, &p_i2c1);
 80009be:	4912      	ldr	r1, [pc, #72]	; (8000a08 <i2c_bmp180_example+0x60>)
 80009c0:	4813      	ldr	r0, [pc, #76]	; (8000a10 <i2c_bmp180_example+0x68>)
 80009c2:	f7ff ff41 	bl	8000848 <bmp180_init>
	p_bmp180.uncomp.temp = bmp180_get_ut(&p_bmp180);
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <i2c_bmp180_example+0x68>)
 80009c8:	f7ff ff65 	bl	8000896 <bmp180_get_ut>
 80009cc:	ee07 0a90 	vmov	s15, r0
 80009d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <i2c_bmp180_example+0x68>)
 80009d6:	edc3 7a06 	vstr	s15, [r3, #24]
	p_bmp180.data.temp = bmp180_get_temp(&p_bmp180);
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <i2c_bmp180_example+0x68>)
 80009dc:	f7ff ff82 	bl	80008e4 <bmp180_get_temp>
 80009e0:	eef0 7a40 	vmov.f32	s15, s0
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <i2c_bmp180_example+0x68>)
 80009e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	while (1)
	{
		for (uint32_t i = 0; i < 100000; i++)
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	e002      	b.n	80009f6 <i2c_bmp180_example+0x4e>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <i2c_bmp180_example+0x6c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d9f8      	bls.n	80009f0 <i2c_bmp180_example+0x48>
		{
		}
		GPIO_TogglePin(GPIOA, kGpioPin5);
 80009fe:	2105      	movs	r1, #5
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <i2c_bmp180_example+0x70>)
 8000a02:	f000 f9f5 	bl	8000df0 <GPIO_TogglePin>
		for (uint32_t i = 0; i < 100000; i++)
 8000a06:	e7f0      	b.n	80009ea <i2c_bmp180_example+0x42>
 8000a08:	2000006c 	.word	0x2000006c
 8000a0c:	2000001c 	.word	0x2000001c
 8000a10:	2000002c 	.word	0x2000002c
 8000a14:	0001869f 	.word	0x0001869f
 8000a18:	40020000 	.word	0x40020000

08000a1c <GPIOConfig>:

/*
 * configure LED on the board
 */
void GPIOConfig(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	// PA5 Led
	GPIO_InitClock(GPIOA);
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <GPIOConfig+0x28>)
 8000a22:	f000 f85d 	bl	8000ae0 <GPIO_InitClock>
	GPIO_ConfigBasic(GPIOA, GPIO_FLAG_PIN_5, kGpioModeOutput, kGpioPUPDNoPull);
 8000a26:	2300      	movs	r3, #0
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <GPIOConfig+0x28>)
 8000a2e:	f000 f8fb 	bl	8000c28 <GPIO_ConfigBasic>
	GPIO_ConfigOutput(GPIOA, GPIO_FLAG_PIN_5, kGpioOTPushPull, kGpioSpeedHigh);
 8000a32:	2302      	movs	r3, #2
 8000a34:	2200      	movs	r2, #0
 8000a36:	2120      	movs	r1, #32
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <GPIOConfig+0x28>)
 8000a3a:	f000 f943 	bl	8000cc4 <GPIO_ConfigOutput>
	return;
 8000a3e:	bf00      	nop
}
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40020000 	.word	0x40020000

08000a48 <USART2Config>:
 * - set basic parameters
 * - set baud rate
 * - enable usart irqs
 */
void USART2Config(USART_Handle_t *p_usart2)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	p_usart2->p_usartx = USART2;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <USART2Config+0x54>)
 8000a54:	601a      	str	r2, [r3, #0]
	p_usart2->usart_dma.p_dma_stream_tx = DMA1_Stream6;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <USART2Config+0x58>)
 8000a5a:	605a      	str	r2, [r3, #4]
	p_usart2->usart_dma.p_dma_stream_rx = DMA1_Stream5;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <USART2Config+0x5c>)
 8000a60:	609a      	str	r2, [r3, #8]
	USART_InitClock(p_usart2);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 fe12 	bl	800168c <USART_InitClock>
	USART_InitGpioPins(p_usart2);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 fe69 	bl	8001740 <USART_InitGpioPins>
	USART_SetBasicParameters(p_usart2, kUsartWordLenght8, kUsartStopBits0,
 8000a6e:	2302      	movs	r3, #2
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 ff49 	bl	800190c <USART_SetBasicParameters>
			kUsartNoParity);
	USART_SetBaudRate(p_usart2, 115200, kUsartOversampling16);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 fe81 	bl	8001788 <USART_SetBaudRate>
	USART_EnableIRQs(p_usart2, USART_CR1_IDLEIE, 0, USART_CR3_EIE);
 8000a86:	2301      	movs	r3, #1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 ff0d 	bl	80018ac <USART_EnableIRQs>
	return;
 8000a92:	bf00      	nop
}
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	400260a0 	.word	0x400260a0
 8000aa4:	40026088 	.word	0x40026088

08000aa8 <I2C1Config>:

void I2C1Config(I2c_Handle_t *p_i2c1)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	p_i2c1->p_i2cx = I2C1;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <I2C1Config+0x30>)
 8000ab4:	601a      	str	r2, [r3, #0]
	I2C_InitClock(p_i2c1);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f9b0 	bl	8000e1c <I2C_InitClock>
	GPIO_InitClock(GPIOB);
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <I2C1Config+0x34>)
 8000abe:	f000 f80f 	bl	8000ae0 <GPIO_InitClock>
	I2C_InitGpioPins(p_i2c1);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 fa04 	bl	8000ed0 <I2C_InitGpioPins>
	I2C_SetBasicParameters(p_i2c1, kI2cSpeedFastDuty0);
 8000ac8:	2101      	movs	r1, #1
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 fac4 	bl	8001058 <I2C_SetBasicParameters>
	return;
 8000ad0:	bf00      	nop
}
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	40020400 	.word	0x40020400

08000ae0 <GPIO_InitClock>:
 * Starts clock for GPIO and resets the peripheral
 * @param[*p_GPIOx] - gpiox base address
 * @return - void
 */
void GPIO_InitClock(GPIO_TypeDef *GPIO)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a48      	ldr	r2, [pc, #288]	; (8000c0c <GPIO_InitClock+0x12c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d112      	bne.n	8000b16 <GPIO_InitClock+0x36>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8000af0:	4b47      	ldr	r3, [pc, #284]	; (8000c10 <GPIO_InitClock+0x130>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a46      	ldr	r2, [pc, #280]	; (8000c10 <GPIO_InitClock+0x130>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOA();
 8000afc:	4b44      	ldr	r3, [pc, #272]	; (8000c10 <GPIO_InitClock+0x130>)
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	4a43      	ldr	r2, [pc, #268]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6113      	str	r3, [r2, #16]
 8000b08:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b0a:	691b      	ldr	r3, [r3, #16]
 8000b0c:	4a40      	ldr	r2, [pc, #256]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b0e:	f023 0301 	bic.w	r3, r3, #1
 8000b12:	6113      	str	r3, [r2, #16]
 8000b14:	e071      	b.n	8000bfa <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOB)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a3e      	ldr	r2, [pc, #248]	; (8000c14 <GPIO_InitClock+0x134>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d112      	bne.n	8000b44 <GPIO_InitClock+0x64>
	{
		RCC_CLOCK_GPIOB_ENABLE();
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a3b      	ldr	r2, [pc, #236]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOB();
 8000b2a:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	4a38      	ldr	r2, [pc, #224]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6113      	str	r3, [r2, #16]
 8000b36:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b3c:	f023 0302 	bic.w	r3, r3, #2
 8000b40:	6113      	str	r3, [r2, #16]
 8000b42:	e05a      	b.n	8000bfa <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOC)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a34      	ldr	r2, [pc, #208]	; (8000c18 <GPIO_InitClock+0x138>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d112      	bne.n	8000b72 <GPIO_InitClock+0x92>
	{
		RCC_CLOCK_GPIOC_ENABLE();
 8000b4c:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a2f      	ldr	r2, [pc, #188]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOC();
 8000b58:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	4a2c      	ldr	r2, [pc, #176]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6113      	str	r3, [r2, #16]
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	4a29      	ldr	r2, [pc, #164]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b6a:	f023 0304 	bic.w	r3, r3, #4
 8000b6e:	6113      	str	r3, [r2, #16]
 8000b70:	e043      	b.n	8000bfa <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOD)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <GPIO_InitClock+0x13c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d112      	bne.n	8000ba0 <GPIO_InitClock+0xc0>
	{
		RCC_CLOCK_GPIOD_ENABLE();
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOD();
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	6113      	str	r3, [r2, #16]
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <GPIO_InitClock+0x130>)
 8000b98:	f023 0308 	bic.w	r3, r3, #8
 8000b9c:	6113      	str	r3, [r2, #16]
 8000b9e:	e02c      	b.n	8000bfa <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOE)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <GPIO_InitClock+0x140>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d112      	bne.n	8000bce <GPIO_InitClock+0xee>
	{
		RCC_CLOCK_GPIOE_ENABLE();
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <GPIO_InitClock+0x130>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bae:	f043 0310 	orr.w	r3, r3, #16
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOE();
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6113      	str	r3, [r2, #16]
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bc6:	f023 0310 	bic.w	r3, r3, #16
 8000bca:	6113      	str	r3, [r2, #16]
 8000bcc:	e015      	b.n	8000bfa <GPIO_InitClock+0x11a>
	}
	else if (GPIO == GPIOH)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <GPIO_InitClock+0x144>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d111      	bne.n	8000bfa <GPIO_InitClock+0x11a>
	{
		RCC_CLOCK_GPIOH_ENABLE();
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
		RCC_RESET_GPIOH();
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <GPIO_InitClock+0x130>)
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <GPIO_InitClock+0x130>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6113      	str	r3, [r2, #16]
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <GPIO_InitClock+0x130>)
 8000bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bf8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bfa:	f3bf 8f4f 	dsb	sy
}
 8000bfe:	bf00      	nop
	// this operation is unnecessary here because configuration library is taking
	// more than 2 clock cycles between clock enable and configuring register, i
	// leave it here to remind myself that stmf401x has a limitation that is
	// described in errata point 2.1.6
	__DSB();
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40021c00 	.word	0x40021c00

08000c28 <GPIO_ConfigBasic>:
 * @param[PUPD] - nopull/pullup/pulldown
 * @return - void
 */
void GPIO_ConfigBasic(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags,
		GpioMode_t mode, GpioPUPD_t PUPD)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	4608      	mov	r0, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	4603      	mov	r3, r0
 8000c38:	807b      	strh	r3, [r7, #2]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	707b      	strb	r3, [r7, #1]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	703b      	strb	r3, [r7, #0]


	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	81fb      	strh	r3, [r7, #14]
 8000c46:	e034      	b.n	8000cb2 <GPIO_ConfigBasic+0x8a>
	{
		if(pin_flags >> pin_count & 1U)
 8000c48:	887a      	ldrh	r2, [r7, #2]
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	fa42 f303 	asr.w	r3, r2, r3
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d029      	beq.n	8000cac <GPIO_ConfigBasic+0x84>
		{
			//mode
			p_GPIOx->MODER &= ~(0x03U << (pin_count * 2));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2103      	movs	r1, #3
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	401a      	ands	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
			p_GPIOx->MODER |= mode << (pin_count * 2);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	7879      	ldrb	r1, [r7, #1]
 8000c74:	89fa      	ldrh	r2, [r7, #14]
 8000c76:	0052      	lsls	r2, r2, #1
 8000c78:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	601a      	str	r2, [r3, #0]

			//PUPD
			p_GPIOx->PUPDR &= ~(0x03U << (pin_count * 2));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	89fb      	ldrh	r3, [r7, #14]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	401a      	ands	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60da      	str	r2, [r3, #12]
			p_GPIOx->PUPDR |= (PUPD << (pin_count * 2));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	7839      	ldrb	r1, [r7, #0]
 8000c9e:	89fa      	ldrh	r2, [r7, #14]
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60da      	str	r2, [r3, #12]
	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	81fb      	strh	r3, [r7, #14]
 8000cb2:	89fb      	ldrh	r3, [r7, #14]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d9c7      	bls.n	8000c48 <GPIO_ConfigBasic+0x20>
		}
	}

	return;
 8000cb8:	bf00      	nop

}
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <GPIO_ConfigOutput>:
 * @param[speed] - slow/medium/fast/veryfast
 * @return - void
 */
void GPIO_ConfigOutput(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags,
		GpioOutputType_t output_type, GpioSpeed_t speed)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	4608      	mov	r0, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	807b      	strh	r3, [r7, #2]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	707b      	strb	r3, [r7, #1]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	703b      	strb	r3, [r7, #0]

	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	81fb      	strh	r3, [r7, #14]
 8000ce2:	e032      	b.n	8000d4a <GPIO_ConfigOutput+0x86>
	{
		if(pin_flags >> pin_count & 1U)
 8000ce4:	887a      	ldrh	r2, [r7, #2]
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	fa42 f303 	asr.w	r3, r2, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d027      	beq.n	8000d44 <GPIO_ConfigOutput+0x80>
		{
	// speed selection
	p_GPIOx->OSPEEDR &= ~(0x03U << (pin_count * 2));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	401a      	ands	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	609a      	str	r2, [r3, #8]
	p_GPIOx->OSPEEDR |= (speed << (pin_count * 2));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	7839      	ldrb	r1, [r7, #0]
 8000d10:	89fa      	ldrh	r2, [r7, #14]
 8000d12:	0052      	lsls	r2, r2, #1
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]

	// output type selection
	p_GPIOx->OTYPER &= ~(0x01U << pin_count);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	2101      	movs	r1, #1
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	605a      	str	r2, [r3, #4]
	p_GPIOx->OTYPER |= (output_type << pin_count);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	7879      	ldrb	r1, [r7, #1]
 8000d38:	89fa      	ldrh	r2, [r7, #14]
 8000d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	605a      	str	r2, [r3, #4]
	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000d44:	89fb      	ldrh	r3, [r7, #14]
 8000d46:	3301      	adds	r3, #1
 8000d48:	81fb      	strh	r3, [r7, #14]
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d9c9      	bls.n	8000ce4 <GPIO_ConfigOutput+0x20>
		}
	}
	return;
 8000d50:	bf00      	nop
}
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <GPIO_ConfigAF>:
 * @param[pin_flags] - (GPIO_FLAG_PINx | GPIO_FLAG_PINy)
 * @param[af] - alternate function number
 * @return - void
 */
void GPIO_ConfigAF(GPIO_TypeDef *p_GPIOx, uint16_t pin_flags, GpioAF_t af)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	707b      	strb	r3, [r7, #1]
	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	81fb      	strh	r3, [r7, #14]
 8000d70:	e035      	b.n	8000dde <GPIO_ConfigAF+0x82>
	{
		if(pin_flags >> pin_count & 1U)
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 8000d76:	fa42 f303 	asr.w	r3, r2, r3
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d02a      	beq.n	8000dd8 <GPIO_ConfigAF+0x7c>
		{
	// clear 4 AF bits and set new value
	p_GPIOx->AFR[pin_count / 8] &= ~(15UL << ((pin_count) * 4));
 8000d82:	89fb      	ldrh	r3, [r7, #14]
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	b298      	uxth	r0, r3
 8000d88:	4602      	mov	r2, r0
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	210f      	movs	r1, #15
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	ea02 0103 	and.w	r1, r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f100 0208 	add.w	r2, r0, #8
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_GPIOx->AFR[pin_count / 8] |= (af << ((pin_count % 8) * 4));
 8000dac:	89fb      	ldrh	r3, [r7, #14]
 8000dae:	08db      	lsrs	r3, r3, #3
 8000db0:	b298      	uxth	r0, r3
 8000db2:	4602      	mov	r2, r0
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dbc:	7879      	ldrb	r1, [r7, #1]
 8000dbe:	89fa      	ldrh	r2, [r7, #14]
 8000dc0:	f002 0207 	and.w	r2, r2, #7
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4602      	mov	r2, r0
 8000dce:	4319      	orrs	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint16_t pin_count = 0 ; pin_count<16; pin_count++)
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	81fb      	strh	r3, [r7, #14]
 8000dde:	89fb      	ldrh	r3, [r7, #14]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d9c6      	bls.n	8000d72 <GPIO_ConfigAF+0x16>
		}
	}
	return;
 8000de4:	bf00      	nop
}
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <GPIO_TogglePin>:
 * @param[*p_GPIOx] - base address of gpiox peripheral
 * @param[pin] - pin number
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *p_GPIOx, GpioPinNumber_t pin)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
	p_GPIOx->ODR ^= 0x01U << pin;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695a      	ldr	r2, [r3, #20]
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	405a      	eors	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	615a      	str	r2, [r3, #20]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <I2C_InitClock>:
 *
 * @param[*p_i2cx] - base address of i2c peripheral
 * @return - void
 */
void I2C_InitClock(I2c_Handle_t *p_handle_i2c)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	if (p_handle_i2c->p_i2cx == I2C1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <I2C_InitClock+0xa4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d112      	bne.n	8000e54 <I2C_InitClock+0x38>
	{
		RCC_CLOCK_I2C1_ENABLE();
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_I2C1();
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e44:	6213      	str	r3, [r2, #32]
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e50:	6213      	str	r3, [r2, #32]
	{
		RCC_CLOCK_I2C3_ENABLE();
		RCC_RESET_I2C3();
	}

	return;
 8000e52:	e02f      	b.n	8000eb4 <I2C_InitClock+0x98>
	else if (p_handle_i2c->p_i2cx == I2C2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <I2C_InitClock+0xac>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d112      	bne.n	8000e84 <I2C_InitClock+0x68>
		RCC_CLOCK_I2C2_ENABLE();
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_I2C2();
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e74:	6213      	str	r3, [r2, #32]
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e80:	6213      	str	r3, [r2, #32]
	return;
 8000e82:	e017      	b.n	8000eb4 <I2C_InitClock+0x98>
	else if (p_handle_i2c->p_i2cx == I2C3)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <I2C_InitClock+0xb0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d112      	bne.n	8000eb4 <I2C_InitClock+0x98>
		RCC_CLOCK_I2C3_ENABLE();
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_I2C3();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ea4:	6213      	str	r3, [r2, #32]
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <I2C_InitClock+0xa8>)
 8000eac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000eb0:	6213      	str	r3, [r2, #32]
	return;
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
}
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40005800 	.word	0x40005800
 8000ecc:	40005c00 	.word	0x40005c00

08000ed0 <I2C_InitGpioPins>:
 * @param[*p_i2cx] - i2c address
 * @param[alternate_pos] - pins alternative positions select
 * @return - void
 */
void I2C_InitGpioPins(I2c_Handle_t *p_handle_i2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

	if (p_handle_i2c->p_i2cx == I2C1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <I2C_InitGpioPins+0x40>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d111      	bne.n	8000f06 <I2C_InitGpioPins+0x36>
	{
		// PB6 SCL PB7 SDA
		GPIO_ConfigBasic(GPIOB, (GPIO_FLAG_PIN_6 | GPIO_FLAG_PIN_7), kGpioModeAF, kGpioPUPDNoPull);
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	21c0      	movs	r1, #192	; 0xc0
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <I2C_InitGpioPins+0x44>)
 8000eea:	f7ff fe9d 	bl	8000c28 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOB, (GPIO_FLAG_PIN_6 | GPIO_FLAG_PIN_7), kGpioOTOpenDrain, kGpioSpeedVeryHigh);
 8000eee:	2303      	movs	r3, #3
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	21c0      	movs	r1, #192	; 0xc0
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <I2C_InitGpioPins+0x44>)
 8000ef6:	f7ff fee5 	bl	8000cc4 <GPIO_ConfigOutput>
		GPIO_ConfigAF(GPIOB, (GPIO_FLAG_PIN_6 | GPIO_FLAG_PIN_7), kGpioAF4);
 8000efa:	2204      	movs	r2, #4
 8000efc:	21c0      	movs	r1, #192	; 0xc0
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <I2C_InitGpioPins+0x44>)
 8000f00:	f7ff ff2c 	bl	8000d5c <GPIO_ConfigAF>

	}

	return;
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
}
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40005400 	.word	0x40005400
 8000f14:	40020400 	.word	0x40020400

08000f18 <I2C_CalculateCCRandTRISE>:
 * @param[speed] - i2c desired speed
 * @return - void
 */
static void I2C_CalculateCCRandTRISE(I2c_Handle_t *p_handle_i2c,
		I2cSpeed_t speed)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
	// set speed
	uint16_t temp_ccr, temp_trise;
	uint8_t pclk_freq_Mhz = RCC_GetPclk(1) / 1000000;
 8000f24:	2001      	movs	r0, #1
 8000f26:	f000 fb43 	bl	80015b0 <RCC_GetPclk>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a48      	ldr	r2, [pc, #288]	; (8001050 <I2C_CalculateCCRandTRISE+0x138>)
 8000f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f32:	0c9b      	lsrs	r3, r3, #18
 8000f34:	72fb      	strb	r3, [r7, #11]

	// set slow mode, reset DUTY
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_FS);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69da      	ldr	r2, [r3, #28]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f44:	61da      	str	r2, [r3, #28]
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_DUTY);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	69da      	ldr	r2, [r3, #28]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f54:	61da      	str	r2, [r3, #28]

	// CCR calculation for slow mode -> values are coming from RM CCR register and
	// result is in [ns] (Thigh + Tlow) / (CEOFF * PCLK)
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW)
			/ (I2C_CCR_SM_COEFF * (1000 / pclk_freq_Mhz));
 8000f56:	7afb      	ldrb	r3, [r7, #11]
 8000f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW)
 8000f6a:	81fb      	strh	r3, [r7, #14]

	// TRISE calculation for slow mode -> equation is from RM
	temp_trise = ((I2C_CCR_SM_TR_SCL * pclk_freq_Mhz) / 1000) + 1;
 8000f6c:	7afb      	ldrb	r3, [r7, #11]
 8000f6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
 8000f76:	4a37      	ldr	r2, [pc, #220]	; (8001054 <I2C_CalculateCCRandTRISE+0x13c>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	099b      	lsrs	r3, r3, #6
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3301      	adds	r3, #1
 8000f82:	81bb      	strh	r3, [r7, #12]

	// fast mode
	if (speed != kI2cSpeedSlow)
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d03c      	beq.n	8001004 <I2C_CalculateCCRandTRISE+0xec>
	{
		// set fast mode
		p_handle_i2c->p_i2cx->CCR |= I2C_CCR_FS;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	69da      	ldr	r2, [r3, #28]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f98:	61da      	str	r2, [r3, #28]
		// calculate CCR for fast mode with DUTY 0
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
				/ (I2C_CCR_FM_COEFF_DUTY0 * (1000 / pclk_freq_Mhz));
 8000f9a:	7afb      	ldrb	r3, [r7, #11]
 8000f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000fb0:	fbb2 f3f3 	udiv	r3, r2, r3
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
 8000fb4:	81fb      	strh	r3, [r7, #14]
		// calculate TRISE for fast mode
		temp_trise = ((I2C_CCR_FM_TR_SCL * pclk_freq_Mhz) / 1000) + 1;
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	4a24      	ldr	r2, [pc, #144]	; (8001054 <I2C_CalculateCCRandTRISE+0x13c>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	099b      	lsrs	r3, r3, #6
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	81bb      	strh	r3, [r7, #12]
		if (speed == kI2cSpeedFastDuty1)
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d117      	bne.n	8001004 <I2C_CalculateCCRandTRISE+0xec>
		{
			// set DUTY flag
			p_handle_i2c->p_i2cx->CCR |= I2C_CCR_DUTY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	69da      	ldr	r2, [r3, #28]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fe2:	61da      	str	r2, [r3, #28]
			// calculate CCR with fast mode DUTY1
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
					/ (I2C_CCR_FM_COEFF_DUTY1 * (1000 / pclk_freq_Mhz));
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fea:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009a      	lsls	r2, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW)
 8001002:	81fb      	strh	r3, [r7, #14]
		}
	}
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_CCR);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001012:	f023 030f 	bic.w	r3, r3, #15
 8001016:	61d3      	str	r3, [r2, #28]
	p_handle_i2c->p_i2cx->CCR |= (temp_ccr << I2C_CCR_CCR_Pos);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	69d9      	ldr	r1, [r3, #28]
 800101e:	89fa      	ldrh	r2, [r7, #14]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	61da      	str	r2, [r3, #28]

	// write correct TRISE to the register
	p_handle_i2c->p_i2cx->TRISE &= ~(I2C_TRISE_TRISE);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a1a      	ldr	r2, [r3, #32]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001036:	621a      	str	r2, [r3, #32]
	p_handle_i2c->p_i2cx->TRISE |= (temp_trise << I2C_TRISE_TRISE_Pos);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6a19      	ldr	r1, [r3, #32]
 800103e:	89ba      	ldrh	r2, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	621a      	str	r2, [r3, #32]

	return;
 8001048:	bf00      	nop
}
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	431bde83 	.word	0x431bde83
 8001054:	10624dd3 	.word	0x10624dd3

08001058 <I2C_SetBasicParameters>:
 * @param[*p_handle_i2c] - handler to i2c structure
 * @param[speed] - i2c desired speed
 * @return - void
 */
void I2C_SetBasicParameters(I2c_Handle_t *p_handle_i2c, I2cSpeed_t speed)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]

	// reset I2C
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_SWRST;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001072:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_SWRST);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001082:	601a      	str	r2, [r3, #0]

	// check frequency limits
	if (RCC_GetPclk(1) < I2C_FREQUENCY_MINIMUM
 8001084:	2001      	movs	r0, #1
 8001086:	f000 fa93 	bl	80015b0 <RCC_GetPclk>
 800108a:	4603      	mov	r3, r0
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <I2C_SetBasicParameters+0xa8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d906      	bls.n	80010a0 <I2C_SetBasicParameters+0x48>
			|| RCC_GetPclk(1) > I2C_FREQUENCY_MAXIMUM)
 8001092:	2001      	movs	r0, #1
 8001094:	f000 fa8c 	bl	80015b0 <RCC_GetPclk>
 8001098:	4603      	mov	r3, r0
 800109a:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <I2C_SetBasicParameters+0xac>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d903      	bls.n	80010a8 <I2C_SetBasicParameters+0x50>
	{
		p_handle_i2c->error = kI2cErrWrongPclkFreq;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	711a      	strb	r2, [r3, #4]
		return;
 80010a6:	e027      	b.n	80010f8 <I2C_SetBasicParameters+0xa0>
	}

	// set frequency (same as ABP1 frequency)
	p_handle_i2c->p_i2cx->CR2 &= ~(I2C_CR2_FREQ);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80010b6:	605a      	str	r2, [r3, #4]
	p_handle_i2c->p_i2cx->CR2 |=
			((RCC_GetPclk(1) / 1000000) << I2C_CR2_FREQ_Pos);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 fa79 	bl	80015b0 <RCC_GetPclk>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a11      	ldr	r2, [pc, #68]	; (8001108 <I2C_SetBasicParameters+0xb0>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c99      	lsrs	r1, r3, #18
	p_handle_i2c->p_i2cx->CR2 |=
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	605a      	str	r2, [r3, #4]

	I2C_CalculateCCRandTRISE(p_handle_i2c, speed);
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ff1c 	bl	8000f18 <I2C_CalculateCCRandTRISE>

	// enable I2c
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_PE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

	p_handle_i2c->error = kI2cErrNoError;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	711a      	strb	r2, [r3, #4]
	return;
 80010f6:	bf00      	nop
}
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	001e847f 	.word	0x001e847f
 8001104:	02faf080 	.word	0x02faf080
 8001108:	431bde83 	.word	0x431bde83

0800110c <I2C_SendAddress>:
 * @Mode
 * @return - void
 */
static void I2C_SendAddress(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t mode)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]
	uint8_t temp_byte;
	// 1.0 Set START BIT
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_START;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800112a:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800113a:	601a      	str	r2, [r3, #0]
	// 1.1 Wait until SB flag is set
	while (!(I2C_SR1_SB & p_handle_i2c->p_i2cx->SR1))
 800113c:	bf00      	nop
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
			break;;
	// 1.2 Clear SB by reading SR1
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	73fb      	strb	r3, [r7, #15]
	// If transmitting set slave addres LSB to 0, receiver 1
	slave_address &= (~1U);
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	70fb      	strb	r3, [r7, #3]
	slave_address |= mode;
 800115a:	78fa      	ldrb	r2, [r7, #3]
 800115c:	78bb      	ldrb	r3, [r7, #2]
 800115e:	4313      	orrs	r3, r2
 8001160:	70fb      	strb	r3, [r7, #3]
	// 2. Put slave address in DR register -
	p_handle_i2c->p_i2cx->DR = slave_address;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	78fa      	ldrb	r2, [r7, #3]
 8001168:	611a      	str	r2, [r3, #16]
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <I2C_Transmit>:
 * @param[data_size] - amount of data to be send [in bytes]
 * @return - uint8_t - to return error
 */
void I2C_Transmit(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t mem_address, uint8_t *p_tx_data_buffer, uint32_t data_size)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	72fb      	strb	r3, [r7, #11]
 8001184:	4613      	mov	r3, r2
 8001186:	72bb      	strb	r3, [r7, #10]
	uint32_t tx_data_to_send = data_size;
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	617b      	str	r3, [r7, #20]
	uint8_t temp_byte;

	I2C_SendAddress(p_handle_i2c, slave_address, I2C_MODE_TRANSMITTER);
 800118c:	7afb      	ldrb	r3, [r7, #11]
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff ffba 	bl	800110c <I2C_SendAddress>
	// wait until ADDR is set
	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 8001198:	bf00      	nop
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f8      	beq.n	800119a <I2C_Transmit+0x24>
		;
	// 4. ADDR is cleared by reading SR1 , Read SR2
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	74fb      	strb	r3, [r7, #19]
	temp_byte = p_handle_i2c->p_i2cx->SR2;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	74fb      	strb	r3, [r7, #19]

	// 5. TxE bit is set when acknowledge bit is sent
	while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 80011b8:	bf00      	nop
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f8      	beq.n	80011ba <I2C_Transmit+0x44>
		;
	// 6. Write memory address to DR to clear TxE
	p_handle_i2c->p_i2cx->DR = mem_address;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	7aba      	ldrb	r2, [r7, #10]
 80011ce:	611a      	str	r2, [r3, #16]

	// 7. Data transfer
	while (tx_data_to_send > 0)
 80011d0:	e026      	b.n	8001220 <I2C_Transmit+0xaa>
	{
		// wait until data register is empty
		while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 80011d2:	bf00      	nop
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f8      	beq.n	80011d4 <I2C_Transmit+0x5e>
			;

		// put data in data register
		p_handle_i2c->p_i2cx->DR =
				p_tx_data_buffer[data_size - tx_data_to_send];
 80011e2:	6a3a      	ldr	r2, [r7, #32]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	781a      	ldrb	r2, [r3, #0]
		p_handle_i2c->p_i2cx->DR =
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	611a      	str	r2, [r3, #16]

		// change counters
		tx_data_to_send--;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]

		// 8. After last bit is written to DR register , Set STOP bit  and interface
		// is going back to slave mode
		if (tx_data_to_send == 0)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10f      	bne.n	8001220 <I2C_Transmit+0xaa>
		{
			// check if data transfer is finsihed
			while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_BTF))
 8001200:	bf00      	nop
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f8      	beq.n	8001202 <I2C_Transmit+0x8c>
				;
			// stop transfer
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800121e:	601a      	str	r2, [r3, #0]
	while (tx_data_to_send > 0)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1d5      	bne.n	80011d2 <I2C_Transmit+0x5c>
		}
	}

	// in case of sending only mem address
	while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 8001226:	bf00      	nop
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f8      	beq.n	8001228 <I2C_Transmit+0xb2>
		;
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001244:	601a      	str	r2, [r3, #0]

	return;
 8001246:	bf00      	nop
}
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <I2C_Receive>:

void I2C_Receive(I2c_Handle_t *p_handle_i2c, uint8_t slave_address,
		uint8_t *p_rx_data_buffer, uint32_t data_size)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	460b      	mov	r3, r1
 800125c:	72fb      	strb	r3, [r7, #11]
	uint32_t rx_data_to_get = data_size;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	617b      	str	r3, [r7, #20]
	uint8_t temp_byte;

	I2C_SendAddress(p_handle_i2c, slave_address, I2C_MODE_RECEIVER);
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff ff4f 	bl	800110c <I2C_SendAddress>

	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 800126e:	bf00      	nop
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f8      	beq.n	8001270 <I2C_Receive+0x22>
		;

	// single byte receive
	if (data_size == 1)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	f040 808e 	bne.w	80013a2 <I2C_Receive+0x154>
	{
		// Disable acknowledge
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001294:	601a      	str	r2, [r3, #0]
		// 4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	74fb      	strb	r3, [r7, #19]

		// stop comm
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012b4:	601a      	str	r2, [r3, #0]

		// wait for a byte received
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 80012b6:	bf00      	nop
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f8      	beq.n	80012b8 <I2C_Receive+0x6a>
			;

		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6919      	ldr	r1, [r3, #16]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]

		return;
 80012da:	e066      	b.n	80013aa <I2C_Receive+0x15c>

	// multiple bytes receive
	while (rx_data_to_get > 2)
	{
		// 4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	74fb      	strb	r3, [r7, #19]

		// read all the bytes until second last
		while (rx_data_to_get > 2)
 80012ec:	e01c      	b.n	8001328 <I2C_Receive+0xda>
		{
			while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 80012ee:	bf00      	nop
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f8      	beq.n	80012f0 <I2C_Receive+0xa2>
				;
			p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6919      	ldr	r1, [r3, #16]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	b2ca      	uxtb	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
			rx_data_to_get--;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3b01      	subs	r3, #1
 8001316:	617b      	str	r3, [r7, #20]

			// ack receive
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001326:	601a      	str	r2, [r3, #0]
		while (rx_data_to_get > 2)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d8df      	bhi.n	80012ee <I2C_Receive+0xa0>
		}

		// read second last byte
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 800132e:	bf00      	nop
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f8      	beq.n	8001330 <I2C_Receive+0xe2>
			;
		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6919      	ldr	r1, [r3, #16]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	b2ca      	uxtb	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3b01      	subs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]

		// after second last byte clear ACK and set stop
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001366:	601a      	str	r2, [r3, #0]
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001376:	601a      	str	r2, [r3, #0]

		// receive last byte
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 8001378:	bf00      	nop
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f8      	beq.n	800137a <I2C_Receive+0x12c>
			;
		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6919      	ldr	r1, [r3, #16]
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	b2ca      	uxtb	r2, r1
 800139a:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3b01      	subs	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
	while (rx_data_to_get > 2)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d899      	bhi.n	80012dc <I2C_Receive+0x8e>
	}

	return;
 80013a8:	bf00      	nop
}
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <RCC_CalculatePllclk>:

	return 0;
}

static uint32_t RCC_CalculatePllclk(uint32_t source)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <RCC_CalculatePllclk+0x5c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013c2:	81fb      	strh	r3, [r7, #14]
	;
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <RCC_CalculatePllclk+0x5c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013d0:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <RCC_CalculatePllclk+0x5c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	b29b      	uxth	r3, r3
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	817b      	strh	r3, [r7, #10]
	;

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 80013e0:	897b      	ldrh	r3, [r7, #10]
 80013e2:	3301      	adds	r3, #1
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	89ba      	ldrh	r2, [r7, #12]
 80013f4:	fb02 f203 	mul.w	r2, r2, r3
 80013f8:	897b      	ldrh	r3, [r7, #10]
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b07      	cmp	r3, #7
 800141e:	d822      	bhi.n	8001466 <RCC_GetApbPrescaler+0x56>
 8001420:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <RCC_GetApbPrescaler+0x18>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	08001449 	.word	0x08001449
 800142c:	08001467 	.word	0x08001467
 8001430:	08001467 	.word	0x08001467
 8001434:	08001467 	.word	0x08001467
 8001438:	0800144f 	.word	0x0800144f
 800143c:	08001455 	.word	0x08001455
 8001440:	0800145b 	.word	0x0800145b
 8001444:	08001461 	.word	0x08001461
	{
	case (RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 8001448:	2301      	movs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
		break;
 800144c:	e00b      	b.n	8001466 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 800144e:	2302      	movs	r3, #2
 8001450:	60fb      	str	r3, [r7, #12]
		break;
 8001452:	e008      	b.n	8001466 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	60fb      	str	r3, [r7, #12]
		break;
 8001458:	e005      	b.n	8001466 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 800145a:	2308      	movs	r3, #8
 800145c:	60fb      	str	r3, [r7, #12]
		break;
 800145e:	e002      	b.n	8001466 <RCC_GetApbPrescaler+0x56>
	case (RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 8001460:	2310      	movs	r3, #16
 8001462:	60fb      	str	r3, [r7, #12]
		break;
 8001464:	bf00      	nop
	}

	return apb_prescaler;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	b29b      	uxth	r3, r3
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch (bitvalue)
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d840      	bhi.n	800150a <RCC_GetAhbPrescaler+0x92>
 8001488:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <RCC_GetAhbPrescaler+0x18>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014d1 	.word	0x080014d1
 8001494:	0800150b 	.word	0x0800150b
 8001498:	0800150b 	.word	0x0800150b
 800149c:	0800150b 	.word	0x0800150b
 80014a0:	0800150b 	.word	0x0800150b
 80014a4:	0800150b 	.word	0x0800150b
 80014a8:	0800150b 	.word	0x0800150b
 80014ac:	0800150b 	.word	0x0800150b
 80014b0:	080014d7 	.word	0x080014d7
 80014b4:	080014dd 	.word	0x080014dd
 80014b8:	080014e3 	.word	0x080014e3
 80014bc:	080014e9 	.word	0x080014e9
 80014c0:	080014ef 	.word	0x080014ef
 80014c4:	080014f5 	.word	0x080014f5
 80014c8:	080014fb 	.word	0x080014fb
 80014cc:	08001503 	.word	0x08001503
	{
	case (RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
		break;
 80014d4:	e019      	b.n	800150a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
		break;
 80014da:	e016      	b.n	800150a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 80014dc:	2304      	movs	r3, #4
 80014de:	60fb      	str	r3, [r7, #12]
		break;
 80014e0:	e013      	b.n	800150a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 80014e2:	2308      	movs	r3, #8
 80014e4:	60fb      	str	r3, [r7, #12]
		break;
 80014e6:	e010      	b.n	800150a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 80014e8:	2310      	movs	r3, #16
 80014ea:	60fb      	str	r3, [r7, #12]
		break;
 80014ec:	e00d      	b.n	800150a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 80014ee:	2340      	movs	r3, #64	; 0x40
 80014f0:	60fb      	str	r3, [r7, #12]
		break;
 80014f2:	e00a      	b.n	800150a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	60fb      	str	r3, [r7, #12]
		break;
 80014f8:	e007      	b.n	800150a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 80014fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fe:	60fb      	str	r3, [r7, #12]
		break;
 8001500:	e003      	b.n	800150a <RCC_GetAhbPrescaler+0x92>
	case (RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 8001502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001506:	60fb      	str	r3, [r7, #12]
		break;
 8001508:	bf00      	nop
	}

	return ahb_prescaler;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	b29b      	uxth	r3, r3
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <RCC_GetSysclk+0x54>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b08      	cmp	r3, #8
 800152a:	d00a      	beq.n	8001542 <RCC_GetSysclk+0x26>
 800152c:	2b08      	cmp	r3, #8
 800152e:	d81c      	bhi.n	800156a <RCC_GetSysclk+0x4e>
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <RCC_GetSysclk+0x1e>
 8001534:	2b04      	cmp	r3, #4
 8001536:	d002      	beq.n	800153e <RCC_GetSysclk+0x22>
 8001538:	e017      	b.n	800156a <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <RCC_GetSysclk+0x58>)
 800153c:	e016      	b.n	800156c <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 800153e:	2300      	movs	r3, #0
 8001540:	e014      	b.n	800156c <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <RCC_GetSysclk+0x54>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <RCC_GetSysclk+0x3a>
 800154e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001552:	d005      	beq.n	8001560 <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 8001554:	e009      	b.n	800156a <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <RCC_GetSysclk+0x58>)
 8001558:	f7ff ff2a 	bl	80013b0 <RCC_CalculatePllclk>
 800155c:	4603      	mov	r3, r0
 800155e:	e005      	b.n	800156c <RCC_GetSysclk+0x50>
			return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff ff25 	bl	80013b0 <RCC_CalculatePllclk>
 8001566:	4603      	mov	r3, r0
 8001568:	e000      	b.n	800156c <RCC_GetSysclk+0x50>
	}

	return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	00f42400 	.word	0x00f42400

08001578 <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 800157e:	f7ff ffcd 	bl	800151c <RCC_GetSysclk>
 8001582:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <RCC_GetHclk+0x34>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff70 	bl	8001478 <RCC_GetAhbPrescaler>
 8001598:	4603      	mov	r3, r0
 800159a:	807b      	strh	r3, [r7, #2]
	return sysclk / ahb_prescaler;
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800

080015b0 <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 80015ba:	f7ff ffdd 	bl	8001578 <RCC_GetHclk>
 80015be:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch (plck_x)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d002      	beq.n	80015cc <RCC_GetPclk+0x1c>
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d00d      	beq.n	80015e6 <RCC_GetPclk+0x36>
 80015ca:	e019      	b.n	8001600 <RCC_GetPclk+0x50>
	{
	case (1):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >>
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <RCC_GetPclk+0x60>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	0a9b      	lsrs	r3, r3, #10
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff18 	bl	8001410 <RCC_GetApbPrescaler>
 80015e0:	4603      	mov	r3, r0
 80015e2:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE1_Pos);
		break;
 80015e4:	e00c      	b.n	8001600 <RCC_GetPclk+0x50>

	case (2):
		apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >>
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <RCC_GetPclk+0x60>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	0b5b      	lsrs	r3, r3, #13
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff0b 	bl	8001410 <RCC_GetApbPrescaler>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]
		RCC_CFGR_PPRE2_Pos);
		break;
 80015fe:	bf00      	nop
	}

	return hclk / apb_prescaler;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800

08001614 <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs *freqs)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	freqs->sysclk = RCC_GetSysclk();
 800161c:	f7ff ff7e 	bl	800151c <RCC_GetSysclk>
 8001620:	4602      	mov	r2, r0
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 8001626:	f7ff ffa7 	bl	8001578 <RCC_GetHclk>
 800162a:	4602      	mov	r2, r0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff ffbd 	bl	80015b0 <RCC_GetPclk>
 8001636:	4602      	mov	r2, r0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff ffb7 	bl	80015b0 <RCC_GetPclk>
 8001642:	4602      	mov	r2, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	60da      	str	r2, [r3, #12]

	return;
 8001648:	bf00      	nop
}
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db0b      	blt.n	800167a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	4907      	ldr	r1, [pc, #28]	; (8001688 <__NVIC_EnableIRQ+0x38>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2001      	movs	r0, #1
 8001672:	fa00 f202 	lsl.w	r2, r0, r2
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100

0800168c <USART_InitClock>:
 * Init USART clock
 * @param[*p_handle_usart] - handler to usart struct
 * @return - void
 */
void USART_InitClock(USART_Handle_t *p_handle_usart)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	if (p_handle_usart->p_usartx == USART1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <USART_InitClock+0xa4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d112      	bne.n	80016c4 <USART_InitClock+0x38>
	{
		RCC_CLOCK_USART1_ENABLE();
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <USART_InitClock+0xa8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a24      	ldr	r2, [pc, #144]	; (8001734 <USART_InitClock+0xa8>)
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
		RCC_RESET_USART1();
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <USART_InitClock+0xa8>)
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	4a21      	ldr	r2, [pc, #132]	; (8001734 <USART_InitClock+0xa8>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6253      	str	r3, [r2, #36]	; 0x24
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <USART_InitClock+0xa8>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <USART_InitClock+0xa8>)
 80016bc:	f023 0310 	bic.w	r3, r3, #16
 80016c0:	6253      	str	r3, [r2, #36]	; 0x24
	{
		RCC_CLOCK_USART6_ENABLE();
		RCC_RESET_USART6();
	}

	return;
 80016c2:	e02f      	b.n	8001724 <USART_InitClock+0x98>
	else if (p_handle_usart->p_usartx == USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <USART_InitClock+0xac>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d112      	bne.n	80016f4 <USART_InitClock+0x68>
		RCC_CLOCK_USART2_ENABLE();
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <USART_InitClock+0xa8>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <USART_InitClock+0xa8>)
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
		RCC_RESET_USART2();
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <USART_InitClock+0xa8>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a15      	ldr	r2, [pc, #84]	; (8001734 <USART_InitClock+0xa8>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <USART_InitClock+0xa8>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <USART_InitClock+0xa8>)
 80016ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80016f0:	6213      	str	r3, [r2, #32]
	return;
 80016f2:	e017      	b.n	8001724 <USART_InitClock+0x98>
	else if (p_handle_usart->p_usartx == USART6)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a10      	ldr	r2, [pc, #64]	; (800173c <USART_InitClock+0xb0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d112      	bne.n	8001724 <USART_InitClock+0x98>
		RCC_CLOCK_USART6_ENABLE();
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <USART_InitClock+0xa8>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <USART_InitClock+0xa8>)
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
		RCC_RESET_USART6();
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <USART_InitClock+0xa8>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <USART_InitClock+0xa8>)
 8001710:	f043 0320 	orr.w	r3, r3, #32
 8001714:	6253      	str	r3, [r2, #36]	; 0x24
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <USART_InitClock+0xa8>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	4a06      	ldr	r2, [pc, #24]	; (8001734 <USART_InitClock+0xa8>)
 800171c:	f023 0320 	bic.w	r3, r3, #32
 8001720:	6253      	str	r3, [r2, #36]	; 0x24
	return;
 8001722:	bf00      	nop
 8001724:	bf00      	nop
}
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40011000 	.word	0x40011000
 8001734:	40023800 	.word	0x40023800
 8001738:	40004400 	.word	0x40004400
 800173c:	40011400 	.word	0x40011400

08001740 <USART_InitGpioPins>:
 * Init GPIO pins for usart peripheral
 * @param[*p_handle_usart] - handler to usart struct
 * @return - void
 */
void USART_InitGpioPins(USART_Handle_t *p_handle_usart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

	if(p_handle_usart->p_usartx == USART2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <USART_InitGpioPins+0x40>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d111      	bne.n	8001776 <USART_InitGpioPins+0x36>
	{
		// PA2 RX PA3 TX
		GPIO_ConfigBasic(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioModeAF, kGpioPUPDNoPull);
 8001752:	2300      	movs	r3, #0
 8001754:	2202      	movs	r2, #2
 8001756:	210c      	movs	r1, #12
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <USART_InitGpioPins+0x44>)
 800175a:	f7ff fa65 	bl	8000c28 <GPIO_ConfigBasic>
		GPIO_ConfigOutput(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioOTOpenDrain, kGpioSpeedVeryHigh);
 800175e:	2303      	movs	r3, #3
 8001760:	2201      	movs	r2, #1
 8001762:	210c      	movs	r1, #12
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <USART_InitGpioPins+0x44>)
 8001766:	f7ff faad 	bl	8000cc4 <GPIO_ConfigOutput>
		GPIO_ConfigAF(GPIOA, (GPIO_FLAG_PIN_3 | GPIO_FLAG_PIN_2), kGpioAF7);
 800176a:	2207      	movs	r2, #7
 800176c:	210c      	movs	r1, #12
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <USART_InitGpioPins+0x44>)
 8001770:	f7ff faf4 	bl	8000d5c <GPIO_ConfigAF>

	}

	return;
 8001774:	bf00      	nop
 8001776:	bf00      	nop
}
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40004400 	.word	0x40004400
 8001784:	40020000 	.word	0x40020000

08001788 <USART_SetBaudRate>:
 * @param[oversampling] - oversampling method 8/16
 * @return - void
 */
void USART_SetBaudRate(USART_Handle_t *p_handle_usart, uint32_t baud_rate,
		UsartOversampling_t oversampling)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	4613      	mov	r3, r2
 8001794:	71fb      	strb	r3, [r7, #7]
	uint16_t baud_div_mantissa;
	uint8_t baud_div_fraction;

	// set oversampling

	p_handle_usart->p_usartx->CR1 |= (oversampling << USART_CR1_OVER8_Pos);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	03db      	lsls	r3, r3, #15
 80017a0:	4619      	mov	r1, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	60da      	str	r2, [r3, #12]
	// in equation we have 8 * (2 - OVER8)
	uint8_t usart_divmulti =
			8
					* (2
							- (1U
									& (p_handle_usart->p_usartx->CR1
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
											>> USART_CR1_OVER8_Pos)));
 80017b0:	0bdb      	lsrs	r3, r3, #15
									& (p_handle_usart->p_usartx->CR1
 80017b2:	f003 0301 	and.w	r3, r3, #1
							- (1U
 80017b6:	f1c3 0302 	rsb	r3, r3, #2
	uint8_t usart_divmulti =
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	// read clock values from rcc registers
	RCC_GetClockFrequencies(&clock_freqs);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff24 	bl	8001614 <RCC_GetClockFrequencies>

	if (p_handle_usart->p_usartx == USART2)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a35      	ldr	r2, [pc, #212]	; (80018a8 <USART_SetBaudRate+0x120>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d102      	bne.n	80017dc <USART_SetBaudRate+0x54>
	{
		pclk_freq = clock_freqs.pclk1;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017da:	e001      	b.n	80017e0 <USART_SetBaudRate+0x58>
	}
	else
	{
		// usart1 and usart6 are on apb2
		pclk_freq = clock_freqs.pclk2;
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	baud_div = ((float) pclk_freq / (baud_rate * usart_divmulti));
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001800:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	baud_div_mantissa = baud_div;
 8001804:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180c:	ee17 3a90 	vmov	r3, s15
 8001810:	857b      	strh	r3, [r7, #42]	; 0x2a
	// rounding number to get correct fraction
	baud_div_fraction = round((baud_div - baud_div_mantissa) * usart_divmulti);
 8001812:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001820:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001824:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001834:	ee17 0a90 	vmov	r0, s15
 8001838:	f7fe fe30 	bl	800049c <__aeabi_f2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	ec43 2b10 	vmov	d0, r2, r3
 8001844:	f000 f8da 	bl	80019fc <round>
 8001848:	ec53 2b10 	vmov	r2, r3, d0
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7fe fe7c 	bl	800054c <__aeabi_d2uiz>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	// if after rounding we have value bigger or equal to oversampling then we
	// need to carry +1 to mantissa and set fraction to 0. like 50,99 -> 51;
	if (baud_div_fraction >= usart_divmulti)
 800185a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800185e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001862:	429a      	cmp	r2, r3
 8001864:	d305      	bcc.n	8001872 <USART_SetBaudRate+0xea>
	{
		baud_div_fraction = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		baud_div_mantissa++;
 800186c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800186e:	3301      	adds	r3, #1
 8001870:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	// insert values to brr register
	p_handle_usart->p_usartx->BRR = 0;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
			<< USART_BRR_DIV_Mantissa_Pos);
 8001880:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	4619      	mov	r1, r3
	p_handle_usart->p_usartx->BRR |= (baud_div_mantissa
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6899      	ldr	r1, [r3, #8]
			<< USART_BRR_DIV_Fraction_Pos);
 8001894:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
	p_handle_usart->p_usartx->BRR |= (baud_div_fraction
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	609a      	str	r2, [r3, #8]
}
 80018a0:	bf00      	nop
 80018a2:	3730      	adds	r7, #48	; 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40004400 	.word	0x40004400

080018ac <USART_EnableIRQs>:
 * @param[CR3_flags] - IRQ flags in CR3
 * @return - void
 */
void USART_EnableIRQs(USART_Handle_t *p_handle_usart, uint32_t CR1_flags,
		uint32_t CR2_flags, uint32_t CR3_flags)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 80018ba:	2026      	movs	r0, #38	; 0x26
 80018bc:	f7ff fec8 	bl	8001650 <__NVIC_EnableIRQ>
	// CR1 - PEIE,TXEIE,TCIE,RXNEIE,IDLEIE
	if (CR1_flags)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <USART_EnableIRQs+0x2a>
	{
		p_handle_usart->p_usartx->CR1 |= CR1_flags;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68d9      	ldr	r1, [r3, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	60da      	str	r2, [r3, #12]
	}

	// CR2 - LBDIE
	if (CR2_flags)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <USART_EnableIRQs+0x40>
	{
		p_handle_usart->p_usartx->CR2 |= CR2_flags;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6919      	ldr	r1, [r3, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	611a      	str	r2, [r3, #16]
	}

	// CR3 - CTSIE, EIE
	if (CR3_flags)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <USART_EnableIRQs+0x58>
	{
		p_handle_usart->p_usartx->CR1 |= CR3_flags;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68d9      	ldr	r1, [r3, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	60da      	str	r2, [r3, #12]
	}

	return;
 8001902:	bf00      	nop
 8001904:	bf00      	nop
}
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <USART_SetBasicParameters>:
 * @return - void
 */
void USART_SetBasicParameters(USART_Handle_t *p_handle_usart,
		UsartWordLenght_t word_lenght, UsartStopBits_t stop_bits,
		UsartParity_t parity)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	4608      	mov	r0, r1
 8001916:	4611      	mov	r1, r2
 8001918:	461a      	mov	r2, r3
 800191a:	4603      	mov	r3, r0
 800191c:	70fb      	strb	r3, [r7, #3]
 800191e:	460b      	mov	r3, r1
 8001920:	70bb      	strb	r3, [r7, #2]
 8001922:	4613      	mov	r3, r2
 8001924:	707b      	strb	r3, [r7, #1]
	//	enable the USART by writing the UE bit in USART_CR1 register to 1.
	p_handle_usart->p_usartx->CR1 |= USART_CR1_UE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001934:	60da      	str	r2, [r3, #12]
	//	program the M bit in USART_CR1 to define the word length.
	p_handle_usart->p_usartx->CR1 |= (word_lenght << USART_CR1_M_Pos);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	031b      	lsls	r3, r3, #12
 8001940:	4619      	mov	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	60da      	str	r2, [r3, #12]
	//	program the number of stop bits in USART_CR2.
	p_handle_usart->p_usartx->CR1 |= (stop_bits << USART_CR2_STOP_Pos);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	031b      	lsls	r3, r3, #12
 8001954:	4619      	mov	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	60da      	str	r2, [r3, #12]
	// program parity control
	if (parity != kUsartNoParity)
 800195e:	787b      	ldrb	r3, [r7, #1]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d011      	beq.n	8001988 <USART_SetBasicParameters+0x7c>
	{
		p_handle_usart->p_usartx->CR1 |= USART_CR1_PCE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001972:	60da      	str	r2, [r3, #12]
		p_handle_usart->p_usartx->CR1 |= (parity << USART_CR1_PS_Pos);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	787b      	ldrb	r3, [r7, #1]
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	4619      	mov	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]
	}

	//clear TC flag
	p_handle_usart->p_usartx->SR &= ~(USART_SR_TC);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001996:	601a      	str	r2, [r3, #0]
	return;
 8001998:	bf00      	nop
}
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <__libc_init_array>:
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	4d0d      	ldr	r5, [pc, #52]	; (80019dc <__libc_init_array+0x38>)
 80019a8:	4c0d      	ldr	r4, [pc, #52]	; (80019e0 <__libc_init_array+0x3c>)
 80019aa:	1b64      	subs	r4, r4, r5
 80019ac:	10a4      	asrs	r4, r4, #2
 80019ae:	2600      	movs	r6, #0
 80019b0:	42a6      	cmp	r6, r4
 80019b2:	d109      	bne.n	80019c8 <__libc_init_array+0x24>
 80019b4:	4d0b      	ldr	r5, [pc, #44]	; (80019e4 <__libc_init_array+0x40>)
 80019b6:	4c0c      	ldr	r4, [pc, #48]	; (80019e8 <__libc_init_array+0x44>)
 80019b8:	f000 f866 	bl	8001a88 <_init>
 80019bc:	1b64      	subs	r4, r4, r5
 80019be:	10a4      	asrs	r4, r4, #2
 80019c0:	2600      	movs	r6, #0
 80019c2:	42a6      	cmp	r6, r4
 80019c4:	d105      	bne.n	80019d2 <__libc_init_array+0x2e>
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019cc:	4798      	blx	r3
 80019ce:	3601      	adds	r6, #1
 80019d0:	e7ee      	b.n	80019b0 <__libc_init_array+0xc>
 80019d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80019d6:	4798      	blx	r3
 80019d8:	3601      	adds	r6, #1
 80019da:	e7f2      	b.n	80019c2 <__libc_init_array+0x1e>
 80019dc:	08001aa0 	.word	0x08001aa0
 80019e0:	08001aa0 	.word	0x08001aa0
 80019e4:	08001aa0 	.word	0x08001aa0
 80019e8:	08001aa4 	.word	0x08001aa4

080019ec <memset>:
 80019ec:	4402      	add	r2, r0
 80019ee:	4603      	mov	r3, r0
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d100      	bne.n	80019f6 <memset+0xa>
 80019f4:	4770      	bx	lr
 80019f6:	f803 1b01 	strb.w	r1, [r3], #1
 80019fa:	e7f9      	b.n	80019f0 <memset+0x4>

080019fc <round>:
 80019fc:	ec51 0b10 	vmov	r0, r1, d0
 8001a00:	b570      	push	{r4, r5, r6, lr}
 8001a02:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8001a06:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8001a0a:	2c13      	cmp	r4, #19
 8001a0c:	ee10 2a10 	vmov	r2, s0
 8001a10:	460b      	mov	r3, r1
 8001a12:	dc19      	bgt.n	8001a48 <round+0x4c>
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	da09      	bge.n	8001a2c <round+0x30>
 8001a18:	3401      	adds	r4, #1
 8001a1a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8001a1e:	d103      	bne.n	8001a28 <round+0x2c>
 8001a20:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8001a24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001a28:	2100      	movs	r1, #0
 8001a2a:	e028      	b.n	8001a7e <round+0x82>
 8001a2c:	4d15      	ldr	r5, [pc, #84]	; (8001a84 <round+0x88>)
 8001a2e:	4125      	asrs	r5, r4
 8001a30:	ea01 0605 	and.w	r6, r1, r5
 8001a34:	4332      	orrs	r2, r6
 8001a36:	d00e      	beq.n	8001a56 <round+0x5a>
 8001a38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a3c:	fa42 f404 	asr.w	r4, r2, r4
 8001a40:	4423      	add	r3, r4
 8001a42:	ea23 0305 	bic.w	r3, r3, r5
 8001a46:	e7ef      	b.n	8001a28 <round+0x2c>
 8001a48:	2c33      	cmp	r4, #51	; 0x33
 8001a4a:	dd07      	ble.n	8001a5c <round+0x60>
 8001a4c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001a50:	d101      	bne.n	8001a56 <round+0x5a>
 8001a52:	f7fe fbc5 	bl	80001e0 <__adddf3>
 8001a56:	ec41 0b10 	vmov	d0, r0, r1
 8001a5a:	bd70      	pop	{r4, r5, r6, pc}
 8001a5c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8001a60:	f04f 35ff 	mov.w	r5, #4294967295
 8001a64:	40f5      	lsrs	r5, r6
 8001a66:	4228      	tst	r0, r5
 8001a68:	d0f5      	beq.n	8001a56 <round+0x5a>
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8001a70:	fa01 f404 	lsl.w	r4, r1, r4
 8001a74:	1912      	adds	r2, r2, r4
 8001a76:	bf28      	it	cs
 8001a78:	185b      	addcs	r3, r3, r1
 8001a7a:	ea22 0105 	bic.w	r1, r2, r5
 8001a7e:	4608      	mov	r0, r1
 8001a80:	4619      	mov	r1, r3
 8001a82:	e7e8      	b.n	8001a56 <round+0x5a>
 8001a84:	000fffff 	.word	0x000fffff

08001a88 <_init>:
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	bf00      	nop
 8001a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8e:	bc08      	pop	{r3}
 8001a90:	469e      	mov	lr, r3
 8001a92:	4770      	bx	lr

08001a94 <_fini>:
 8001a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a96:	bf00      	nop
 8001a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a9a:	bc08      	pop	{r3}
 8001a9c:	469e      	mov	lr, r3
 8001a9e:	4770      	bx	lr
